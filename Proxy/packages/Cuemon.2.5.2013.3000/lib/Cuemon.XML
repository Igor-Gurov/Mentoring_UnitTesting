<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cuemon</name>
    </assembly>
    <members>
        <member name="T:Cuemon.Act">
            <summary>
            Encapsulates a method that takes no parameters and does not return a value.
            </summary>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`1">
            <summary>
            Encapsulates a method that has one parameter and does not return a value.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg">The parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`2">
            <summary>
            Encapsulates a method that has two parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of th Something that contributes to a resulte method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`3">
            <summary>
            Encapsulates a method that has three parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`4">
            <summary>
            Encapsulates a method that has four parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`5">
            <summary>
            Encapsulates a method that has five parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`6">
            <summary>
            Encapsulates a method that has six parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`7">
            <summary>
            Encapsulates a method that has seven parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`8">
            <summary>
            Encapsulates a method that has eight parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`9">
            <summary>
            Encapsulates a method that has nine parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`10">
            <summary>
            Encapsulates a method that has ten parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`11">
            <summary>
            Encapsulates a method that has eleven parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`12">
            <summary>
            Encapsulates a method that has twelve parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`13">
            <summary>
            Encapsulates a method that has thirteen parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`14">
            <summary>
            Encapsulates a method that has fourteen parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`15">
            <summary>
            Encapsulates a method that has fifteen parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`16">
            <summary>
            Encapsulates a method that has sixteen parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`17">
            <summary>
            Encapsulates a method that has seventeen parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg17">The seventeenth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`18">
            <summary>
            Encapsulates a method that has eighteen parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg17">The seventeenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg18">The eighteenth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`19">
            <summary>
            Encapsulates a method that has nineteen parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg17">The seventeenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg18">The eighteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg19">The nineteenth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.Act`20">
            <summary>
            Encapsulates a method that has twenty parameters and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T20">The type of the twentieth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg17">The seventeenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg18">The eighteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg19">The nineteenth parameter of the method that this delegate encapsulates.</param>
            <param name="arg20">The twentieth parameter of the method that this delegate encapsulates.</param>
            <remarks>This delegate is equivalent to <c>Action</c> in .NET 2.0 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Act</c> was carefully selected to reflect something done; a method that does something as part of a job. This fits perfectly for a generic delegate.</remarks>
        </member>
        <member name="T:Cuemon.AssemblyUtility">
            <summary>
            This utility class is designed to make common <see cref="T:System.Reflection.Assembly"/> related operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.AssemblyUtility.GetCacheValidator(System.Reflection.Assembly)">
            <summary>
            Returns a <see cref="T:Cuemon.Caching.CacheValidator"/> from the specified <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to resolve a <see cref="T:Cuemon.Caching.CacheValidator"/> from.</param>
            <returns>A <see cref="T:Cuemon.Caching.CacheValidator"/> that fully represents the integrity of the specified <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="assembly"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.IReadOnlyData">
            <summary>
            Provides a way to supply read-only user-defined information about the class implementing this interface.
            </summary>
        </member>
        <member name="P:Cuemon.IReadOnlyData.Data">
            <summary>
            Gets a read-only collection of key/value pairs that provide user-defined information about this class.
            </summary>
            <value>An object that implements the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface and contains a collection of user-defined key/value pairs.</value>
        </member>
        <member name="T:Cuemon.Diagnostics.InstrumentationUtility">
            <summary>
            Provides a way to diagnostic, monitor and measure performance through <see cref="T:Cuemon.Act"/> and <see cref="T:Cuemon.Doer`1"/> delegate overloads.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction(System.Reflection.MethodBase,Cuemon.Act)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``1(System.Reflection.MethodBase,Cuemon.Act{``0},``0)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``2(System.Reflection.MethodBase,Cuemon.Act{``0,``1},``0,``1)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``3(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2},``0,``1,``2)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``4(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``5(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``6(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``7(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``8(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``9(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``10(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``11(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``12(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``13(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``14(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``15(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``16(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``17(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``18(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``19(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg19">The nineteenth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteAction``20(System.Reflection.MethodBase,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19)">
            <summary>
            Instrument and executes the specified delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T20">The type of the twentieth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg19">The nineteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg20">The twentieth parameter of the delegate <paramref name="method"/>.</param>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``1(System.Reflection.MethodBase,Cuemon.Doer{``0})">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``2(System.Reflection.MethodBase,Cuemon.Doer{``0,``1},``0)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg">The parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``3(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2},``0,``1)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``4(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``5(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``6(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``7(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``8(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``9(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``10(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``11(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``12(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``13(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``14(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``15(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``16(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``17(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``18(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``19(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``20(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg19">The nineteenth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.InstrumentationUtility.ExecuteFunction``21(System.Reflection.MethodBase,Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19)">
            <summary>
            Instrument and executes the specified function delegate <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T20">The type of the twentieth parameter of the function delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="caller">A <see cref="T:System.Reflection.MethodBase"/> object representing the executing caller method.</param>
            <param name="method">The function delegate to instrument and invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg19">The nineteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg20">The twentieth parameter of the function delegate <paramref name="method"/>.</param>
            <returns>The result of the function delegate <paramref name="method"/>.</returns>
            <remarks>The instrumentation of <paramref name="method"/> is thread safe and the instrumented result is passed to <see cref="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted"/>.</remarks>
        </member>
        <member name="P:Cuemon.Diagnostics.InstrumentationUtility.TimeMeasureCompleted">
            <summary>
            Gets or sets the delegate that is invoked when a time measured instrumentation is completed.
            </summary>
            <value>The delegate that is invoked when a time measured instrumentation is completed.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.ActFactory">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory.#ctor(Cuemon.Act)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
        </member>
        <member name="M:Cuemon.ActFactory.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`1">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <see cref="P:Cuemon.ActFactory`1.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`1.#ctor(Cuemon.Act{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`1"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`1.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`1.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`1.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`1.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`1.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`1.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`1.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`1.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`1.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`1.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`1.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`1.Arg1">
            <summary>
            Gets or sets the first parameter of the delegate <see cref="P:Cuemon.ActFactory`1.Method"/>.
            </summary>
            <value>The first parameter of the delegate <see cref="P:Cuemon.ActFactory`1.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`2">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`2.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`2.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`2.#ctor(Cuemon.Act{`0,`1},`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`2"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`2.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`2.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`2.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`2.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`2.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`2.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`2.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`2.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`2.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`2.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`2.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`2.Arg2">
            <summary>
            Gets or sets the second parameter of the delegate <see cref="P:Cuemon.ActFactory`2.Method"/>.
            </summary>
            <value>The second parameter of the delegate <see cref="P:Cuemon.ActFactory`2.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`3">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`3.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`3.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`3.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`3.#ctor(Cuemon.Act{`0,`1,`2},`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`3"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`3.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`3.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`3.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`3.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`3.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`3.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`3.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`3.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`3.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`3.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`3.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`3.Arg3">
            <summary>
            Gets or sets the third parameter of the delegate <see cref="P:Cuemon.ActFactory`3.Method"/>.
            </summary>
            <value>The third parameter of the delegate <see cref="P:Cuemon.ActFactory`3.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`4">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`4.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`4.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`4.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`4.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`4.#ctor(Cuemon.Act{`0,`1,`2,`3},`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`4"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`4.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`4.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`4.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`4.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`4.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`4.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`4.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`4.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`4.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`4.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`4.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`4.Arg4">
            <summary>
            Gets or sets the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`4.Method"/>.
            </summary>
            <value>The fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`4.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`5">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`5.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`5.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`5.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`5.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`5.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`5.#ctor(Cuemon.Act{`0,`1,`2,`3,`4},`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`5"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`5.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`5.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`5.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`5.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`5.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`5.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`5.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`5.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`5.Method">
            <summary>
            Gets or sets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`5.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`5.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`5.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`5.Arg5">
            <summary>
            Gets the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`5.Method"/>.
            </summary>
            <value>The fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`5.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`6">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`6.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`6.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`6.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`6.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`6.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`6.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`6.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`6"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`6.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`6.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`6.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`6.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`6.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`6.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`6.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`6.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`6.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`6.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`6.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`6.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`6.Arg6">
            <summary>
            Gets or sets the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`6.Method"/>.
            </summary>
            <value>The sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`6.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`7">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`7.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`7.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`7.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`7.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`7.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`7.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`7.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`7.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6},`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`7"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`7.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`7.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`7.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`7.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`7.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`7.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`7.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`7.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`7.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`7.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`7.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`7.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`7.Arg7">
            <summary>
            Gets or sets the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`7.Method"/>.
            </summary>
            <value>The seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`7.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`8">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`8.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7},`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`8"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`8.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`8.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`8.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`8.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`8.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`8.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`8.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`8.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`8.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`8.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`8.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`8.Arg8">
            <summary>
            Gets or sets the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.
            </summary>
            <value>The eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`8.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`9">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`9.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8},`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`9"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`9.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`9.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`9.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`9.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`9.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`9.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`9.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`9.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`9.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`9.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`9.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`9.Arg9">
            <summary>
            Gets or sets the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.
            </summary>
            <value>The ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`9.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`10">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`10.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`10"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`10.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`10.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`10.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`10.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`10.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`10.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`10.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`10.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`10.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`10.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`10.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`10.Arg10">
            <summary>
            Gets or sets the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.
            </summary>
            <value>The tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`10.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`11">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`11.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`11"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`11.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`11.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`11.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`11.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`11.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`11.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`11.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`11.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`11.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`11.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`11.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`11.Arg11">
            <summary>
            Gets or sets the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.
            </summary>
            <value>The eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`11.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`12">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`12.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`12"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`12.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`12.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`12.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`12.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`12.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`12.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`12.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`12.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`12.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`12.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`12.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`12.Arg12">
            <summary>
            Gets or sets the twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.
            </summary>
            <value>The twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`12.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`13">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`13.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`13"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`13.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`13.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`13.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`13.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`13.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`13.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`13.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`13.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`13.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`13.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`13.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`13.Arg13">
            <summary>
            Gets or sets the thirteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.
            </summary>
            <value>The thirteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`13.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`14">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`14.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`14"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`14.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`14.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`14.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`14.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`14.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`14.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`14.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`14.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`14.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`14.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`14.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`14.Arg14">
            <summary>
            Gets or sets the fourteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.
            </summary>
            <value>The fourteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`14.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`15">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`15.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`15"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`15.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`15.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`15.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`15.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`15.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`15.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`15.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`15.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`15.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`15.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`15.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`15.Arg15">
            <summary>
            Gets or sets the fifteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.
            </summary>
            <value>The fifteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`15.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`16">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`16.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`16"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`16.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`16.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`16.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`16.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`16.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`16.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`16.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`16.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`16.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`16.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`16.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`16.Arg16">
            <summary>
            Gets or sets the sixteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.
            </summary>
            <value>The sixteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`16.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`17">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`17.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`17"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`17.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`17.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`17.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`17.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`17.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`17.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`17.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`17.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`17.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`17.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`17.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`17.Arg17">
            <summary>
            Gets or sets the seventeenth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.
            </summary>
            <value>The seventeenth parameter of the delegate <see cref="P:Cuemon.ActFactory`17.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`18">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`18.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`18"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`18.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`18.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`18.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`18.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`18.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`18.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`18.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`18.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`18.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`18.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`18.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`18.Arg18">
            <summary>
            Gets or sets the eighteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.
            </summary>
            <value>The eighteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`18.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`19">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`19.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`19"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg19">The nineteenth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`19.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`19.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`19.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`19.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`19.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`19.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`19.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`19.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`19.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`19.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`19.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`19.Arg19">
            <summary>
            Gets or sets the nineteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.
            </summary>
            <value>The nineteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`19.Method"/>.</value>
        </member>
        <member name="T:Cuemon.ActFactory`20">
            <summary>
            Provides an easy way of invoking a <see cref="T:Cuemon.Act"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
            <typeparam name="T20">The type of the twentieth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.ActFactory`20.#ctor(Cuemon.Act{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ActFactory`20"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Act"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg19">The nineteenth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg20">The twentieth parameter of the delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.ActFactory`20.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Act"/> delegate associated with <see cref="P:Cuemon.ActFactory`20.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.ActFactory`20.GetMethodInfo">
            <summary>
            Gets the method represented by the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.ActFactory`20.Method"/> represented by the delegate.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`20.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.ActFactory"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`20.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.ActFactory"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.ActFactory"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.ActFactory`20.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.ActFactory`20.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Act"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Act"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.ActFactory`20.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned delegate to <see cref="P:Cuemon.ActFactory`20.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned delegate to <see cref="P:Cuemon.ActFactory`20.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.ActFactory`20.Arg20">
            <summary>
            Gets or sets the twentieth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.
            </summary>
            <value>The twentieth parameter of the delegate <see cref="P:Cuemon.ActFactory`20.Method"/>.</value>
        </member>
        <member name="T:Cuemon.Annotations.RequiredValidationAttribute">
            <summary>
            Denotes one or more properties that is required for an entity.
            </summary>
        </member>
        <member name="T:Cuemon.Annotations.ValidationAttribute">
            <summary>
            Serves as the base class for all validation attributes.
            </summary>
        </member>
        <member name="M:Cuemon.Annotations.ValidationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Annotations.ValidationAttribute"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Annotations.ValidationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Annotations.ValidationAttribute"/> class.
            </summary>
            <param name="message">The message to relay from this <see cref="T:Cuemon.Annotations.ValidationAttribute"/>.</param>
        </member>
        <member name="P:Cuemon.Annotations.ValidationAttribute.Message">
            <summary>
            Gets or sets the message to relay from this <see cref="T:Cuemon.Annotations.ValidationAttribute"/>.
            </summary>
            <value>
            The message to relay from this <see cref="T:Cuemon.Annotations.ValidationAttribute"/>.
            </value>
        </member>
        <member name="M:Cuemon.Annotations.RequiredValidationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Annotations.RequiredValidationAttribute"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Annotations.RequiredValidationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Annotations.RequiredValidationAttribute"/> class.
            </summary>
            <param name="message">The message to relay from this <see cref="T:Cuemon.Annotations.ValidationAttribute"/>.</param>
        </member>
        <member name="T:Cuemon.Annotations.UniqueValidationAttribute">
            <summary>
            Denotes one or more properties that uniquely identify an entity.
            </summary>
        </member>
        <member name="M:Cuemon.Annotations.UniqueValidationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Annotations.UniqueValidationAttribute"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Annotations.UniqueValidationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Annotations.UniqueValidationAttribute"/> class.
            </summary>
            <param name="message">The message to relay from this <see cref="T:Cuemon.Annotations.ValidationAttribute"/>.</param>
        </member>
        <member name="T:Cuemon.ArrayUtility">
            <summary>
            This utility class is designed to make common array operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.ArrayUtility.Cast``1(System.Object[])">
            <summary>
            Casts the elements of an object array to the specified type.
            </summary>
            <typeparam name="TResult">The type to cast the elements of <paramref name="values"/> to.</typeparam>
            <param name="values">The object array that contains the elements to be cast to type <typeparamref name="TResult"/>.</param>
            <returns>An array that contains each element of the <paramref name="values"/> array cast to the specified type.</returns>
        </member>
        <member name="T:Cuemon.AssignmentUtility">
            <summary>
            This utility class is designed to make arithmetic assignment operations for numeric operands easier to work with by using generics.
            </summary>
        </member>
        <member name="M:Cuemon.AssignmentUtility.Add``1(``0,``0)">
            <summary>
            Performs a binary addition of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The first value to add.</param>
            <param name="y">The second value to add.</param>
            <returns>The sum of <paramref name="x"/> and <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="x"/> and <paramref name="y"/> is less than or greater than the by <typeparamref name="T"/> valid <c>MinValue</c> and <c>MaxValue</c>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.And``1(``0,``0)">
            <summary>
            Performs a a bitwise logical conjunction (AND) operation of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The first value to AND.</param>
            <param name="y">The second value to AND.</param>
            <returns>The result of <paramref name="x"/> AND <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.Assign``1(``0,``0)">
            <summary>
            Performs an assignment of the right-hand operand to the left-hand operand.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The left-hand operand.</param>
            <param name="y">The right-hand operand.</param>
            <returns>The value of <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.Divide``1(``0,``0)">
            <summary>
            Performs a binary division of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The dividend.</param>
            <param name="y">The divisor.</param>
            <returns>The result of dividing <paramref name="x"/> by <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.DivideByZeroException">
            <paramref name="y"/> is zero.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="x"/> and <paramref name="y"/> is less than or greater than the by <typeparamref name="T"/> valid <c>MinValue</c> and <c>MaxValue</c>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.ExclusiveOr``1(``0,``0)">
            <summary>
            Performs a bitwise exclusive or (XOR) operation of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The first value to XOR.</param>
            <param name="y">The second value to XOR.</param>
            <returns>The result of <paramref name="x"/> XOR <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.LeftShift``1(``0,``0)">
            <summary>
            Performs an arithmetic left shift (&lt;&lt;) operation.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The bit pattern to be shifted.</param>
            <param name="y">The number of bits to shift the bit pattern.</param>
            <returns>The result of shifting the bit pattern.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.Multiply``1(``0,``0)">
            <summary>
            Performs a binary multiplication of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The multiplicand.</param>
            <param name="y">The multiplier.</param>
            <returns>The result of multiplying <paramref name="x"/> and <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="x"/> and <paramref name="y"/> is less than or greater than the by <typeparamref name="T"/> valid <c>MinValue</c> and <c>MaxValue</c>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.Or``1(``0,``0)">
            <summary>
            Performs a bitwise logical disjunction (OR) operation of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The first value to OR.</param>
            <param name="y">The second value to OR.</param>
            <returns>The result of <paramref name="x"/> OR <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.Remainder``1(``0,``0)">
            <summary>
            Performs a binary division of the two specified values and computes the remainder hereof.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The dividend.</param>
            <param name="y">The divisor.</param>
            <returns>The remainder after dividing <paramref name="x"/> by <paramref name="y"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.DivideByZeroException">
            <paramref name="y"/> is zero.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="x"/> and <paramref name="y"/> is less than or greater than the by <typeparamref name="T"/> valid <c>MinValue</c> and <c>MaxValue</c>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.RightShift``1(``0,``0)">
            <summary>
            Performs an arithmetic right shift (&gt;&gt;) operation.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The bit pattern to be shifted.</param>
            <param name="y">The number of bits to shift the bit pattern.</param>
            <returns>The result of shifting the bit pattern.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.Subtract``1(``0,``0)">
            <summary>
            Performs a binary subtraction of the two specified values.
            </summary>
            <typeparam name="T">The type of the values for the operand operation.</typeparam>
            <param name="x">The minuend.</param>
            <param name="y">The subtrahend.</param>
            <returns>The result of subtracting <paramref name="y"/> from <paramref name="x"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of <paramref name="x"/> and <paramref name="y"/> is less than or greater than the by <typeparamref name="T"/> valid <c>MinValue</c> and <c>MaxValue</c>.
            </exception>
        </member>
        <member name="M:Cuemon.AssignmentUtility.ValidAsNumericOperand``1">
            <summary>
            Validates if the specified <typeparamref name="T"/> is within the allowed range of numeric operands.
            </summary>
            <typeparam name="T">The type of the value for an operand operation.</typeparam>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="T"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="T:Cuemon.ByteUtility">
            <summary>
            This utility class is designed to make common <see cref="T:System.Byte"/> operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.ByteUtility.GetHashCode(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Computes a suitable hash code from the specified sequence of <paramref name="bytes"/>.
            </summary>
            <param name="bytes">A sequence of bytes.</param>
            <returns>A 32-bit signed integer that is the hash code of <paramref name="bytes"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ByteUtility.CombineByteArrays(System.Byte[][])">
            <summary>
            Combines a variable number of byte arrays into one byte array.
            </summary>
            <param name="bytes">The byte arrays to combine.</param>
            <returns>A variable number of <b>byte arrays</b> combined into one <b>byte array</b>.</returns>
        </member>
        <member name="M:Cuemon.ByteUtility.RemovePreamble(System.Byte[],System.Text.Encoding)">
            <summary>
            Removes the preamble information (if present) from the specified <see cref="T:System.Byte"/> array.
            </summary>
            <param name="input">The input <see cref="T:System.Byte"/> array to process.</param>
            <param name="encoding">The encoding to use when determining the preamble to remove.</param>
            <returns>A <see cref="T:System.Byte"/> array without preamble information.</returns>
        </member>
        <member name="M:Cuemon.ByteUtility.RemoveTrailingZeros(System.Byte[])">
            <summary>
            Removes trailing zero information (if any) from the specified <see cref="T:System.Byte"/> array.
            </summary>
            <param name="input">The input <see cref="T:System.Byte"/> array to process.</param>
            <returns>A <see cref="T:System.Byte"/> array without trailing zeros.</returns>
        </member>
        <member name="T:Cuemon.PreambleSequence">
            <summary>
            Specifies what action to take in regards to encoding preamble sequences.
            </summary>
        </member>
        <member name="F:Cuemon.PreambleSequence.Keep">
            <summary>
            Any encoding preamble sequences will be preserved.
            </summary>
        </member>
        <member name="F:Cuemon.PreambleSequence.Remove">
            <summary>
            Any encoding preamble sequences will be removed.
            </summary>
        </member>
        <member name="T:Cuemon.Caching.CacheCollection">
            <summary>
            Implements a cache for an application. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Get``1(System.String)">
            <summary>
            Retrieves the specified item from the <see cref="T:Cuemon.Caching.CacheCollection"/>.
            </summary>
            <typeparam name="T">The type of the item in the <see cref="T:Cuemon.Caching.CacheCollection"/>.</typeparam>
            <param name="key">The identifier of the cache item to retrieve.</param>
            <returns>The retrieved cache item, or the default value of the type parameter T if the key is not found.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Get``1(System.String,System.String)">
            <summary>
            Retrieves the specified item from the associated group of the <see cref="T:Cuemon.Caching.CacheCollection"/>.
            </summary>
            <typeparam name="T">The type of the item in the <see cref="T:Cuemon.Caching.CacheCollection"/>.</typeparam>
            <param name="key">The identifier of the cache item to retrieve.</param>
            <param name="group">The associated group of the cache item to retrieve.</param>
            <returns>The retrieved cache item, or the default value of the type parameter T if the key is not found.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.TryGetAdded(System.String,System.DateTime@)">
            <summary>
            Gets the UTC date time value from when this item was added to the <see cref="T:Cuemon.Caching.CacheCollection"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the UTC date time value from when this item, with the specified key, was added; otherwise, if no item could be resolved or the item has expired, <see cref="F:System.DateTime.MinValue"/>. This parameter is passed uninitialized.</param>
            <returns>
            <c>true</c> if the <paramref name="value"/> parameter contains an element with the specified key, and the element has not expired; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.TryGetAdded(System.String,System.String,System.DateTime@)">
            <summary>
            Gets the UTC date time value from when this item was added to the <see cref="T:Cuemon.Caching.CacheCollection"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="group">The group of the value to get.</param>
            <param name="value">When this method returns, contains the UTC date time value from when this item, with the specified key, was added; otherwise, if no item could be resolved or the item has expired, <see cref="F:System.DateTime.MinValue"/>. This parameter is passed uninitialized.</param>
            <returns>
            <c>true</c> if the <paramref name="value"/> parameter contains an element with the specified key, and the element has not expired; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is null.
            </exception>
            <remarks>
            This method will not throw an <see cref="T:System.ArgumentException"/> in case of an existing cache item whose key matches the key parameter.
            Instead the item is being ignored in order to favor thread safety. Do use ContainsKey as a workaround until I get a grip of the otherwise threading issues.
            </remarks>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Add(System.String,System.Object,System.String)">
            <summary>
            Adds the specified key and value to the dictionary associated with the specified group.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="group">The group to associate the element with.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is null.
            </exception>
            <remarks>
            This method will not throw an <see cref="T:System.ArgumentException"/> in case of an existing cache item whose key matches the key parameter.
            Instead the item is being ignored in order to favor thread safety. Do use ContainsKey as a workaround until I get a grip of the otherwise threading issues.
            </remarks>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Add(System.String,System.Object,System.DateTime)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="absoluteExpiration">The time at which the added object expires and is removed from the cache.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is null.
            </exception>
            <remarks>
            This method will not throw an <see cref="T:System.ArgumentException"/> in case of an existing cache item whose key matches the key parameter.
            Instead the item is being ignored in order to favor thread safety. Do use ContainsKey as a workaround until I get a grip of the otherwise threading issues.
            </remarks>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Add(System.String,System.Object,System.String,System.DateTime)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="group">The group to associate the element with.</param>
            <param name="absoluteExpiration">The time at which the added object expires and is removed from the cache.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is null.
            </exception>
            <remarks>
            This method will not throw an <see cref="T:System.ArgumentException"/> in case of an existing cache item whose key matches the key parameter.
            Instead the item is being ignored in order to favor thread safety. Do use ContainsKey as a workaround until I get a grip of the otherwise threading issues.
            </remarks>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="slidingExpiration">The interval between the time the added object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it is last accessed.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is null.
            </exception>
            <remarks>
            This method will not throw an <see cref="T:System.ArgumentException"/> in case of an existing cache item whose key matches the key parameter.
            Instead the item is being ignored in order to favor thread safety. Do use ContainsKey as a workaround until I get a grip of the otherwise threading issues.
            </remarks>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Add(System.String,System.Object,System.String,System.TimeSpan)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="group">The group to associate the element with.</param>
            <param name="slidingExpiration">The interval between the time the added object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is null.
            </exception>
            <remarks>
            This method will not throw an <see cref="T:System.ArgumentException"/> in case of an existing cache item whose key matches the key parameter.
            Instead the item is being ignored in order to favor thread safety. Do use ContainsKey as a workaround until I get a grip of the otherwise threading issues.
            </remarks>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Add(System.String,System.Object,Cuemon.Dependency[])">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="dependencies">Establishes <see cref="T:Cuemon.Dependency"/> relations to this element.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is null.
            </exception>
            <remarks>
            This method will not throw an <see cref="T:System.ArgumentException"/> in case of an existing cache item whose key matches the key parameter.
            Instead the item is being ignored in order to favor thread safety. Do use ContainsKey as a workaround until I get a grip of the otherwise threading issues.
            </remarks>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Add(System.String,System.Object,System.String,Cuemon.Dependency[])">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="group">The group to associate the element with.</param>
            <param name="dependencies">Establishes <see cref="T:Cuemon.Dependency"/> relations to this element.</param>
            <remarks>
            This method will not throw an <see cref="T:System.ArgumentException"/> in case of an existing cache item whose key matches the key parameter.
            Instead the item is being ignored in order to favor thread safety. Do use ContainsKey as a workaround until I get a grip of the otherwise threading issues.
            </remarks>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Collections.Generic.Dictionary`2"/> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.ContainsKey(System.String,System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="group">The associated group of the key to locate.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Collections.Generic.Dictionary`2"/> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Clear(System.String)">
            <summary>
            Removes all keys and values matching the specified group from the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Count(System.String)">
            <summary>
            Gets the number of elements contained in the specified group of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="group">The associated group to filter the count by.</param>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <value></value>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <typeparam name="T">The type of the item in the <see cref="T:Cuemon.Caching.CacheCollection"/>.</typeparam>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.Dictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.TryGetValue``1(System.String,System.String,``0@)">
            <summary>
            Gets the value associated with the specified key and group.
            </summary>
            <typeparam name="T">The type of the item in the <see cref="T:Cuemon.Caching.CacheCollection"/>.</typeparam>
            <param name="key">The key of the value to get.</param>
            <param name="group">The group of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.Dictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully found and removed; otherwise, false.  This method returns false if <paramref name="key"/> is not found in the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Remove(System.String,System.String)">
            <summary>
            Removes the value with the specified key from the associated specified group of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="group">The associated group to the key of the element to remove.</param>
            <returns>
            <c>true</c> if the element is successfully found and removed; otherwise, <c>false</c>.  This method returns <c>false</c> if <paramref name="key"/> combined with <paramref name="group"/>  is not found in the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.GetEnumerator">
            <summary>
            Retrieves an enumerator that iterates through the key settings and their values contained in the cache.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
            <remarks>All keys are hashed internally and will not provide useful information.</remarks>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``1(Cuemon.Doer{``0})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``1(Cuemon.Doer{``0},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``1(Cuemon.Doer{``0},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``1(Cuemon.Doer{``0},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``2(Cuemon.Doer{``0,``1})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``2(Cuemon.Doer{``0,``1},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``2(Cuemon.Doer{``0,``1},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``2(Cuemon.Doer{``0,``1},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``3(Cuemon.Doer{``0,``1,``2})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``3(Cuemon.Doer{``0,``1,``2},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``3(Cuemon.Doer{``0,``1,``2},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``3(Cuemon.Doer{``0,``1,``2},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``4(Cuemon.Doer{``0,``1,``2,``3})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``4(Cuemon.Doer{``0,``1,``2,``3},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``4(Cuemon.Doer{``0,``1,``2,``3},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``4(Cuemon.Doer{``0,``1,``2,``3},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``5(Cuemon.Doer{``0,``1,``2,``3,``4})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``5(Cuemon.Doer{``0,``1,``2,``3,``4},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``5(Cuemon.Doer{``0,``1,``2,``3,``4},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``5(Cuemon.Doer{``0,``1,``2,``3,``4},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``6(Cuemon.Doer{``0,``1,``2,``3,``4,``5})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``6(Cuemon.Doer{``0,``1,``2,``3,``4,``5},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``6(Cuemon.Doer{``0,``1,``2,``3,``4,``5},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``6(Cuemon.Doer{``0,``1,``2,``3,``4,``5},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``7(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``7(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``7(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``7(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``8(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``8(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``8(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``8(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``9(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``9(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``9(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``9(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``10(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``10(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``10(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``10(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``11(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``11(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.DateTime)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="absoluteExpiration">The time at which the memoized function delegate expires and is removed from the cache.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``11(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.TimeSpan)">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method" />.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="slidingExpiration">The interval between the time the memoized function delegate was last accessed and the time at which that memoization expires. If this value is the equivalent of 20 minutes, the memoization expires and is removed from the cache 20 minutes after it was last accessed.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheCollection.Memoize``11(Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Cuemon.Dependency[])">
            <summary>
            Memoizes the specified <paramref name="method"/> in the cache for fast access.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="method"/>.</typeparam>
            <param name="method">The function delegate that is invoked once and then stored in cache for fast access.</param>
            <param name="dependencies">Establishes one or more <see cref="T:Cuemon.Dependency"/> relations to this memoized function delegate.</param>
            <returns>A memoized function delegate that is otherwise equivalent to <paramref name="method"/>.</returns>
        </member>
        <member name="P:Cuemon.Caching.CacheCollection.Item(System.String)">
            <summary>
            Gets the cached item with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Cuemon.Caching.CacheCollection.Item(System.String,System.String)">
            <summary>
            Gets the cached item from the specified group with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Cuemon.Caching.Cache">
            <summary>
            An internal representation of a Cache object.
            </summary>
        </member>
        <member name="M:Cuemon.Caching.Cache.#ctor(System.String,System.Object,System.String,System.Collections.Generic.IEnumerable{Cuemon.Dependency},System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.Cache"/> class.
            </summary>
            <param name="key">The identifier of this <see cref="T:Cuemon.Caching.Cache"/>.</param>
            <param name="value">The cached value of this <see cref="T:Cuemon.Caching.Cache"/>.</param>
            <param name="group">The group to associate and organize this <see cref="T:Cuemon.Caching.Cache"/> by.</param>
            <param name="dependencies">A sequence of <see cref="T:Cuemon.Dependency"/> objects for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains a null reference (Nothing in Visual Basic).</param>
            <param name="absoluteExpiration">The absolute expiration date time value of this <see cref="T:Cuemon.Caching.Cache"/>.</param>
            <param name="slidingExpiration">The sliding expiration value of this <see cref="T:Cuemon.Caching.Cache"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.Cache.HasExpired(System.DateTime)">
            <summary>
            Determines whether the specified time resolves this <see cref="T:Cuemon.Caching.Cache"/> as expired.
            </summary>
            <param name="time">The date and time to evaluate against.</param>
            <returns>
            	<c>true</c> if the specified time resolves this <see cref="T:Cuemon.Caching.Cache"/> as expired; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.Caching.Cache.Refresh">
            <summary>
            Refreshes the UTC date time value from when this <see cref="T:Cuemon.Caching.Cache"/> was created.
            </summary>
        </member>
        <member name="M:Cuemon.Caching.Cache.OnExpiredRaised(Cuemon.Caching.CacheEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Caching.Cache.Expired"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.Caching.CacheEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Cuemon.Caching.Cache.Expired">
            <summary>
            Occurs when a <see cref="T:Cuemon.Caching.Cache"/> object with a <see cref="T:Cuemon.Dependency"/> has expired.
            </summary>
        </member>
        <member name="P:Cuemon.Caching.Cache.Key">
            <summary>
            Gets the identifier of this <see cref="T:Cuemon.Caching.Cache"/>.
            </summary>
            <value>The identifier of this <see cref="T:Cuemon.Caching.Cache"/>.</value>
        </member>
        <member name="P:Cuemon.Caching.Cache.Value">
            <summary>
            Gets the value of this <see cref="T:Cuemon.Caching.Cache"/>.
            </summary>
            <value>The value of this <see cref="T:Cuemon.Caching.Cache"/>.</value>
        </member>
        <member name="P:Cuemon.Caching.Cache.Group">
            <summary>
            Gets the group to associate and organize this <see cref="T:Cuemon.Caching.Cache"/> by.
            </summary>
            <value>The group to associate and organize this <see cref="T:Cuemon.Caching.Cache"/> by.</value>
        </member>
        <member name="P:Cuemon.Caching.Cache.AbsoluteExpiration">
            <summary>
            Gets the UTC absolute expiration date time value of this <see cref="T:Cuemon.Caching.Cache"/>.
            </summary>
            <value>The UTC absolute expiration date time value of this <see cref="T:Cuemon.Caching.Cache"/>.</value>
        </member>
        <member name="P:Cuemon.Caching.Cache.Created">
            <summary>
            Gets the UTC date time value from when this <see cref="T:Cuemon.Caching.Cache"/> was created.
            </summary>
            <value>The UTC date time value from when this <see cref="T:Cuemon.Caching.Cache"/> was created.</value>
        </member>
        <member name="P:Cuemon.Caching.Cache.LastAccessed">
            <summary>
            Gets the UTC date time value from when this <see cref="T:Cuemon.Caching.Cache"/> was last accessed.
            </summary>
            <value>The UTC date time value from when this <see cref="T:Cuemon.Caching.Cache"/> was last accessed.</value>
        </member>
        <member name="P:Cuemon.Caching.Cache.SlidingExpiration">
            <summary>
            Gets the sliding expiration value of this <see cref="T:Cuemon.Caching.Cache"/>.
            </summary>
            <value>The sliding expiration value of this <see cref="T:Cuemon.Caching.Cache"/>.</value>
        </member>
        <member name="P:Cuemon.Caching.Cache.UseAbsoluteExpiration">
            <summary>
            Gets a value indicating whether this <see cref="T:Cuemon.Caching.Cache"/> should use the AbsoluteExpiration property for the caching logic.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Cuemon.Caching.Cache"/> should use the AbsoluteExpiration property for the caching logic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cuemon.Caching.Cache.UseSlidingExpiration">
            <summary>
            Gets a value indicating whether this <see cref="T:Cuemon.Caching.Cache"/> should use the SlidingExpiration property for the caching logic.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Cuemon.Caching.Cache"/> should use the SlidingExpiration property for the caching logic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cuemon.Caching.Cache.UseDependency">
            <summary>
            Gets a value indicating whether this <see cref="T:Cuemon.Caching.Cache"/> is relying on a <see cref="T:Cuemon.Dependency"/> object.
            </summary>
            <value><c>true</c> if this <see cref="T:Cuemon.Caching.Cache"/> is relying on a <see cref="T:Cuemon.Dependency"/> object; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Caching.Cache.CanExpire">
            <summary>
            Gets a value indicating whether this <see cref="T:Cuemon.Caching.Cache"/> can expire.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Cuemon.Caching.Cache"/> can expire; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cuemon.Caching.CacheEventArgs">
            <summary>
            Provides data for cache related operations. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:Cuemon.Caching.ChecksumStrength">
            <summary>
            Specifies the validation strength of a cache checksum.
            </summary>
        </member>
        <member name="F:Cuemon.Caching.ChecksumStrength.None">
            <summary>
            Indicates that no checksum was specified.
            </summary>
        </member>
        <member name="F:Cuemon.Caching.ChecksumStrength.Weak">
            <summary>
            Indicates that a weak, semantic equivalent checksum was specified.
            </summary>
        </member>
        <member name="F:Cuemon.Caching.ChecksumStrength.Strong">
            <summary>
            Indicates that a strong, byte-for-byte checksum was specified.
            </summary>
        </member>
        <member name="T:Cuemon.Caching.ChecksumMethod">
            <summary>
            Specifies ways for the checksum to be computed.
            </summary>
        </member>
        <member name="F:Cuemon.Caching.ChecksumMethod.Default">
            <summary>
            Indicates default behavior which is leaving the checksum unaltered.
            </summary>
        </member>
        <member name="F:Cuemon.Caching.ChecksumMethod.Combined">
            <summary>
            Indicates that a checksum is combined from all given input and hence always will be available.
            </summary>
        </member>
        <member name="T:Cuemon.Caching.CacheValidator">
            <summary>
            Provides a way to represent cacheable data-centric content that can be validated by cache-aware applications.
            </summary>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.Double"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Double,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.Double"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.Int16"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Int16,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.Int16"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.String"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.String,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.String"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.Int32"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Int32,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.Int32"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.Int64"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Int64,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.Int64"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.Single"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Single,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.Single"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.UInt16"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.UInt16,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.UInt16"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.UInt32"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.UInt32,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.UInt32"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.UInt64"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.UInt64,Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">A <see cref="T:System.UInt64"/> value containing a byte-for-byte checksum of the data this instance represents.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">An array of bytes containing a checksum of the data this instance represents.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.#ctor(System.DateTime,System.DateTime,System.Byte[],Cuemon.Caching.ChecksumMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Caching.CacheValidator"/> class.
            </summary>
            <param name="created">A <see cref="T:System.DateTime"/> value for when data this instance represents was first created.</param>
            <param name="modified">A <see cref="T:System.DateTime"/> value for when data this instance represents was last modified.</param>
            <param name="checksum">An array of bytes containing a checksum of the data this instance represents.</param>
            <param name="method">One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that specifies the result of <see cref="P:Cuemon.Caching.CacheValidator.Checksum"/>.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.ToString">
            <summary>
            Returns a computed checksum that represents the <see cref="P:Cuemon.Caching.CacheValidator.Bytes"/> of this instance.
            </summary>
            <returns>A computed checksum that represents the <see cref="P:Cuemon.Caching.CacheValidator.Bytes"/> of this instance.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.Caching.CacheValidator"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.Caching.CacheValidator"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.GetMostSignificant">
            <summary>
            Gets the most significant (largest) value of either <see cref="P:Cuemon.Caching.CacheValidator.Created"/> or <see cref="P:Cuemon.Caching.CacheValidator.Modified"/>.
            </summary>
            <returns>The most significant (largest) value of either <see cref="P:Cuemon.Caching.CacheValidator.Created"/> or <see cref="P:Cuemon.Caching.CacheValidator.Modified"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.CombineWith(System.Double[])">
            <summary>
            Combines the <paramref name="additionalChecksum"/> to the representation of this instance.
            </summary>
            <param name="additionalChecksum">A <see cref="T:System.Double"/> array that contains zero or more checksums of the additional data this instance must represent.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.CombineWith(System.Int16[])">
            <summary>
            Combines the <paramref name="additionalChecksum"/> to the representation of this instance.
            </summary>
            <param name="additionalChecksum">An <see cref="T:System.Int16"/> array that contains zero or more checksums of the additional data this instance must represent.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.CombineWith(System.String[])">
            <summary>
            Combines the <paramref name="additionalChecksum"/> to the representation of this instance.
            </summary>
            <param name="additionalChecksum">A <see cref="T:System.String"/> array that contains zero or more checksums of the additional data this instance must represent.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.CombineWith(System.Int32[])">
            <summary>
            Combines the <paramref name="additionalChecksum"/> to the representation of this instance.
            </summary>
            <param name="additionalChecksum">An <see cref="T:System.Int32"/> array that contains zero or more checksums of the additional data this instance must represent.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.CombineWith(System.Int64[])">
            <summary>
            Combines the <paramref name="additionalChecksum"/> to the representation of this instance.
            </summary>
            <param name="additionalChecksum">An <see cref="T:System.Int64"/> array that contains zero or more checksums of the additional data this instance must represent.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.CombineWith(System.Single[])">
            <summary>
            Combines the <paramref name="additionalChecksum"/> to the representation of this instance.
            </summary>
            <param name="additionalChecksum">A <see cref="T:System.Single"/> array that contains zero or more checksums of the additional data this instance must represent.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.CombineWith(System.UInt16[])">
            <summary>
            Combines the <paramref name="additionalChecksum"/> to the representation of this instance.
            </summary>
            <param name="additionalChecksum">An <see cref="T:System.UInt16"/> array that contains zero or more checksums of the additional data this instance must represent.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.CombineWith(System.UInt32[])">
            <summary>
            Combines the <paramref name="additionalChecksum"/> to the representation of this instance.
            </summary>
            <param name="additionalChecksum">An <see cref="T:System.UInt32"/> array that contains zero or more checksums of the additional data this instance must represent.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.CombineWith(System.UInt64[])">
            <summary>
            Combines the <paramref name="additionalChecksum"/> to the representation of this instance.
            </summary>
            <param name="additionalChecksum">An <see cref="T:System.UInt64"/> array that contains zero or more checksums of the additional data this instance must represent.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.CombineWith(System.Byte[])">
            <summary>
            Combines the <paramref name="additionalChecksum"/> to the representation of this instance.
            </summary>
            <param name="additionalChecksum">An array of bytes containing a checksum of the additional data this instance must represent.</param>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.GetMostSignificant(Cuemon.Caching.CacheValidator[])">
            <summary>
            Gets the most significant <see cref="T:Cuemon.Caching.CacheValidator"/> object from the most significant (largest) value of either <see cref="P:Cuemon.Caching.CacheValidator.Created"/> or <see cref="P:Cuemon.Caching.CacheValidator.Modified"/> in the specified <paramref name="sequence"/>.
            </summary>
            <param name="sequence">A sequence of  <see cref="T:Cuemon.Caching.CacheValidator"/> objects to parse for the most significant (largest) value of either <see cref="P:Cuemon.Caching.CacheValidator.Created"/> or <see cref="P:Cuemon.Caching.CacheValidator.Modified"/>.</param>
            <returns>The most significant <see cref="T:Cuemon.Caching.CacheValidator"/> object from the specified <paramref name="sequence"/>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Caching.CacheValidator.Equals(Cuemon.Caching.CacheValidator)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>. </returns>
        </member>
        <member name="P:Cuemon.Caching.CacheValidator.Assembly">
            <summary>
            Gets or sets the <see cref="T:System.Reflection.Assembly"/> that will serve as the ideal candidate for a <see cref="T:Cuemon.Caching.CacheValidator"/> reference point. Default is <see cref="N:Cuemon"/>.
            </summary>
            <value>The assembly to use as a <see cref="T:Cuemon.Caching.CacheValidator"/> reference point.</value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="P:Cuemon.Caching.CacheValidator.Created">
            <summary>
            Gets a <see cref="T:System.DateTime"/> value from when data this instance represents was first created, expressed as the Coordinated Universal Time (UTC).
            </summary>
            <value>A <see cref="T:System.DateTime"/> value from when data this instance represents was first created, expressed as the Coordinated Universal Time (UTC).</value>
        </member>
        <member name="P:Cuemon.Caching.CacheValidator.Modified">
            <summary>
            Gets a <see cref="T:System.DateTime"/> value from when data this instance represents was last modified, expressed as the Coordinated Universal Time (UTC).
            </summary>
            <value>A <see cref="T:System.DateTime"/> value from when data this instance represents was last modified, expressed as the Coordinated Universal Time (UTC).</value>
        </member>
        <member name="P:Cuemon.Caching.CacheValidator.Checksum">
            <summary>
            Gets a <see cref="T:System.String"/> containing a computed hash value (<see cref="P:Cuemon.Caching.CacheValidator.AlgorithmType"/>) of the data this instance represents.
            </summary>
            <value>A <see cref="T:System.String"/> containing a computed hash value  (<see cref="P:Cuemon.Caching.CacheValidator.AlgorithmType"/>) of the data this instance represents.</value>
        </member>
        <member name="P:Cuemon.Caching.CacheValidator.Default">
            <summary>
            Gets a <see cref="T:Cuemon.Caching.CacheValidator"/> object that is initialized to a default representation that should be considered invalid for usage beyond this check.
            </summary>
            <value>A <see cref="T:Cuemon.Caching.CacheValidator"/> object that is initialized to a default representation.</value>
        </member>
        <member name="P:Cuemon.Caching.CacheValidator.ReferencePoint">
            <summary>
            Gets a <see cref="T:Cuemon.Caching.CacheValidator"/> object that represents an <see cref="T:System.Reflection.Assembly"/> reference point.
            </summary>
            <value>A <see cref="T:Cuemon.Caching.CacheValidator"/> object that represents an <see cref="T:System.Reflection.Assembly"/> reference point.</value>
        </member>
        <member name="P:Cuemon.Caching.CacheValidator.Bytes">
            <summary>
            Gets a byte array that is the result of the associated <see cref="T:Cuemon.Caching.CacheValidator"/>.
            </summary>
            <value>The byte array that is the result of the associated <see cref="T:Cuemon.Caching.CacheValidator"/>.</value>
        </member>
        <member name="P:Cuemon.Caching.CacheValidator.AlgorithmType">
            <summary>
            Gets or sets the hash algorithm to use for the checksum computation. Default is <see cref="F:Cuemon.Security.Cryptography.HashAlgorithmType.MD5"/>.
            </summary>
            <value>The hash algorithm to use for the checksum computation.</value>
        </member>
        <member name="P:Cuemon.Caching.CacheValidator.Method">
            <summary>
            Gets an enumeration value of <see cref="T:Cuemon.Caching.ChecksumMethod"/> indicating the usage method of this instance.
            </summary>
            <value>One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumMethod"/> that indicates the usage method of this instance.</value>
        </member>
        <member name="P:Cuemon.Caching.CacheValidator.Strength">
            <summary>
            Gets an enumeration value of <see cref="T:Cuemon.Caching.ChecksumStrength"/> indicating the strength of this instance.
            </summary>
            <value>One of the enumeration values of <see cref="T:Cuemon.Caching.ChecksumStrength"/> that specifies the strength of this instance.</value>
        </member>
        <member name="T:Cuemon.Collections.Generic.ListUtility">
            <summary>
            This utility class provides a set of static methods for supporting the <see cref="T:Cuemon.Collections.Generic.EnumerableUtility"/>. 
            </summary>
        </member>
        <member name="M:Cuemon.Collections.Generic.ListUtility.HasIndex``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether the <paramref name="elements"/> of the <see cref="T:System.Collections.Generic.IList`1"/> is within the range of the <paramref name="index"/>.
            </summary>
            <typeparam name="TSource">The type of elements in the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="index">The index to find.</param>
            <param name="elements">The elements of the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns><c>true</c> if the specified <paramref name="index"/> is within the range of the <paramref name="elements"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.ListUtility.Next``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the next element of <paramref name="elements"/> relative to <paramref name="index"/>, or the last element of <paramref name="elements"/> if <paramref name="index"/> is equal or greater than <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </summary>
            <typeparam name="TSource">The type of elements in the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="index">The index of which to advance to the next element from.</param>
            <param name="elements">The elements, relative to <paramref name="index"/>, to return the next element of.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <returns>default(TSource) if <paramref name="index"/> is equal or greater than <see cref="P:System.Collections.Generic.ICollection`1.Count"/>; otherwise the next element of <paramref name="elements"/> relative to <paramref name="index"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.ListUtility.Previous``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Returns the previous element of <paramref name="elements"/> relative to <paramref name="index"/>, or the first or last element of <paramref name="elements"/> if <paramref name="index"/> is equal, greater or lower than <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.
            </summary>
            <typeparam name="TSource">The type of elements in the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="index">The index of which to advance to the previous element from.</param>
            <param name="elements">The elements, relative to <paramref name="index"/>, to return the previous element of.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            </exception>
            <returns>default(TSource) if <paramref name="index"/> is equal, greater or lower than <see cref="P:System.Collections.Generic.ICollection`1.Count"/>; otherwise the previous element of <paramref name="elements"/> relative to <paramref name="index"/>.</returns>
        </member>
        <member name="T:Cuemon.Collections.Generic.DictionaryUtility">
            <summary>
            This utility class provides a set of static methods for supporting the <see cref="T:Cuemon.Collections.Generic.EnumerableUtility"/>. 
            </summary>
        </member>
        <member name="M:Cuemon.Collections.Generic.DictionaryUtility.FirstOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
            Returns the first <see cref="T:System.Collections.Generic.KeyValuePair`2"/> matching one of the specified <paramref name="keys"/> in a <see cref="T:System.Collections.Generic.IDictionary`2"/>, or a default value if the <see cref="T:System.Collections.Generic.Dictionary`2"/> contains no elements or no match was found.
            </summary>
            <typeparam name="TKey">The <see cref="T:System.Type"/> of the key.</typeparam>
            <typeparam name="TValue">The <see cref="T:System.Type"/> of the value.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to return a matching <see cref="T:System.Collections.Generic.KeyValuePair`2"/> from.</param>
            <param name="keys">A variable number of keys to match in the specified <paramref name="source"/>.</param>
            <returns>default(KeyValuePair{TKey,TValue) if source is empty or no match was found; otherwise, the matching element in <paramref name="source"/>.</returns>
            <remarks>The default value for reference and nullable types is null.</remarks>
        </member>
        <member name="T:Cuemon.Collections.Generic.IReadOnlyCollection`1">
            <summary>
            Represents a read-only generic collection.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:Cuemon.Collections.Generic.IReadOnlyCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.IReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Cuemon.Collections.Generic.IReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="P:Cuemon.Collections.Generic.IReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/>.
            </returns>
        </member>
        <member name="P:Cuemon.Collections.Generic.IReadOnlyCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2">
            <summary>
            Represents a read-only generic collection of key/value pairs.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Cuemon.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/> contains the specified key.
            </summary>
            <returns>
            true if the <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/>.</param>
        </member>
        <member name="M:Cuemon.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="P:Cuemon.Collections.Generic.IReadOnlyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> containing the keys of the <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> containing the keys of the object that implements <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Cuemon.Collections.Generic.IReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> containing the values in the <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> containing the values in the object that implements <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Cuemon.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <returns>
            The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new element with the specified key.
            </returns>
            <param name="key">The key of the value to get or set.</param>
        </member>
        <member name="T:Cuemon.Collections.Generic.ReadOnlyCollection`1">
            <summary>
            Represents a read-only generic collection.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> class.
            </summary>
            <param name="sequence">The sequence to wrap.</param>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> class.
            </summary>
            <param name="list">The list to wrap.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="P:Cuemon.Collections.Generic.ReadOnlyCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2">
            <summary>
            Represents a read-only generic collection of key/value pairs.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/>.</param>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="sequence">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sequence"/> is null -or- <paramref name="comparer"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.ReadOnlyDictionary`2.Cuemon#Collections#Generic#IReadOnlyCollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IndexOf(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines the index of a specific item in the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/>.</param>
        </member>
        <member name="P:Cuemon.Collections.Generic.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> containing the keys of the <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> containing the keys of the object that implements <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Cuemon.Collections.Generic.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> containing the values in the <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/> containing the values in the object that implements <see cref="T:Cuemon.Collections.Generic.ReadOnlyDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Cuemon.Collections.Generic.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"/>.
            </returns>
        </member>
        <member name="P:Cuemon.Collections.Generic.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"></see> is read-only.
            </summary>
            <returns>true if the <see cref="T:Cuemon.Collections.Generic.ReadOnlyCollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Cuemon.Collections.Generic.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>
            The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new element with the specified key.
            </returns>
        </member>
        <member name="T:Cuemon.ComponentModel.MethodEnteredEventArgs">
            <summary>
            Provides data for the <see cref="E:Cuemon.ComponentModel.INotifyMethodEntered.MethodEntered"/> event.
            </summary>
        </member>
        <member name="T:Cuemon.IData">
            <summary>
            Provides a way to supply information about the class implementing this interface.
            </summary>
        </member>
        <member name="P:Cuemon.IData.Data">
            <summary>
            Gets a collection of key/value pairs that provide defined information about this class.
            </summary>
            <value>An object that implements the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface and contains a collection of key/value pairs.</value>
        </member>
        <member name="M:Cuemon.ComponentModel.MethodEnteredEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ComponentModel.MethodEnteredEventArgs"/> class.
            </summary>
            <param name="methodName">The name of the method being invoked.</param>
        </member>
        <member name="F:Cuemon.ComponentModel.MethodEnteredEventArgs.Empty">
            <summary>
            Represents an <see cref="T:Cuemon.ComponentModel.MethodEnteredEventArgs"/> event with no event data.
            </summary>
        </member>
        <member name="P:Cuemon.ComponentModel.MethodEnteredEventArgs.MethodName">
            <summary>
            Gets the name of the method being invoked.
            </summary>
            <value>The name of the method being invoked.</value>
        </member>
        <member name="P:Cuemon.ComponentModel.MethodEnteredEventArgs.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about the member.
            </summary>
        </member>
        <member name="T:Cuemon.ComponentModel.INotifyMethodEntered">
            <summary>
            Notifies clients that a method is being invoked.
            </summary>
        </member>
        <member name="E:Cuemon.ComponentModel.INotifyMethodEntered.MethodEntered">
            <summary>
            Occurs when a method is being invoked.
            </summary>
        </member>
        <member name="T:Cuemon.ComponentModel.INotifyMethodExited">
            <summary>
            Notifies clients that a method has been invoked.
            </summary>
        </member>
        <member name="E:Cuemon.ComponentModel.INotifyMethodExited.MethodExited">
            <summary>
            Occurs when a method has been invoked.
            </summary>
        </member>
        <member name="T:Cuemon.ComponentModel.MethodExitedEventArgs">
            <summary>
            Provides data for the <see cref="E:Cuemon.ComponentModel.INotifyMethodExited.MethodExited"/> event.
            </summary>
        </member>
        <member name="M:Cuemon.ComponentModel.MethodExitedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ComponentModel.MethodExitedEventArgs"/> class.
            </summary>
            <param name="methodName">The name of the method that was invoked.</param>
        </member>
        <member name="F:Cuemon.ComponentModel.MethodExitedEventArgs.Empty">
            <summary>
            Represents an <see cref="T:Cuemon.ComponentModel.MethodExitedEventArgs"/> event with no event data.
            </summary>
        </member>
        <member name="P:Cuemon.ComponentModel.MethodExitedEventArgs.MethodName">
            <summary>
            Gets the name of the method that was invoked.
            </summary>
            <value>The name of the method that was invoked.</value>
        </member>
        <member name="P:Cuemon.ComponentModel.MethodExitedEventArgs.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about the member.
            </summary>
        </member>
        <member name="T:Cuemon.ConvertUtility">
            <summary>
            This utility class is designed to make convert operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToGuid(System.String)">
            <summary>
            Converts the specified <paramref name="value"/> of a GUID to its equivalent <see cref="T:System.Guid"/> structure.
            </summary>
            <param name="value">The GUID to be converted.</param>
            <returns>A <see cref="T:System.Guid"/> that is equivalent to <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.FormatException">
            The specified <paramref name="value"/> was not recognized to be a GUID.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToTimeSpan(System.String,Cuemon.TimeUnit)">
            <summary>
            Converts the specified <paramref name="value"/> to its equivalent <see cref="T:System.TimeSpan"/> representation.
            </summary>
            <param name="value">The string to be converted.</param>
            <param name="timeUnit">One of the enumeration values that specifies the outcome of the conversion.</param>
            <returns>A <see cref="T:System.TimeSpan"/> that corresponds to <paramref name="value"/> from <paramref name="timeUnit"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The <paramref name="value"/> paired with <paramref name="timeUnit"/> is outside its valid range.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeUnit"/> was outside its valid range.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToTimeSpan(System.Double,Cuemon.TimeUnit)">
            <summary>
            Converts the specified <paramref name="value"/> to its equivalent <see cref="T:System.TimeSpan"/> representation.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="timeUnit">One of the enumeration values that specifies the outcome of the conversion.</param>
            <returns>A <see cref="T:System.TimeSpan"/> that corresponds to <paramref name="value"/> from <paramref name="timeUnit"/>.</returns>
            <exception cref="T:System.OverflowException">
            The <paramref name="value"/> paired with <paramref name="timeUnit"/> is outside its valid range.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeUnit"/> was outside its valid range.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToHexString(System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to its equivalent hexadecimal representation.
            </summary>
            <param name="value">The string to be converted.</param>
            <returns>A hexadecimal <see cref="T:System.String"/> representation of the characters in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToHexString(System.String,Cuemon.PreambleSequence)">
            <summary>
            Converts the specified <paramref name="value"/> to its equivalent hexadecimal representation.
            </summary>
            <param name="value">The string to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <returns>A hexadecimal <see cref="T:System.String"/> representation of the characters in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToHexString(System.String,Cuemon.PreambleSequence,System.Text.Encoding)">
            <summary>
            Converts the specified <paramref name="value"/> to its equivalent hexadecimal representation.
            </summary>
            <param name="value">The string to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="encoding">The preferred encoding to apply to the result.</param>
            <returns>A hexadecimal <see cref="T:System.String"/> representation of the characters in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="encoding"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToHexString(System.Byte[])">
            <summary>
            Converts the specified <paramref name="value"/> to its equivalent hexadecimal representation.
            </summary>
            <param name="value">The byte array to be converted.</param>
            <returns>A hexadecimal <see cref="T:System.String"/> representation of the elements in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.FromHexString(System.String)">
            <summary>
            Converts the specified hexadecimal <paramref name="value"/> to its equivalent <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">The hexadecimal string to be converted.</param>
            <returns>A <see cref="T:System.String"/> representation of the hexadecimal characters in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.FromHexString(System.String,Cuemon.PreambleSequence)">
            <summary>
            Converts the specified hexadecimal <paramref name="value"/> to its equivalent <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">The hexadecimal string to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <returns>A <see cref="T:System.String"/> representation of the hexadecimal characters in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.FromHexString(System.String,Cuemon.PreambleSequence,System.Text.Encoding)">
            <summary>
            Converts the specified hexadecimal <paramref name="value"/> to its equivalent <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">The hexadecimal string to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="encoding">The preferred encoding to apply to the result.</param>
            <returns>A <see cref="T:System.String"/> representation of the hexadecimal characters in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null - or - <paramref name="encoding"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToWebHeaderCollection(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts the specified <paramref name="source"/> to its equivalent <see cref="T:System.Net.WebHeaderCollection"/> sequence.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Collections.Specialized.NameValueCollection"/> values to convert into a <see cref="T:System.Net.WebHeaderCollection"/> equivalent.</param>
            <returns>A <see cref="T:System.Net.WebHeaderCollection"/> equivalent of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToStream(System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to a <see cref="T:System.IO.Stream"/> using UTF-16 for the encoding preserving any preamble sequences.
            </summary>
            <param name="value">The string to be converted.</param>
            <returns>A <b><see cref="T:System.IO.Stream"/></b> object.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToStream(System.String,Cuemon.PreambleSequence)">
            <summary>
            Converts specified <paramref name="value"/> to a <see cref="T:System.IO.Stream"/> using UTF-16 for the encoding.
            </summary>
            <param name="value">The string to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <returns>A <b><see cref="T:System.IO.Stream"/></b> object.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToStream(System.String,Cuemon.PreambleSequence,System.Text.Encoding)">
            <summary>
            Converts the specified <paramref name="value"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="value">The string to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="encoding">The preferred encoding to apply to the result.</param>
            <returns>A <b><see cref="T:System.IO.Stream"/></b> object.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToStream(System.Byte[])">
            <summary>
            Converts the specified <paramref name="value"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="value">The byte array to be converted.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString``1(Cuemon.Doer{``0,System.String},``0)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents <paramref name="source"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The object to convert to a string representation.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation.</param>
            <returns>A <see cref="T:System.String"/> that represents <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString``2(Cuemon.Doer{``0,``1,System.String},``0,``1)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents <paramref name="source"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">The object to convert to a string representation.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation.</param>
            <param name="arg">The parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> that represents <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString``3(Cuemon.Doer{``0,``1,``2,System.String},``0,``1,``2)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents <paramref name="source"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">The object to convert to a string representation.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> that represents <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString``4(Cuemon.Doer{``0,``1,``2,``3,System.String},``0,``1,``2,``3)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents <paramref name="source"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">The object to convert to a string representation.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> that represents <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString``5(Cuemon.Doer{``0,``1,``2,``3,``4,System.String},``0,``1,``2,``3,``4)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents <paramref name="source"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">The object to convert to a string representation.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> that represents <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString``6(Cuemon.Doer{``0,``1,``2,``3,``4,``5,System.String},``0,``1,``2,``3,``4,``5)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents <paramref name="source"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">The object to convert to a string representation.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> that represents <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.Byte[])">
            <summary>
            Converts the specified <paramref name="value"/> to a string. If an encoding sequence is not included, the operating system's current ANSI encoding is assumed when doing the conversion.
            </summary>
            <param name="value">The byte array to be converted.</param>
            <returns>A <see cref="T:System.String"/> containing the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.Byte[],Cuemon.PreambleSequence)">
            <summary>
            Converts the specified <paramref name="value"/> to a string. If an encoding sequence is not included, the operating system's current ANSI encoding is assumed when doing the conversion.
            </summary>
            <param name="value">The byte array to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <returns>A <see cref="T:System.String"/> containing the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.Byte[],Cuemon.PreambleSequence,System.Text.Encoding)">
            <summary>
            Converts the specified <paramref name="value"/> to a string using the provided preferred encoding.
            </summary>
            <param name="value">The byte array to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="encoding">The preferred encoding to apply to the result.</param>
            <returns>A <see cref="T:System.String"/> containing the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.IO.Stream)">
            <summary>
            Converts the specified <paramref name="value"/> to a string. If an encoding sequence is not included, the operating system's current ANSI encoding is assumed when doing the conversion, preserving any preamble sequences.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> to be converted.</param>
            <returns>A <see cref="T:System.String"/> containing the decoded result of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.IO.Stream,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to a string. If an encoding sequence is not included, the operating system's current ANSI encoding is assumed when doing the conversion, preserving any preamble sequences.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> to be converted.</param>
            <param name="leaveStreamOpen">if <c>true</c>, the <see cref="T:System.IO.Stream"/> object is being left open; otherwise it is being closed and disposed.</param>
            <returns>A <see cref="T:System.String"/> containing the decoded result of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.IO.Stream,Cuemon.PreambleSequence)">
            <summary>
            Converts the specified <paramref name="value"/> to a string. If an encoding sequence is not included, the operating system's current ANSI encoding is assumed when doing the conversion.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <returns>A <see cref="T:System.String"/> containing the decoded result of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.IO.Stream,Cuemon.PreambleSequence,System.Text.Encoding)">
            <summary>
            Converts the specified <paramref name="value"/> to a string using the provided preferred encoding.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="encoding">The preferred encoding to apply to the result.</param>
            <returns>A <see cref="T:System.String"/> containing the decoded result of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.IO.Stream,Cuemon.PreambleSequence,System.Text.Encoding,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to a string using the provided preferred encoding.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="encoding">The preferred encoding to apply to the result.</param>
            <param name="leaveStreamOpen">if <c>true</c>, the <see cref="T:System.IO.Stream"/> object is being left open; otherwise it is being closed and disposed.</param>
            <returns>A <see cref="T:System.String"/> containing the decoded result of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.Exception)">
            <summary>
            Renders the <paramref name="exception"/> to a human readable <see cref="T:System.String"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to render human readable.</param>
            <returns>A human readable <see cref="T:System.String"/> variant of the specified <paramref name="exception"/>.</returns>
            <remarks>The rendered <paramref name="exception"/> defaults to using an instance of <see cref="T:System.Text.UnicodeEncoding"/> unless specified otherwise.</remarks>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.Exception,System.Text.Encoding)">
            <summary>
            Renders the <paramref name="exception"/> to a human readable <see cref="T:System.String"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to render human readable.</param>
            <param name="encoding">The encoding to use when rendering the <paramref name="exception"/>.</param>
            <returns>A human readable <see cref="T:System.String"/> variant of the specified <paramref name="exception"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToString(System.Exception,System.Text.Encoding,System.Boolean)">
            <summary>
            Renders the <paramref name="exception"/> to a human readable <see cref="T:System.String"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> to render human readable.</param>
            <param name="encoding">The encoding to use when rendering the <paramref name="exception"/>.</param>
            <param name="includeStackTrace">if set to <c>true</c> the stack trace of the exception is included in the rendered result.</param>
            <returns>A human readable <see cref="T:System.String"/> variant of the specified <paramref name="exception"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToPascalCasing(System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to a pascal-case representation, using culture-independent casing rules.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to convert.</param>
            <returns>A pascal-case representation of the specified <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToPascalCasing(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified <paramref name="value"/> to a pascal-case representation, using the casing rules of the specified culture.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to support.</param>
            <returns>A pascal-case representation of the specified <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToCamelCasing(System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to a camel-case representation, using culture-independent casing rules.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to convert.</param>
            <returns>A camel-case representation of the specified <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToCamelCasing(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified <paramref name="value"/> to a camel-case representation, using the casing rules of the specified culture.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to support.</param>
            <returns>A camel-case representation of the specified <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToMorseCode(System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to an international Morse code representation.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to convert.</param>
            <returns>An international Morse code representation of the specified <see cref="T:System.String"/> value.</returns>
            <remarks>Any characters not supported by the international Morse code specifications is excluded from the result.</remarks>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToMorseCode(System.String,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to an international Morse code representation.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to convert.</param>
            <param name="includeUnsupportedCharacters">if set to <c>true</c> characters not supported by the internal Morse code is left intact in the result for a general impression.</param>
            <returns>An international Morse code representation of the specified <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the specified <paramref name="source"/> to a string of comma delimited values.
            </summary>
            <typeparam name="T">The type of the <paramref name="source"/> to convert.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <returns>A <see cref="T:System.String"/> of comma delimited values.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <param name="source">A sequence of elements to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String,Cuemon.Doer{``0,System.String})">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <param name="source">A sequence of elements to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``2(System.Collections.Generic.IEnumerable{``0},System.String,Cuemon.Doer{``0,``1,System.String},``1)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <param name="arg">The parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``3(System.Collections.Generic.IEnumerable{``0},System.String,Cuemon.Doer{``0,``1,``2,System.String},``1,``2)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``4(System.Collections.Generic.IEnumerable{``0},System.String,Cuemon.Doer{``0,``1,``2,``3,System.String},``1,``2,``3)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``5(System.Collections.Generic.IEnumerable{``0},System.String,Cuemon.Doer{``0,``1,``2,``3,``4,System.String},``1,``2,``3,``4)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``6(System.Collections.Generic.IEnumerable{``0},System.String,Cuemon.Doer{``0,``1,``2,``3,``4,``5,System.String},``1,``2,``3,``4,``5)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <param name="source">A sequence of elements to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="format">The desired format of the converted values.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,Cuemon.Doer{``0,System.String})">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <param name="source">A sequence of elements to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="format">The desired format of the converted values.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``2(System.Collections.Generic.IEnumerable{``0},System.String,System.String,Cuemon.Doer{``0,``1,System.String},``1)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="format">The desired format of the converted values.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <param name="arg">The parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``3(System.Collections.Generic.IEnumerable{``0},System.String,System.String,Cuemon.Doer{``0,``1,``2,System.String},``1,``2)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="format">The desired format of the converted values.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``4(System.Collections.Generic.IEnumerable{``0},System.String,System.String,Cuemon.Doer{``0,``1,``2,``3,System.String},``1,``2,``3)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="format">The desired format of the converted values.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``5(System.Collections.Generic.IEnumerable{``0},System.String,System.String,Cuemon.Doer{``0,``1,``2,``3,``4,System.String},``1,``2,``3,``4)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="format">The desired format of the converted values.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDelimitedString``6(System.Collections.Generic.IEnumerable{``0},System.String,System.String,Cuemon.Doer{``0,``1,``2,``3,``4,``5,System.String},``1,``2,``3,``4,``5)">
            <summary>
            Converts the specified <paramref name="source"/> to a string of <paramref name="delimiter"/> delimited values.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence to convert.</typeparam>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="converter"/>.</typeparam>
            <param name="source">A collection of values to be converted.</param>
            <param name="delimiter">The delimiter specification.</param>
            <param name="format">The desired format of the converted values.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a string representation once per iteration.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="converter"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="converter"/>.</param>
            <returns>A <see cref="T:System.String"/> of delimited values from the by parameter specified delimiter.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToEnumerable(System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to its equivalent <see cref="T:System.String"/> sequence.
            </summary>
            <param name="value">The value to convert into a sequence.</param>
            <returns>A <see cref="T:System.String"/> sequence equivalent to the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToEnumerable``1(``0)">
            <summary>
            Converts the specified <paramref name="source"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence with one element.
            </summary>
            <typeparam name="TSource">The type of the element of <paramref name="source"/>.</typeparam>
            <param name="source">The value to convert into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence with <paramref name="source"/> as the only element.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToArray``1(``0[])">
            <summary>
            Converts the specified <paramref name="values"/> to a one-dimensional array of the specified type, with zero-based indexing.
            </summary>
            <typeparam name="TSource">The type of the array of <paramref name="values"/>.</typeparam>
            <param name="values">The values to create the <see cref="T:System.Array"/> from.</param>
            <returns>A one-dimensional <see cref="T:System.Array"/> of the specified <see typeparamref="TSource"/> with a variable length equal to the values specified.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the specified <paramref name="source"/> to a one-dimensional array of the specified type, with zero-based indexing.
            </summary>
            <typeparam name="TSource">The type of the <see cref="T:System.Array"/> to return.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create the <see cref="T:System.Array"/> from.</param>
            <returns>A one-dimensional <see cref="T:System.Array"/> of the specified <see typeparam="TSource"/> with a variable length equal to the values specified.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToByteArray``1(``0)">
            <summary>
            Converts the specified <paramref name="convertible"/> to an array of bytes.
            </summary>
            <param name="convertible">The <see cref="T:System.IConvertible"/> value to convert.</param>
            <returns>An array of bytes equivalent to the data of the <paramref name="convertible"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="convertible"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Boolean"/>, <see cref="T:System.Char"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> and <see cref="T:System.UInt64"/>.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToByteArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the specified sequence of <paramref name="convertibles"/> to an array of bytes.
            </summary>
            <param name="convertibles">A sequence of <see cref="T:System.IConvertible"/> values to convert.</param>
            <returns>An array of bytes equivalent to the sequence of the <paramref name="convertibles"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="convertibles"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Boolean"/>, <see cref="T:System.Char"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> and <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="convertibles"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToByteArray(System.String)">
            <summary>
            Converts the specified <paramref name="value"/> to a byte array using UTF-16 for the encoding preserving any preamble sequences.
            </summary>
            <param name="value">The string to be converted.</param>
            <returns>A <b>byte array</b> containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToByteArray(System.String,Cuemon.PreambleSequence)">
            <summary>
            Converts the specified <paramref name="value"/> to a byte array using UTF-16 for the encoding.
            </summary>
            <param name="value">The string to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <returns>A <b>byte array</b> containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToByteArray(System.String,Cuemon.PreambleSequence,System.Text.Encoding)">
            <summary>
            Converts the specified <paramref name="value"/> to a byte array using the provided preferred encoding.
            </summary>
            <param name="value">The string to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="encoding">The preferred encoding to apply to the result.</param>
            <returns>A <b>byte array</b> containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToByteArray(System.IO.Stream)">
            <summary>
            Converts the specified <paramref name="value"/> to a byte array always starting from position 0 (when supported).
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> value to be converted.</param>
            <returns>A <b>byte array</b> containing the data from the stream.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToByteArray(System.IO.Stream,System.Boolean)">
            <summary>
            Converts the specified <paramref name="value"/> to a byte array.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> value to be converted.</param>
            <param name="leaveStreamOpen">if <c>true</c>, the <see cref="T:System.IO.Stream"/> object is being left open; otherwise it is being closed and disposed.</param>
            <returns>A <b>byte array</b> containing the data from the stream.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToCharArray(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to an equivalent sequence of characters using UTF-16 for the encoding and preserving any preamble sequences.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to be converted.</param>
            <returns>A sequence of characters equivalent to the <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToCharArray(System.String,Cuemon.PreambleSequence)">
            <summary>
            Converts the given <see cref="T:System.String"/> to an equivalent sequence of characters using UTF-16 for the encoding.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <returns>A sequence of characters equivalent to the <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToCharArray(System.String,Cuemon.PreambleSequence,System.Text.Encoding)">
            <summary>
            Converts the given <see cref="T:System.String"/> to an equivalent sequence of characters.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="encoding">The preferred encoding to apply to the result.</param>
            <returns>A sequence of characters equivalent to the <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToCharArray(System.IO.Stream)">
            <summary>
            Converts the given <see cref="T:System.IO.Stream"/> to a char array starting from position 0 (when supported), using UTF-16 for the encoding preserving any preamble sequences.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> value to be converted.</param>
            <returns>A sequence of characters equivalent to the <see cref="T:System.IO.Stream"/> value.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToCharArray(System.IO.Stream,Cuemon.PreambleSequence)">
            <summary>
            Converts the given <see cref="T:System.IO.Stream"/> to a char array starting from position 0 (when supported), using UTF-16 for the encoding.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> value to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <returns>A sequence of characters equivalent to the <see cref="T:System.IO.Stream"/> value.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToCharArray(System.IO.Stream,Cuemon.PreambleSequence,System.Text.Encoding)">
            <summary>
            Converts the given <see cref="T:System.IO.Stream"/> to a char array starting from position 0 (when supported).
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> value to be converted.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="encoding">The preferred encoding to apply to the result.</param>
            <returns>A sequence of characters equivalent to the <see cref="T:System.IO.Stream"/> value.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToKeyValuePairs``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts the specified <paramref name="source"/> to its <see cref="T:System.Collections.Generic.KeyValuePair`2"/> equivalent sequence.
            </summary>
            <typeparam name="TKey">The <see cref="T:System.Type"/> of the key in the resulting <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</typeparam>
            <typeparam name="TValue">The <see cref="T:System.Type"/> of the value in the resulting <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IDictionary`2"/> to convert into a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> equivalent sequence.</param>
            <returns>A <see cref="T:System.Collections.Generic.KeyValuePair`2"/> equivalent sequence of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Converts the specified <paramref name="source"/> to its <see cref="T:System.Collections.Generic.IDictionary`2"/> equivalent.
            </summary>
            <typeparam name="TKey">The <see cref="T:System.Type"/> of the key in the resulting <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The <see cref="T:System.Type"/> of the value in the resulting <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="source">A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> values to convert into a <see cref="T:System.Collections.Generic.IDictionary`2"/> equivalent.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> equivalent of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts the specified <paramref name="source"/> to its <see cref="T:System.Collections.Generic.IDictionary`2"/> equivalent.
            </summary>
            <typeparam name="TKey">The <see cref="T:System.Type"/> of the key in the resulting <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The <see cref="T:System.Type"/> of the value in the resulting <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="source">A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> values to convert into a <see cref="T:System.Collections.Generic.IDictionary`2"/> equivalent.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> equivalent of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ConvertUtility.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            <param name="value">The object to convert the underlying type.</param>
            <param name="conversionType">The <see cref="T:System.Type"/> of object to return.</param>
            <returns>An object whose type is <paramref name="conversionType"/> and whose value is equivalent to <paramref name="value"/>.</returns>
            <remarks>What differs from the <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)"/> is, that this converter supports generics and enums somewhat automated.</remarks>
        </member>
        <member name="M:Cuemon.ConvertUtility.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Returns an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            <param name="value">The object to convert the underlying type.</param>
            <param name="conversionType">The <see cref="T:System.Type"/> of object to return.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>An object whose type is <paramref name="conversionType"/> and whose value is equivalent to <paramref name="value"/>.</returns>
            <remarks>What differs from the <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)"/> is, that this converter supports generics and enums somewhat automated.</remarks>
        </member>
        <member name="M:Cuemon.ConvertUtility.ChangeType(System.String)">
            <summary>
            Returns a primitive object whose value is equivalent to the specified <paramref name="value"/>.
            </summary>
            <param name="value">The string to convert the underlying type.</param>
            <returns>An object whose type is primitive (either <see cref="T:System.Boolean"/>, <see cref="T:System.Int64"/> or <see cref="T:System.Double"/>) and whose value is equivalent to <paramref name="value"/>. If conversion is unsuccessful, the original <paramref name="value"/> is returned.</returns>
        </member>
        <member name="M:Cuemon.ConvertUtility.ChangeType(System.String,System.IFormatProvider)">
            <summary>
            Returns a primitive object whose value is equivalent to the specified <paramref name="value"/>.
            </summary>
            <param name="value">The string to convert the underlying type.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>An object whose type is primitive (either <see cref="T:System.Boolean"/>, <see cref="T:System.Int64"/> or <see cref="T:System.Double"/>) and whose value is equivalent to <paramref name="value"/>. If conversion is unsuccessful, the original <paramref name="value"/> is returned.</returns>
        </member>
        <member name="T:Cuemon.ArgumentEmptyException">
            <summary>
            The exception that is thrown when an empty <see cref="T:System.String"/> is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:Cuemon.ArgumentEmptyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ArgumentEmptyException"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.ArgumentEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ArgumentEmptyException"/> class.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Cuemon.ArgumentEmptyException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ArgumentEmptyException"/> class.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.ArgumentEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ArgumentEmptyException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Cuemon.ArgumentEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ArgumentEmptyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Cuemon.Collections.Generic.EnumerableSizeComparer`1">
            <summary>
            Provides <see cref="T:System.Collections.Generic.IEnumerable`1"/> size comparison.
            </summary>
            <typeparam name="T">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> type to compare.</typeparam>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableSizeComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y, as explained here: Less than zero - x is less than y. Zero - x equals y. Greater than zero - x is greater than y.
            </returns>
        </member>
        <member name="P:Cuemon.Collections.Generic.EnumerableSizeComparer`1.Default">
            <summary>
            Returns a default comparer for the type specified by the generic argument.
            </summary>
        </member>
        <member name="T:Cuemon.AssignmentOperator">
            <summary>
            Defines the most common assignment operators for numeric operands.
            </summary>
            <remarks>
            For more information please refer to this Wikibooks article: http://en.wikibooks.org/wiki/C_Sharp_Programming/Operators.
            </remarks>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Assign">
            <summary>
            An assignment operation, such as (x = y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Addition">
            <summary>
            An addition compound assignment operation, such as (x += y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Subtraction">
            <summary>
            A subtraction compound assignment operation, such as (x -= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Multiplication">
            <summary>
            A multiplication compound assignment operation, such as (x *= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Division">
            <summary>
            An division compound assignment operation, such as (x /= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Remainder">
            <summary>
            An arithmetic remainder compound assignment operation, such as (x %= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.And">
            <summary>
            A bitwise or logical AND compound assignment operation, such as (x &amp;= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.Or">
            <summary>
            A bitwise or logical OR compound assignment, such as (x |= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.ExclusiveOr">
            <summary>
            A bitwise or logical XOR compound assignment operation, such as (x ^= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.LeftShift">
            <summary>
            A bitwise left-shift compound assignment, such as (x &lt;&lt;= y).
            </summary>
        </member>
        <member name="F:Cuemon.AssignmentOperator.RightShift">
            <summary>
            A bitwise left-shift compound assignment, such as (x glt;glt;= y).
            </summary>
        </member>
        <member name="T:Cuemon.Diagnostics.FactoryInstrumentation">
            <summary>
            A factory implementation of the <see cref="T:Cuemon.Diagnostics.Instrumentation"/> class that favors diagnostics, monitoring and measuring performance through <see cref="T:Cuemon.Act"/> and <see cref="T:Cuemon.Doer`1"/> overloads.
            </summary>
        </member>
        <member name="T:Cuemon.Diagnostics.Instrumentation">
            <summary>
            An abstract class for diagnostics, monitoring and measuring performance.
            </summary>
        </member>
        <member name="T:Cuemon.Diagnostics.IInstrumentation">
            <summary>
            Provides a way for diagnostics, monitoring and measuring performance.
            </summary>
        </member>
        <member name="T:Cuemon.Diagnostics.IMethodPerformanceTiming">
            <summary>
            Notifies and provides timing data for clients when a method has been invoked.
            </summary>
        </member>
        <member name="T:Cuemon.Diagnostics.IPropertyPerformanceTiming">
            <summary>
            Notifies and provides timing data for clients when a property has been invoked.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.Instrumentation"/> class where both <see cref="P:Cuemon.Diagnostics.Instrumentation.EnableMethodPerformanceTiming"/> and <see cref="P:Cuemon.Diagnostics.Instrumentation.EnablePropertyPerformanceTiming"/> is enabled.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.Instrumentation"/> class.
            </summary>
            <param name="enableMethodPerformanceTiming"><c>true</c> to enable method performance timing; otherwise <c>false</c>.</param>
            <param name="enablePropertyPerformanceTiming"><c>true</c> to enable property performance timing; otherwise <c>false</c>.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.GetCurrentProcessSnapshot">
            <summary>
            Creates and returns a snapshot of the most important information for the current process where this instance resides.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(System.Reflection.MethodBase)">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodEntered"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature)">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodEntered"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(System.Reflection.MethodBase,System.Nullable{System.Guid})">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodEntered"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="threadSafeId">Either a reference to a <see cref="T:System.Guid"/> used for thread safe time measuring or null for normal usage.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature,System.Nullable{System.Guid})">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodEntered"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="threadSafeId">Either a reference to a <see cref="T:System.Guid"/> used for thread safe time measuring or null for normal usage.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(System.Reflection.MethodBase,System.Guid,System.Object[])">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="threadSafeIdReference">A reference to the earlier generated unique id by <see cref="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature)"/> used for thread safe time measuring.</param>
            <param name="parameters">A variable number of objects that provide parameter values of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(Cuemon.Reflection.MethodSignature,System.Guid,System.Object[])">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="threadSafeIdReference">A reference to the earlier generated unique id by <see cref="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature)"/> used for thread safe time measuring.</param>
            <param name="parameters">A variable number of objects that provide parameter values of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(System.Reflection.MethodBase,System.Guid,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="threadSafeIdReference">A reference to the earlier generated unique id by <see cref="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature)"/> used for thread safe time measuring.</param>
            <param name="parameters">A sequence of key/value pairs that provide parameter names and values of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(Cuemon.Reflection.MethodSignature,System.Guid,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="threadSafeIdReference">A reference to the earlier generated unique id by <see cref="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature)"/> used for thread safe time measuring.</param>
            <param name="parameters">A sequence of key/value pairs that provide parameter names and values of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(System.Reflection.MethodBase,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="parameters">A sequence of key/value pairs that provide parameter names and values of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(Cuemon.Reflection.MethodSignature,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="parameters">A sequence of key/value pairs that provide parameter names and values of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(System.Reflection.MethodBase,System.Object[])">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="parameters">A variable number of objects that provide parameter values of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(Cuemon.Reflection.MethodSignature,System.Object[])">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="parameters">A variable number of objects that provide parameter values of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(System.Reflection.MethodBase,System.Nullable{System.Guid},System.Object[])">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="threadSafeIdReference">Either a reference to the earlier generated unique id by <see cref="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature)"/> used for thread safe time measuring or null for normal usage.</param>
            <param name="parameters">A variable number of objects that provide parameters information of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(Cuemon.Reflection.MethodSignature,System.Nullable{System.Guid},System.Object[])">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="threadSafeIdReference">Either a reference to the earlier generated unique id by <see cref="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature)"/> used for thread safe time measuring or null for normal usage.</param>
            <param name="parameters">A variable number of objects that provide parameters information of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(System.Reflection.MethodBase,System.Nullable{System.Guid},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="threadSafeIdReference">Either a reference to the earlier generated unique id by <see cref="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature)"/> used for thread safe time measuring or null for normal usage.</param>
            <param name="parameters">A sequence of key/value pairs that provide additional user-defined information of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnMethodExited(Cuemon.Reflection.MethodSignature,System.Nullable{System.Guid},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.MethodExited"/> event.
            </summary>
            <param name="method">The method being invoked.</param>
            <param name="threadSafeIdReference">Either a reference to the earlier generated unique id by <see cref="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature)"/> used for thread safe time measuring or null for normal usage.</param>
            <param name="parameters">A sequence of key/value pairs that provide additional user-defined information of the method being invoked.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnPropertyChanging(System.Reflection.MethodBase)">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.PropertyChanging"/> event.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnPropertyChanging(Cuemon.Reflection.MethodSignature)">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.PropertyChanging"/> event.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnPropertyChanged(System.Reflection.MethodBase)">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.PropertyChanged"/> event.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.OnPropertyChanged(Cuemon.Reflection.MethodSignature)">
            <summary>
            Raises the <see cref="E:Cuemon.Diagnostics.Instrumentation.PropertyChanged"/> event.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Diagnostics.Instrumentation.TimeMeasureCompletedHandling(System.String,System.TimeSpan,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This method handles the subscription on <see cref="E:Cuemon.Diagnostics.TimeMeasure.TimeMeasureCompleted"/> issued by <see cref="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(Cuemon.Reflection.MethodSignature)"/>.
            </summary>
            <param name="memberName">The name of the member that was invoked.</param>
            <param name="elapsed">The total elapsed time measured on the member that was invoked.</param>
            <param name="data">A collection of key/value pairs that provide additional user-defined information about the member invoked.</param>
            <remarks>
            Override this method to change the default behavior (which currently is <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)"/>) of time measured data.<br/>
            Method is only invoked if the following is true:<br/>
            - OnMethodEntered paired with OnMethodExited or OnPropertyChanging paired with OnPropertyChanged methods was invoked<br/>
            - <see cref="P:Cuemon.Diagnostics.Instrumentation.EnableMethodPerformanceTiming"/> and/or <see cref="P:Cuemon.Diagnostics.Instrumentation.EnablePropertyPerformanceTiming"/> is set to <c>true</c><br/>
            - <see cref="P:Cuemon.Diagnostics.Instrumentation.TimeMeasureThreshold"/> must be set to either <see cref="F:System.TimeSpan.Zero"/> or the elapsed time measuring is larger than <see cref="P:Cuemon.Diagnostics.Instrumentation.TimeMeasureThreshold"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="memberName"/> is null or <br/>
            <paramref name="data"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="memberName"/> is empty.
            </exception>
        </member>
        <member name="E:Cuemon.Diagnostics.Instrumentation.PropertyChanged">
            <summary>
            Occurs when a property value changes and marks the end of a timing.
            </summary>
        </member>
        <member name="E:Cuemon.Diagnostics.Instrumentation.PropertyChanging">
            <summary>
            Occurs when a property value is changing and marks the beginning om timing.
            </summary>
        </member>
        <member name="E:Cuemon.Diagnostics.Instrumentation.MethodEntered">
            <summary>
            Occurs when a method is being invoked and marks the beginning of timing.
            </summary>
        </member>
        <member name="E:Cuemon.Diagnostics.Instrumentation.MethodExited">
            <summary>
            Occurs when a method has been invoked and marks the end of a timing.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.Instrumentation.TimeMeasureThreshold">
            <summary>
            Gets or sets a time measuring threshold before <see cref="M:Cuemon.Diagnostics.Instrumentation.TimeMeasureCompletedHandling(System.Object,Cuemon.Diagnostics.TimeMeasureCompletedEventArgs)"/> is invoked. Default is <see cref="F:System.TimeSpan.Zero"/>, which is equivalent to no threshold.
            </summary>
            <value>
            The time measuring threshold before <see cref="M:Cuemon.Diagnostics.Instrumentation.TimeMeasureCompletedHandling(System.Object,Cuemon.Diagnostics.TimeMeasureCompletedEventArgs)"/> is invoked.
            </value>
        </member>
        <member name="P:Cuemon.Diagnostics.Instrumentation.EnableMethodPerformanceTiming">
            <summary>
            Gets or sets a value indicating whether performance timing of method calls is enabled.
            </summary>
            <value>
              <c>true</c> if performance timing of method calls is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cuemon.Diagnostics.Instrumentation.EnablePropertyPerformanceTiming">
            <summary>
            Gets or sets a value indicating whether performance timing of property calls is enabled.
            </summary>
            <value>
              <c>true</c> if performance timing of property calls is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cuemon.Diagnostics.TimeMeasureUtility">
            <summary>
            This utility class is designed to make stand-alone time measuring operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasureUtility.Measure(Cuemon.Act)">
            <summary>
            Time measure the specified method.
            </summary>
            <param name="method">The method to time measure.</param>
            <returns>A <see cref="T:System.TimeSpan"/> holding the elapsed execution time of <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasureUtility.Measure``1(Cuemon.Act{``0},``0)">
            <summary>
            Time measure the specified method.
            </summary>
            <typeparam name="T">The type of the parameter of the method.</typeparam>
            <param name="method">The method to time measure.</param>
            <param name="arg">The parameter of the method that this delegate encapsulates.</param>
            <returns>A <see cref="T:System.TimeSpan"/> holding the elapsed execution time of <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasureUtility.Measure``2(Cuemon.Act{``0,``1},``0,``1)">
            <summary>
            Time measure the specified method.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <param name="method">The method to time measure.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <returns>A <see cref="T:System.TimeSpan"/> holding the elapsed execution time of <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasureUtility.Measure``3(Cuemon.Act{``0,``1,``2},``0,``1,``2)">
            <summary>
            Time measure the specified method.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <param name="method">The method to time measure.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <returns>A <see cref="T:System.TimeSpan"/> holding the elapsed execution time of <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasureUtility.Measure``4(Cuemon.Act{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Time measure the specified method.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method.</typeparam>
            <param name="method">The method to time measure.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <returns>A <see cref="T:System.TimeSpan"/> holding the elapsed execution time of <paramref name="method"/>.</returns>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasureUtility.Measure``5(Cuemon.Act{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Time measure the specified method.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method.</typeparam>
            <param name="method">The method to time measure.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <returns>A <see cref="T:System.TimeSpan"/> holding the elapsed execution time of <paramref name="method"/>.</returns>
        </member>
        <member name="T:Cuemon.EventArgs`1">
            <summary>
            Provides generic data for an event.
            </summary>
            <typeparam name="T1">The type of the first parameter of the event data.</typeparam>
        </member>
        <member name="M:Cuemon.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.EventArgs`1"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of the event data.</param>
        </member>
        <member name="P:Cuemon.EventArgs`1.Arg1">
            <summary>
            Gets the first parameter of the event data.
            </summary>
            <value>The first parameter of the event data.</value>
        </member>
        <member name="T:Cuemon.EventArgs`2">
            <summary>
            Provides generic data for an event.
            </summary>
            <typeparam name="T1">The type of the first parameter of the event data.</typeparam>
            <typeparam name="T2">The type of the second parameter of the event data.</typeparam>
        </member>
        <member name="M:Cuemon.EventArgs`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.EventArgs`2"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of the event data.</param>
            <param name="arg2">The value of the second parameter of the event data.</param>
        </member>
        <member name="P:Cuemon.EventArgs`2.Arg2">
            <summary>
            Gets the second parameter of the event data.
            </summary>
            <value>The second parameter of the event data.</value>
        </member>
        <member name="T:Cuemon.EventArgs`3">
            <summary>
            Provides generic data for an event.
            </summary>
            <typeparam name="T1">The type of the first parameter of the event data.</typeparam>
            <typeparam name="T2">The type of the second parameter of the event data.</typeparam>
            <typeparam name="T3">The type of the third parameter of the event data.</typeparam>
        </member>
        <member name="M:Cuemon.EventArgs`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.EventArgs`3"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of the event data.</param>
            <param name="arg2">The value of the second parameter of the event data.</param>
            <param name="arg3">The value of the third parameter of the event data.</param>
        </member>
        <member name="P:Cuemon.EventArgs`3.Arg3">
            <summary>
            Gets the third parameter of the event data.
            </summary>
            <value>The third parameter of the event data.</value>
        </member>
        <member name="T:Cuemon.EventArgs`4">
            <summary>
            Provides generic data for an event.
            </summary>
            <typeparam name="T1">The type of the first parameter of the event data.</typeparam>
            <typeparam name="T2">The type of the second parameter of the event data.</typeparam>
            <typeparam name="T3">The type of the third parameter of the event data.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the event data.</typeparam>
        </member>
        <member name="M:Cuemon.EventArgs`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.EventArgs`4"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of the event data.</param>
            <param name="arg2">The value of the second parameter of the event data.</param>
            <param name="arg3">The value of the third parameter of the event data.</param>
            <param name="arg4">The value of the fourth parameter of the event data.</param>
        </member>
        <member name="P:Cuemon.EventArgs`4.Arg4">
            <summary>
            Gets the fourth parameter of the event data.
            </summary>
            <value>The fourth parameter of the event data.</value>
        </member>
        <member name="T:Cuemon.EventArgs`5">
            <summary>
            Provides generic data for an event.
            </summary>
            <typeparam name="T1">The type of the first parameter of the event data.</typeparam>
            <typeparam name="T2">The type of the second parameter of the event data.</typeparam>
            <typeparam name="T3">The type of the third parameter of the event data.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the event data.</typeparam>
            <typeparam name="T5">The type of the fith parameter of the event data.</typeparam>
        </member>
        <member name="M:Cuemon.EventArgs`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.EventArgs`5"/> class.
            </summary>
            <param name="arg1">The value of the first parameter of the event data.</param>
            <param name="arg2">The value of the second parameter of the event data.</param>
            <param name="arg3">The value of the third parameter of the event data.</param>
            <param name="arg4">The value of the fourth parameter of the event data.</param>
            <param name="arg5">The value of the fith parameter of the event data.</param>
        </member>
        <member name="P:Cuemon.EventArgs`5.Arg5">
            <summary>
            Gets the fith parameter of the event data.
            </summary>
            <value>The fith parameter of the event data.</value>
        </member>
        <member name="T:Cuemon.DelegateUtility">
            <summary>
            This utility class is designed to make common delegate operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.DelegateUtility.Wrap``1(``0)">
            <summary>
            Provides an easy and reflection less way to get a value from a property that is delegate compatible (such as <see cref="T:Cuemon.Doer`1"/> and the likes thereof).
            </summary>
            <typeparam name="TResult">The type of the return value of <paramref name="output"/>.</typeparam>
            <param name="output">The return value of a member to be routed as output through this Wrap{TResult} method.</param>
            <returns>The value from <paramref name="output"/>.</returns>
        </member>
        <member name="T:Cuemon.StructUtility">
            <summary>
            This utility class is designed to make common struct related operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.StructUtility.GetHashCode32``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes a suitable hash code from the specified sequence of <paramref name="convertibles"/>.
            </summary>
            <param name="convertibles">A sequence of structs implementing the <see cref="T:System.IConvertible"/> interface.</param>
            <returns>A 32-bit signed integer that is the hash code of <paramref name="convertibles"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="convertibles"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.StructUtility.GetHashCode64``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes a suitable hash code from the specified sequence of <paramref name="convertibles"/>.
            </summary>
            <param name="convertibles">A sequence of structs implementing the <see cref="T:System.IConvertible"/> interface.</param>
            <returns>A 64-bit signed integer that is the hash code of <paramref name="convertibles"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="convertibles"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.TesterDoer`3">
            <summary>
            Encapsulates a method that has one parameter and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this delegate encapsulates.</typeparam>
            <param name="arg">The parameter of the method that this delegate encapsulates.</param>
            <param name="result">The result of the method that this delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterDoer`4">
            <summary>
            Encapsulates a method that has two parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="result">The result of the method that this delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterDoer`5">
            <summary>
            Encapsulates a method that has three parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="result">The result of the method that this delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterDoer`6">
            <summary>
            Encapsulates a method that has four parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="result">The result of the method that this delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.TesterDoer`7">
            <summary>
            Encapsulates a method that has five parameters and returns a value that indicates success of the type specified by the <typeparamref name="TSuccess" /> parameter and returns a out result value of the type specified by the <typeparamref name="TResult" /> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the out result value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TSuccess">The type of the return value that indicates success of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="result">The result of the method that this delegate encapsulates.</param>
            <returns>The return value that indicates success of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Cuemon.GuidFormats">
            <summary>
            Specifies allowed GUID formats in parsing related methods.
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.NumberFormat">
            <summary>
            Specified the number format (N) which consist of 32 digits, eg. 12345678123412341234123456789abc.
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.DigitFormat">
            <summary>
            Specified the digit format (D) which consist of 32 digits separated by hyphens, eg. 12345678-1234-1234-1234-123456789abc.
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.BraceFormat">
            <summary>
            Specified the brace format (B) which consist of 32 digits separated by hyphens, enclosed in brackets, eg. {12345678-1234-1234-1234-123456789abc}.
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.ParenthesisFormat">
            <summary>
            Specified the brace format (P) which consist of 32 digits separated by hyphens, enclosed in parentheses, eg. (12345678-1234-1234-1234-123456789abc).
            </summary>
        </member>
        <member name="F:Cuemon.GuidFormats.Any">
            <summary>
            Specified any of the supported GUID formats (N,D,B,P).
            </summary>
        </member>
        <member name="T:Cuemon.GuidUtility">
            <summary>
            This utility class is designed to make some <see cref="T:System.Guid"/> operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.GuidUtility.TryParse(System.String,System.Guid@)">
            <summary>
            Converts the string representation of a GUID to its equivalent <see cref="T:System.Guid"/> structure.
            </summary>
            <param name="value">The GUID to convert.</param>
            <param name="result">The structure that will contain the parsed value.</param>
            <returns><c>true</c> if the parse operation was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            This method returns <c>false</c> if <paramref name="value"/> is <c>null</c> or not in a recognized format, and does not throw an exception.<br/>
            Default implementation for this overload evaluates only on <see cref="F:Cuemon.GuidFormats.DigitFormat"/> | <see cref="F:Cuemon.GuidFormats.BraceFormat"/> | <see cref="F:Cuemon.GuidFormats.ParenthesisFormat"/>, eg. 32 digits separated by hyphens; 32 digits separated by hyphens, enclosed in brackets and 32 digits separated by hyphens, enclosed in parentheses.<br/>
            The reason not to include <see cref="F:Cuemon.GuidFormats.NumberFormat"/>, eg. 32 digits is the possible unintended GUID result of a <see cref="F:Cuemon.Security.Cryptography.HashAlgorithmType.MD5"/> string representation.
            </remarks>
        </member>
        <member name="M:Cuemon.GuidUtility.TryParse(System.String,Cuemon.GuidFormats,System.Guid@)">
            <summary>
            Converts the string representation of a GUID to its equivalent <see cref="T:System.Guid"/> structure.
            </summary>
            <param name="value">The GUID to convert.</param>
            <param name="format">A bitmask comprised of one or more <see cref="T:Cuemon.GuidFormats"/> that specify how the GUID parsing is conducted.</param>
            <param name="result">The structure that will contain the parsed value.</param>
            <returns><c>true</c> if the parse operation was successful; otherwise, <c>false</c>.</returns>
            <remarks>
            This method returns <c>false</c> if <paramref name="value"/> is <c>null</c> or not in a recognized format, and does not throw an exception.<br/>
            Only 32 digits (<see cref="F:Cuemon.GuidFormats.NumberFormat"/>); 32 digits separated by hyphens (<see cref="F:Cuemon.GuidFormats.DigitFormat"/>); 32 digits separated by hyphens, enclosed in brackets (<see cref="F:Cuemon.GuidFormats.BraceFormat"/>) and 32 digits separated by hyphens, enclosed in parentheses (<see cref="F:Cuemon.GuidFormats.ParenthesisFormat"/>) is supported.<br/>
            For more information refer to this page @ StackOverflow: http://stackoverflow.com/questions/968175/what-is-the-string-length-of-a-guid
            </remarks>
        </member>
        <member name="T:Cuemon.IO.FileMapping">
            <summary>
            Represents the mapping information that is needed to associate a given file extension with a content-type and vice-versa.
            </summary>
        </member>
        <member name="M:Cuemon.IO.FileMapping.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.FileMapping"/> class.
            </summary>
            <param name="contentType">The content-type to associate with file <paramref name="extensions"/>.</param>
            <param name="extensions">A sequence of file extensions matching the specified <paramref name="contentType"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="contentType"/> is null - or  <paramref name="extensions"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="contentType"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="contentType"/> has zero or more than one forward slash (/).
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="extensions"/> was not specified.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="extensions"/> has at least one invalid entry.
            </exception>
        </member>
        <member name="P:Cuemon.IO.FileMapping.Extensions">
            <summary>
            Gets the file extensions of this instance.
            </summary>
            <value>The file extensions of this instance.</value>
        </member>
        <member name="P:Cuemon.IO.FileMapping.ContentType">
            <summary>
            Gets the content-type of this instance.
            </summary>
            <value>The content-type of this instance.</value>
        </member>
        <member name="T:Cuemon.SortOrder">
            <summary>
            Specifies the direction of a sort operation.
            </summary>
        </member>
        <member name="F:Cuemon.SortOrder.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:Cuemon.SortOrder.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.ISortedDoerWorkItemPool`2">
            <summary>
            Defines a way to guide a thread pool to execute work items.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.IDoerWorkItemPool`1">
            <summary>
            Defines a way to guide a thread pool to execute work items.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.IActWorkItemPool">
            <summary>
            Defines a way to guide a thread pool to execute work items.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.IActWorkItemPool.ProcessWork(Cuemon.Threading.IActWorkItem)">
            <summary>
            The work to be processed one thread at a time.
            </summary>
            <param name="work">The work item to execute one thread at a time.</param>
        </member>
        <member name="P:Cuemon.Threading.IActWorkItemPool.Exceptions">
            <summary>
            Gets a read-only collection of an <see cref="T:System.Exception"/> that caused one or more of the <see cref="T:Cuemon.Threading.IActWorkItem"/> to end prematurely. If all of the <see cref="T:Cuemon.Threading.IActWorkItem"/> completed successfully, this will be an empty read-only collection.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.IDoerWorkItemPool`1.ProcessWork(Cuemon.Threading.IDoerWorkItem{`0})">
            <summary>
            The work to be processed one thread at a time.
            </summary>
            <param name="work">The work item to execute one thread at a time.</param>
        </member>
        <member name="P:Cuemon.Threading.IDoerWorkItemPool`1.Result">
            <summary>
            Gets the result of the work items processed by <see cref="M:Cuemon.Threading.IDoerWorkItemPool`1.ProcessWork(Cuemon.Threading.IDoerWorkItem{`0})"/>.
            </summary>
            <value>
            The result of the work items processed by <see cref="M:Cuemon.Threading.IDoerWorkItemPool`1.ProcessWork(Cuemon.Threading.IDoerWorkItem{`0})"/>.
            </value>
        </member>
        <member name="M:Cuemon.Threading.ISortedDoerWorkItemPool`2.ProcessWork(Cuemon.Threading.ISortedDoerWorkItem{`0,`1})">
            <summary>
            The work to be processed one thread at a time.
            </summary>
            <param name="work">The work item to execute one thread at a time.</param>
        </member>
        <member name="T:Cuemon.Threading.DoerWorkItem`1">
            <summary>
            An abstract class providing a way for outsourcing thread intensive work to a <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented class.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="T:Cuemon.Threading.ActWorkItem">
            <summary>
            An abstract class providing a way for outsourcing thread intensive work to a <see cref="T:Cuemon.Threading.IActWorkItemPool"/> implemented class.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.IActWorkItem">
            <summary>
            Defines a way to control work operations on a per thread basis.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.IActWorkItem.ProcessWork">
            <summary>
            The work to be processed by a pool of threads.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.IActWorkItem.Synchronization">
            <summary>
            Gets an instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItem.#ctor(Cuemon.Threading.CountdownEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.ActWorkItem"/> class.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItem.ProcessWork">
            <summary>
            The work to be processed by a pool of threads.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItem.Create(Cuemon.Threading.CountdownEvent,Cuemon.Act)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItem.Create``1(Cuemon.Threading.CountdownEvent,Cuemon.Act{``0},``0)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T">The type of the parameter of the method.</typeparam>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</param>
            <param name="arg">The parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItem.Create``2(Cuemon.Threading.CountdownEvent,Cuemon.Act{``0,``1},``0,``1)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItem.Create``3(Cuemon.Threading.CountdownEvent,Cuemon.Act{``0,``1,``2},``0,``1,``2)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItem.Create``4(Cuemon.Threading.CountdownEvent,Cuemon.Act{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method.</typeparam>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItem.Create``5(Cuemon.Threading.CountdownEvent,Cuemon.Act{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method.</typeparam>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="P:Cuemon.Threading.ActWorkItem.Exception">
            <summary>
            Gets the <see cref="P:Cuemon.Threading.ActWorkItem.Exception"/> that caused the <see cref="T:Cuemon.Threading.IActWorkItem"/> to end prematurely. If the <see cref="T:Cuemon.Threading.IActWorkItem"/> completed successfully, this will return null.
            </summary>
            <value>The <see cref="P:Cuemon.Threading.ActWorkItem.Exception"/> that caused the <see cref="T:Cuemon.Threading.IActWorkItem"/> to end prematurely.</value>
        </member>
        <member name="P:Cuemon.Threading.ActWorkItem.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about this <see cref="T:Cuemon.Threading.ActWorkItem"/>.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.ActWorkItem.PoolReference">
            <summary>
            Gets or sets the reference to the <see cref="T:Cuemon.Threading.IActWorkItemPool"/> owner.
            </summary>
            <value>The reference to the <see cref="T:Cuemon.Threading.IActWorkItemPool"/> owner..</value>
        </member>
        <member name="P:Cuemon.Threading.ActWorkItem.Synchronization">
            <summary>
            Gets an instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.IDoerWorkItem`1">
            <summary>
            Defines a way to control work operations that returns a value on a per thread basis.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.IDoerWorkItem`1.Result">
            <summary>
            Gets the result of the work processed by <see cref="M:Cuemon.Threading.IActWorkItem.ProcessWork"/>.
            </summary>
            <value>
            The result of the work processed by <see cref="M:Cuemon.Threading.IActWorkItem.ProcessWork"/>.
            </value>
        </member>
        <member name="M:Cuemon.Threading.DoerWorkItem`1.#ctor(Cuemon.Threading.CountdownEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.DoerWorkItem`1"/> class.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
        </member>
        <member name="P:Cuemon.Threading.DoerWorkItem`1.Result">
            <summary>
            Gets the result of the work processed by <see cref="M:Cuemon.Threading.ActWorkItem.ProcessWork"/>.
            </summary>
            <value>
            The result of the work processed by <see cref="M:Cuemon.Threading.ActWorkItem.ProcessWork"/>.
            </value>
        </member>
        <member name="T:Cuemon.Threading.DoerWorkItemPool`1">
            <summary>
            Provides a pool of threads to execute work items implementing the <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> interface.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.ActWorkItemPool">
            <summary>
            Provides a pool of threads to execute work items implementing the <see cref="T:Cuemon.Threading.IActWorkItem"/> interface.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItemPool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.ActWorkItemPool"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItemPool.OnWorkItemException(System.Exception)">
            <summary>
            Raises the <see cref="E:Cuemon.Threading.ActWorkItemPool.WorkItemException"/> event.
            </summary>
            <param name="exception">The exception that was thrown in the pool by a class implementing the <see cref="T:Cuemon.Threading.IActWorkItem"/> interface.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ActWorkItemPool.ProcessWork(Cuemon.Threading.IActWorkItem)">
            <summary>
            The work to be processed one thread at a time.
            </summary>
            <param name="work">The work item to execute one thread at a time.</param>
        </member>
        <member name="E:Cuemon.Threading.ActWorkItemPool.WorkItemException">
            <summary>
            Occurs when an exception that was thrown in the pool by a class implementing the <see cref="T:Cuemon.Threading.IActWorkItem"/> interface.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.ActWorkItemPool.Exceptions">
            <summary>
            Gets a read-only collection of an <see cref="T:System.Exception"/> that caused one or more of the <see cref="T:Cuemon.Threading.IActWorkItem"/> to end prematurely. If all of the <see cref="T:Cuemon.Threading.IActWorkItem"/> completed successfully, this will be an empty read-only collection.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="M:Cuemon.Threading.DoerWorkItemPool`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.DoerWorkItemPool`1.ProcessWork(Cuemon.Threading.IDoerWorkItem{`0})">
            <summary>
            The work to be processed one thread at a time.
            </summary>
            <param name="work">The work item to execute one thread at a time.</param>
        </member>
        <member name="P:Cuemon.Threading.DoerWorkItemPool`1.Result">
            <summary>
            Gets the result of the work processed in <see cref="M:Cuemon.Threading.DoerWorkItemPool`1.ProcessWork(Cuemon.Threading.IDoerWorkItem{`0})"/>.
            </summary>
            <value>
            The result of the work processed in <see cref="M:Cuemon.Threading.DoerWorkItemPool`1.ProcessWork(Cuemon.Threading.IDoerWorkItem{`0})"/>.
            </value>
        </member>
        <member name="T:Cuemon.Threading.DoerWorkItem">
            <summary>
            Provides static helper methods for function delegates based on <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.DoerWorkItem.Create``1(Cuemon.Threading.CountdownEvent,Cuemon.Doer{``0})">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.DoerWorkItem.Create``2(Cuemon.Threading.CountdownEvent,Cuemon.Doer{``0,``1},``0)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <param name="arg">The parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.DoerWorkItem.Create``3(Cuemon.Threading.CountdownEvent,Cuemon.Doer{``0,``1,``2},``0,``1)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.DoerWorkItem.Create``4(Cuemon.Threading.CountdownEvent,Cuemon.Doer{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.DoerWorkItem.Create``5(Cuemon.Threading.CountdownEvent,Cuemon.Doer{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.DoerWorkItem.Create``6(Cuemon.Threading.CountdownEvent,Cuemon.Doer{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="T:Cuemon.Threading.ParallelLoopUtility">
            <summary>
            Provides support for a generic way of specifying parallel loops while providing ways to encapsulate and re-use existing code.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``1(``0,``0,Cuemon.Act{``0})">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``2(``0,``0,Cuemon.Act{``0,``1},``1)">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="arg">The parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``3(``0,``0,Cuemon.Act{``0,``1,``2},``1,``2)">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``4(``0,``0,Cuemon.Act{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``5(``0,``0,Cuemon.Act{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``6(``0,``0,Cuemon.Act{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``1(System.TimeSpan,``0,``0,Cuemon.Act{``0})">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel for-loop operation to complete.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``2(System.TimeSpan,``0,``0,Cuemon.Act{``0,``1},``1)">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel for-loop operation to complete.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``3(System.TimeSpan,``0,``0,Cuemon.Act{``0,``1,``2},``1,``2)">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel for-loop operation to complete.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``4(System.TimeSpan,``0,``0,Cuemon.Act{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel for-loop operation to complete.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``5(System.TimeSpan,``0,``0,Cuemon.Act{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel for-loop operation to complete.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.For``6(System.TimeSpan,``0,``0,Cuemon.Act{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a parallel for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="initial"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel for-loop operation to complete.</param>
            <param name="initial">The initial value of the <c>counter</c> in the parallel for-loop.</param>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``1(Cuemon.Act{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``2(Cuemon.Act{``0,``1},System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <param name="arg">The parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``3(Cuemon.Act{``0,``1,``2},System.Collections.Generic.IEnumerable{``0},``1,``2)">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``4(Cuemon.Act{``0,``1,``2,``3},System.Collections.Generic.IEnumerable{``0},``1,``2,``3)">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``5(Cuemon.Act{``0,``1,``2,``3,``4},System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4)">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``6(Cuemon.Act{``0,``1,``2,``3,``4,``5},System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``1(System.TimeSpan,Cuemon.Act{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel foreach-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``2(System.TimeSpan,Cuemon.Act{``0,``1},System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel foreach-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <param name="arg">The parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``3(System.TimeSpan,Cuemon.Act{``0,``1,``2},System.Collections.Generic.IEnumerable{``0},``1,``2)">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel foreach-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``4(System.TimeSpan,Cuemon.Act{``0,``1,``2,``3},System.Collections.Generic.IEnumerable{``0},``1,``2,``3)">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel foreach-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``5(System.TimeSpan,Cuemon.Act{``0,``1,``2,``3,``4},System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4)">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel foreach-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.ForEach``6(System.TimeSpan,Cuemon.Act{``0,``1,``2,``3,``4,``5},System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a parallel foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the data in the <paramref name="source"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel foreach-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="source">An enumerable data source.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="body"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``2(Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1})">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``3(Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1,``2},``2)">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``4(Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1,``2,``3},``2,``3)">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``5(Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1,``2,``3,``4},``2,``3,``4)">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``6(Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1,``2,``3,``4,``5},``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``7(Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1,``2,``3,``4,``5,``6},``2,``3,``4,``5,``6)">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``2(System.TimeSpan,Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1})">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel while-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``3(System.TimeSpan,Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1,``2},``2)">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel while-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``4(System.TimeSpan,Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1,``2,``3},``2,``3)">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel while-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``5(System.TimeSpan,Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1,``2,``3,``4},``2,``3,``4)">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel while-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``6(System.TimeSpan,Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1,``2,``3,``4,``5},``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel while-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ParallelLoopUtility.While``7(System.TimeSpan,Cuemon.TesterDoer{``0,``1,System.Boolean},``0,Cuemon.Act{``1,``2,``3,``4,``5,``6},``2,``3,``4,``5,``6)">
            <summary>
            Provides a generic way of executing a parallel while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the parameter of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="TResult">The type of the out result value of the function delegate <paramref name="condition"/>.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="body"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="body"/>.</typeparam>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="source">The object being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the parallel while-loop operation to complete.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="body"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="body"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="body"/> is null.
            </exception>
        </member>
        <member name="P:Cuemon.Threading.ParallelLoopUtility.DefaultTimeout">
            <summary>
            Gets or sets a <see cref="T:System.TimeSpan"/> that represents the default amount of time to wait for a parallel process to complete.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> that represents the default amount of time to wait for a parallel process to complete. Default is 30 seconds.</value>
        </member>
        <member name="T:Cuemon.Threading.Spinner">
            <summary>
            Provides support for spin-based waiting.
            </summary>
            <remarks>This class was inspired by the newly introduced SpintWait in .NET 4.0, and I think .NET 2.0 users should benefit from this lightweight implementation.</remarks>
        </member>
        <member name="M:Cuemon.Threading.Spinner.SpinOnce">
            <summary>
            Performs a single spin.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.Spinner.Reset">
            <summary>
            Resets the spin counter.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.Spinner.SpinUntil(Cuemon.Doer{System.Boolean})">
            <summary>
            Spins until the specified <paramref name="condition"/> is satisfied.
            </summary>
            <param name="condition">A delegate to be executed over and over until it returns <c>true</c>.</param>
            <returns><c>true</c> if the condition is satisfied within the timeout; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.Spinner.SpinUntil(Cuemon.Doer{System.Boolean},System.TimeSpan)">
            <summary>
            Spins until the specified <paramref name="condition"/> is satisfied or until the specified <paramref name="timeout"/> is expired.
            </summary>
            <param name="condition">A delegate to be executed over and over until it returns <c>true</c>.</param>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the amount of time to wait, or a <see cref="F:System.TimeSpan.MaxValue"/> to wait indefinitely.</param>
            <returns><c>true</c> if the condition is satisfied within the timeout; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="timeout"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="timeout"/> cannot be negative.
            </exception>
        </member>
        <member name="P:Cuemon.Threading.Spinner.Count">
            <summary>
            Gets the number of times <see cref="M:Cuemon.Threading.Spinner.SpinOnce"/> has been called on this instance.
            </summary>
            <value>Returns the number of times <see cref="M:Cuemon.Threading.Spinner.SpinOnce"/> has been called on this instance.</value>
        </member>
        <member name="P:Cuemon.Threading.Spinner.NextSpinWillYield">
            <summary>
            Gets whether the next call to <see cref="M:Cuemon.Threading.Spinner.SpinOnce"/> will yield the processor, triggering a forced context switch.
            </summary>
            <value><c>true</c> if the next call to <see cref="M:Cuemon.Threading.Spinner.SpinOnce"/> will yield the processor, triggering a forced context switch; otherwise <c>false</c>.</value>
        </member>
        <member name="T:Cuemon.Threading.ThreadPoolUtility">
            <summary>
            Provides ways to work more efficient with <see cref="T:System.Threading.ThreadPool"/> related tasks.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork(Cuemon.Act)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork``1(Cuemon.Act{``0},``0)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork``2(Cuemon.Act{``0,``1},``0,``1)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork``3(Cuemon.Act{``0,``1,``2},``0,``1,``2)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork``4(Cuemon.Act{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork``5(Cuemon.Act{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork``6(Cuemon.Act{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork``7(Cuemon.Act{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork``8(Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork``9(Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadPoolUtility.QueueWork``10(Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Queues the specified <paramref name="method"/> for execution. The <paramref name="method"/> executes when a thread pool thread becomes available.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked when a thread pool thread becomes available.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.Threading.ThreadSettings">
            <summary>
            Specifies a set of features to apply on the <see cref="T:System.Threading.Thread"/> object created by the <see cref="M:Cuemon.Threading.ThreadUtility.StartNew(Cuemon.Act)"/> method.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.ThreadSettings.Background">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:System.Threading.Thread"/> is initialized as a background thread.
            </summary>
            <value><c>true</c> if a <see cref="T:System.Threading.Thread"/> is initialized as a background thread; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Threading.ThreadSettings.Name">
            <summary>
            Gets or sets the name of a <see cref="T:System.Threading.Thread"/>.
            </summary>
            <value>The name of a <see cref="T:System.Threading.Thread"/>.</value>
        </member>
        <member name="P:Cuemon.Threading.ThreadSettings.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a <see cref="T:System.Threading.Thread"/>.
            </summary>
            <value>One of the <see cref="T:System.Threading.ThreadPriority"/> values. The default value is <see cref="F:System.Threading.ThreadPriority.Normal"/>.</value>
        </member>
        <member name="T:Cuemon.Threading.ThreadUtility">
            <summary>
            Provides ways to work more efficient with <see cref="T:System.Threading.Thread"/> related tasks.
            </summary>
        </member>
        <member name="F:Cuemon.Threading.ThreadUtility.NumberOfCores">
            <summary>
            Retrieves the number of cores which is used for some thread related operations.
            </summary>
        </member>
        <member name="F:Cuemon.Threading.ThreadUtility.NumberOfLogicalProcessors">
            <summary>
            Retrieves the logical number of processors which is used for some thread related operations.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.Yield">
            <summary>
            Causes the calling thread to yield execution to another thread that is ready to run on the current processor. The operating system selects the thread to yield to.
            </summary>
            <returns><c>true</c> if the operating system switched execution to another thread; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.CreateSettings">
            <summary>
            Specifies a set of features to apply on the <see cref="T:System.Threading.Thread"/> object.
            </summary>
            <returns>A <see cref="T:Cuemon.Threading.ThreadSettings"/> instance that specifies a set of features to apply the <see cref="T:System.Threading.Thread"/> object.</returns>
            <remarks>
            The following table shows the initial property values for an instance of <see cref="T:Cuemon.Threading.ThreadSettings"/>.
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Initial Value</description>
                </listheader>
                <item>
                    <term><see cref="P:Cuemon.Threading.ThreadSettings.Background"/></term>
                    <description><c>true</c></description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Threading.ThreadSettings.Name"/></term>
                    <description>ThreadUtility.StartNew(<c>{0}</c>), where {0} will represent the arguments passed to the method.</description>
                </item>
                <item>
                    <term><see cref="P:Cuemon.Threading.ThreadSettings.Priority"/></term>
                    <description><see cref="F:System.Threading.ThreadPriority.Normal"/></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.CreateSettings(System.Threading.ThreadPriority)">
            <summary>
            Specifies a set of features to apply on the <see cref="T:System.Threading.Thread"/> object.
            </summary>
            <param name="priority">One of the <see cref="T:System.Threading.ThreadPriority"/> values. The default value is <see cref="F:System.Threading.ThreadPriority.Normal"/>.</param>
            <returns>A <see cref="T:Cuemon.Threading.ThreadSettings"/> instance that specifies a set of features to apply on the <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.CreateSettings(System.Threading.ThreadPriority,System.Boolean)">
            <summary>
            Specifies a set of features to apply on the <see cref="T:System.Threading.Thread"/> object.
            </summary>
            <param name="priority">One of the <see cref="T:System.Threading.ThreadPriority"/> values. The default value is <see cref="F:System.Threading.ThreadPriority.Normal"/>.</param>
            <param name="background"><c>true</c> if a <see cref="T:System.Threading.Thread"/> is initialized as a background thread; otherwise, <c>false</c>.</param>
            <returns>A <see cref="T:Cuemon.Threading.ThreadSettings"/> instance that specifies a set of features to apply on the <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.CreateSettings(System.Threading.ThreadPriority,System.Boolean,System.String)">
            <summary>
            Specifies a set of features to apply on the <see cref="T:System.Threading.Thread"/> object.
            </summary>
            <param name="priority">One of the <see cref="T:System.Threading.ThreadPriority"/> values. The default value is <see cref="F:System.Threading.ThreadPriority.Normal"/>.</param>
            <param name="background"><c>true</c> if a <see cref="T:System.Threading.Thread"/> is initialized as a background thread; otherwise, <c>false</c>.</param>
            <param name="name">The name of a <see cref="T:System.Threading.Thread"/>.</param>
            <returns>A <see cref="T:Cuemon.Threading.ThreadSettings"/> instance that specifies a set of features to apply on the <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew(Cuemon.Act)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``1(Cuemon.Act{``0},``0)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``2(Cuemon.Act{``0,``1},``0,``1)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``3(Cuemon.Act{``0,``1,``2},``0,``1,``2)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``4(Cuemon.Act{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``5(Cuemon.Act{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``6(Cuemon.Act{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``7(Cuemon.Act{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``8(Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``9(Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``10(Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew(Cuemon.Threading.ThreadSettings,Cuemon.Act)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``1(Cuemon.Threading.ThreadSettings,Cuemon.Act{``0},``0)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``2(Cuemon.Threading.ThreadSettings,Cuemon.Act{``0,``1},``0,``1)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``3(Cuemon.Threading.ThreadSettings,Cuemon.Act{``0,``1,``2},``0,``1,``2)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``4(Cuemon.Threading.ThreadSettings,Cuemon.Act{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``5(Cuemon.Threading.ThreadSettings,Cuemon.Act{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``6(Cuemon.Threading.ThreadSettings,Cuemon.Act{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``7(Cuemon.Threading.ThreadSettings,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``8(Cuemon.Threading.ThreadSettings,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``9(Cuemon.Threading.ThreadSettings,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.ThreadUtility.StartNew``10(Cuemon.Threading.ThreadSettings,Cuemon.Act{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates and starts a new instance of the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="settings">The <see cref="T:Cuemon.Threading.ThreadSettings"/> object used to configure the new <see cref="T:System.Threading.Thread"/> instance.</param>
            <param name="method">The delegate that is being invoked on the thread.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the delegate <paramref name="method"/>.</param>
            <returns>The started <see cref="T:System.Threading.Thread"/> that is executing the specified <paramref name="method"/> delegate.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null -or- <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.Threading.WorkItemException">
            <summary>
            The exception that is thrown when something unforeseen happens on a class implementing the <see cref="T:Cuemon.Threading.IActWorkItem"/> interface.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.WorkItemException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.WorkItemException"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.WorkItemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.WorkItemException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.Threading.WorkItemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TransientFaultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Cuemon.Threading.WorkItemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.WorkItemException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Cuemon.Threading.WorkItemExceptionEventArgs">
            <summary>
            Provides data for the event that is raised when there is an exception thrown by a class implementing the <see cref="T:Cuemon.Threading.IActWorkItem"/> interface.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.WorkItemExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.WorkItemExceptionEventArgs"/> class.
            </summary>
            <param name="exception">The exception that is not handled.</param>
        </member>
        <member name="F:Cuemon.Threading.WorkItemExceptionEventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.WorkItemExceptionEventArgs.Exception">
            <summary>
            Gets the exception thrown by a class implementing the <see cref="T:Cuemon.Threading.IActWorkItem"/> interface.
            </summary>
            <value>The exception thrown by a class implementing the <see cref="T:Cuemon.Threading.IActWorkItem"/> interface.</value>
        </member>
        <member name="T:Cuemon.TimeUnit">
            <summary>
            Specifies the unit of time - typically used with a <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Days">
            <summary>
            Indicates a time unit of Days.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Hours">
            <summary>
            Indicates a time unit of Hours.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Minutes">
            <summary>
            Indicates a time unit of Minutes.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Seconds">
            <summary>
            Indicates a time unit of Seconds.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Milliseconds">
            <summary>
            Indicates a time unit of Milliseconds.
            </summary>
        </member>
        <member name="F:Cuemon.TimeUnit.Ticks">
            <summary>
            Indicates a time unit of Ticks, where one Tick is equal to 100 nanoseconds.
            </summary>
        </member>
        <member name="T:Cuemon.TypeArgumentException">
            <summary>
            The exception that is thrown when one of the type arguments provided to a method is not valid.
            </summary>
        </member>
        <member name="M:Cuemon.TypeArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentException"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.TypeArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentException"/> class.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
        </member>
        <member name="M:Cuemon.TypeArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentException"/> class.
            </summary>
            <param name="typeParamName">The name of the type parameter that caused the exception.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.TypeArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Cuemon.TypeArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TypeArgumentException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Cuemon.Wrapper">
            <summary>
            Provides helper method for a <see cref="T:Cuemon.Wrapper`1"/> object.
            </summary>
        </member>
        <member name="M:Cuemon.Wrapper.ParseInstance``1(Cuemon.IWrapper{``0})">
            <summary>
            Parses the encapsulated instance of the specified <paramref name="wrapper"/> for a human-readable string value.
            </summary>
            <typeparam name="T">The type of the encapsulated instance of <paramref name="wrapper"/>.</typeparam>
            <param name="wrapper">The wrapper object to parse the instance.</param>
            <returns>A human-readable <see cref="T:System.String"/> representation of the wrapped instance in the <see cref="T:Cuemon.Wrapper`1"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="wrapper"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.Wrapper`1">
            <summary>
            Provides a way to wrap an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
        </member>
        <member name="T:Cuemon.IWrapper`1">
            <summary>
            Provides a generic way to wrap an object instance of <typeparamref name="T"/> inside another object.
            </summary>
            <typeparam name="T">The type of the object instance to wrap inside another object.</typeparam>
        </member>
        <member name="M:Cuemon.IWrapper`1.InstanceAs``1">
            <summary>
            Returns a value that is equivalent to the instance of the node that this hierarchical structure represents.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <returns>A value that is equivalent to the instance of the node that this hierarchical structure represents.</returns>
        </member>
        <member name="M:Cuemon.IWrapper`1.InstanceAs``1(System.IFormatProvider)">
            <summary>
            Returns a value that is equivalent to the instance of the node that this hierarchical structure represents.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>A value that is equivalent to the instance of the node that this hierarchical structure represents.</returns>
        </member>
        <member name="P:Cuemon.IWrapper`1.Instance">
            <summary>
            Gets the instance of the <see cref="T:Cuemon.IWrapper`1"/> object.
            </summary>
            <value>The instance of the <see cref="T:Cuemon.IWrapper`1"/> object.</value>
        </member>
        <member name="P:Cuemon.IWrapper`1.InstanceType">
            <summary>
            Gets the type of the <see cref="P:Cuemon.IWrapper`1.Instance"/>.
            </summary>
            <value>The type of the <see cref="P:Cuemon.IWrapper`1.Instance"/>.</value>
        </member>
        <member name="P:Cuemon.IWrapper`1.MemberReference">
            <summary>
            Gets the member from where <see cref="P:Cuemon.IWrapper`1.Instance"/> was referenced.
            </summary>
            <value>The member from where <see cref="P:Cuemon.IWrapper`1.Instance"/> was referenced.</value>
        </member>
        <member name="P:Cuemon.IWrapper`1.HasMemberReference">
            <summary>
            Gets a value indicating whether this instance has a member reference.
            </summary>
            <value><c>true</c> if this instance has a member reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cuemon.Wrapper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Wrapper`1"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Wrapper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Wrapper`1"/> class.
            </summary>
            <param name="instance">The instance that this wrapper object represents.</param>
        </member>
        <member name="M:Cuemon.Wrapper`1.#ctor(`0,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Wrapper`1"/> class.
            </summary>
            <param name="instance">The instance that this wrapper object represents.</param>
            <param name="memberReference">The member from where <paramref name="instance"/> was referenced.</param>
        </member>
        <member name="M:Cuemon.Wrapper`1.InstanceAs``1">
            <summary>
            Returns a value that is equivalent to the instance of the object that this wrapper represents.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <returns>A value that is equivalent to the instance of the object that this wrapper represents.</returns>
            <exception cref="T:System.InvalidCastException">
            The conversion is not supported - or - <see cref="P:Cuemon.Wrapper`1.Instance"/> does not implement the <see cref="T:System.IConvertible"/> interface.
            </exception>
            <exception cref="T:System.FormatException">
            <see cref="P:Cuemon.Wrapper`1.Instance"/> is not in a format for <typeparamref name="T"/> recognized by <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </exception>
            <exception cref="T:System.OverflowException">
            <see cref="P:Cuemon.Wrapper`1.Instance"/> represents a number that is out of the range of <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Wrapper`1.InstanceAs``1(System.IFormatProvider)">
            <summary>
            Returns a value that is equivalent to the instance of the object that this wrapper represents.
            </summary>
            <typeparam name="TResult">The type of the return value.</typeparam>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>A value that is equivalent to the instance of the object that this wrapper represents.</returns>
            <exception cref="T:System.InvalidCastException">
            The conversion is not supported - or - <see cref="P:Cuemon.Wrapper`1.Instance"/> does not implement the <see cref="T:System.IConvertible"/> interface.
            </exception>
            <exception cref="T:System.FormatException">
            <see cref="P:Cuemon.Wrapper`1.Instance"/> is not in a format for <typeparamref name="T"/> recognized by <paramref name="provider"/>.
            </exception>
            <exception cref="T:System.OverflowException">
            <see cref="P:Cuemon.Wrapper`1.Instance"/> represents a number that is out of the range of <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="P:Cuemon.Wrapper`1.Instance">
            <summary>
            Gets the object that this wrapper represents.
            </summary>
            <value>The object that this wrapper represents.</value>
        </member>
        <member name="P:Cuemon.Wrapper`1.InstanceType">
            <summary>
            Gets the type of the object that this wrapper represents.
            </summary>
            <value>The type of the that this wrapper represents.</value>
        </member>
        <member name="P:Cuemon.Wrapper`1.MemberReference">
            <summary>
            Gets the member from where <see cref="P:Cuemon.Wrapper`1.Instance"/> was referenced.
            </summary>
            <value>The member from where <see cref="P:Cuemon.Wrapper`1.Instance"/> was referenced.</value>
        </member>
        <member name="P:Cuemon.Wrapper`1.HasMemberReference">
            <summary>
            Gets a value indicating whether this instance has a member reference.
            </summary>
            <value><c>true</c> if this instance has a member reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Wrapper`1.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about this wrapper object.
            </summary>
            <value>An object that implements the <see cref="T:System.Collections.Generic.IDictionary`2"/> interface and contains a collection of user-defined key/value pairs.</value>
        </member>
        <member name="T:Cuemon.ExceptionUtility">
            <summary>
            This utility class is designed to make exception operations more flexible and easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.ExceptionUtility.Refine``1(``0,System.Reflection.MethodBase)">
            <summary>
            Refines the specified <paramref name="exception"/> with valuable meta information extracted from the associated <paramref name="method"/>.
            </summary>
            <typeparam name="T">The type of the exception.</typeparam>
            <param name="exception">The exception that needs to be thrown.</param>
            <param name="method">The method to extract valuable meta information from.</param>
            <returns>The specified <paramref name="exception"/> refined with valuable meta information.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is null - or - <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ExceptionUtility.Refine``1(``0,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Refines the specified <paramref name="exception"/> with valuable meta information extracted from the associated <paramref name="method"/> and <paramref name="parameters"/>.
            </summary>
            <typeparam name="T">The type of the exception.</typeparam>
            <param name="exception">The exception that needs to be thrown.</param>
            <param name="method">The method to extract valuable meta information from.</param>
            <param name="parameters">The optional parameters to accompany <paramref name="method"/>.</param>
            <returns>The specified <paramref name="exception"/> refined with valuable meta information.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is null - or - <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ExceptionUtility.Parse``1(System.Exception)">
            <summary>
            Parses the specified <paramref name="exception"/> for a match on <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The type of the <paramref name="exception"/> to find a match on.</typeparam>
            <param name="exception">The exception to parse for a match on <typeparamref name="TResult"/>.</param>
            <returns>The matched <paramref name="exception"/> cast as <typeparamref name="TResult"/> or <c>null</c> if no match could be resolved.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.ExceptionUtility.Flatten(System.Exception)">
            <summary>
            Flattens any inner exceptions descendant-or-self from the specified <paramref name="exception"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of exceptions.
            </summary>
            <param name="exception">The exception to flatten.</param>
            <returns>An empty <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence if no inner exceptions was specified; otherwise any inner exceptions rooted to the specified <paramref name="exception"/> as well as it's descendants.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> is null.
            </exception>
            <remarks>
            If any inner exceptions are referenced this method will iterative flatten all of them descendant-or-self from the specified <paramref name="exception"/>.<br/>
            Should the <paramref name="exception"/> be of the new AggregateException type introduced with .NET 4.0, the return sequence of this method will be equal to the result of the InnerExceptions property.
            </remarks>
        </member>
        <member name="M:Cuemon.ExceptionUtility.Flatten(System.Exception,System.Type)">
            <summary>
            Flattens any inner exceptions descendant-or-self from the specified <paramref name="exception"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of exceptions.
            </summary>
            <param name="exception">The exception to flatten.</param>
            <param name="exceptionType">The type of the specified <paramref name="exception"/>.</param>
            <returns>An empty <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence if no inner exceptions was referenced; otherwise any inner exceptions descendant-or-self from the specified <paramref name="exception"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exception"/> -or <paramref name="exceptionType"/> is null.
            </exception>
            <remarks>
            If any inner exceptions are referenced this method will iterative flatten all of them descendant-or-self from the specified <paramref name="exception"/>.<br/>
            Should the <paramref name="exception"/> be of the new AggregateException type introduced with .NET 4.0, the return sequence of this method will be equal to the result of the InnerExceptions property.
            </remarks>
        </member>
        <member name="T:Cuemon.DoerFactory`1">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`1.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`1.#ctor(Cuemon.Doer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`1"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`1.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`1.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`1.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`1.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`1.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`1.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`1.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`1.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`1.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`1.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`1.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`2">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <see cref="P:Cuemon.DoerFactory`2.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`2.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`2.#ctor(Cuemon.Doer{`0,`1},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`2"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg">The parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`2.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`2.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`2.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`2.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`2.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`2.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`2.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`2.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`2.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`2.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`2.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`2.Arg1">
            <summary>
            Gets or sets the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`2.Method"/>.
            </summary>
            <value>The first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`2.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`3">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`3.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`3.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`3.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`3.#ctor(Cuemon.Doer{`0,`1,`2},`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`3"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`3.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`3.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`3.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`3.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`3.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`3.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`3.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`3.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`3.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`3.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`3.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`3.Arg2">
            <summary>
            Gets or sets the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`3.Method"/>.
            </summary>
            <value>The second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`3.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`4">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`4.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`4.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`4.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`4.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`4.#ctor(Cuemon.Doer{`0,`1,`2,`3},`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`4"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`4.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`4.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`4.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`4.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`4.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`4.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`4.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`4.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`4.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`4.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`4.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`4.Arg3">
            <summary>
            Gets or sets the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`4.Method"/>.
            </summary>
            <value>The third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`4.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`5">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`5.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`5.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`5.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`5.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`5.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`5.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4},`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`5"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`5.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`5.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`5.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`5.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`5.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`5.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`5.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`5.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`5.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`5.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`5.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`5.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`5.Arg4">
            <summary>
            Gets or sets the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`5.Method"/>.
            </summary>
            <value>The fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`5.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`6">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`6.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`6.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`6.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`6.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`6.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`6.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`6.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5},`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`6"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`6.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`6.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`6.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`6.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`6.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`6.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`6.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`6.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`6.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`6.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`6.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`6.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`6.Arg5">
            <summary>
            Gets or sets the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`6.Method"/>.
            </summary>
            <value>The fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`6.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`7">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`7.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`7.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`7.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`7.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`7.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`7.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`7.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`7.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6},`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`7"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`7.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`7.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`7.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`7.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`7.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`7.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`7.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`7.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`7.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`7.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`7.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`7.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`7.Arg6">
            <summary>
            Gets or sets the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`7.Method"/>.
            </summary>
            <value>The sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`7.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`8">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`8.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7},`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`8"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`8.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`8.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`8.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`8.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`8.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`8.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`8.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`8.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`8.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`8.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`8.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`8.Arg7">
            <summary>
            Gets or sets the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.
            </summary>
            <value>The seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`8.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`9">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`9.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8},`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`9"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`9.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`9.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`9.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`9.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`9.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`9.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`9.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`9.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`9.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`9.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`9.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`9.Arg8">
            <summary>
            Gets or sets the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.
            </summary>
            <value>The eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`9.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`10">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`10.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`10"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`10.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`10.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`10.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`10.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`10.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`10.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`10.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`10.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`10.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`10.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`10.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`10.Arg9">
            <summary>
            Gets or sets the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.
            </summary>
            <value>The ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`10.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`11">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`11.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`11"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`11.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`11.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`11.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`11.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`11.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`11.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`11.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`11.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`11.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`11.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`11.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`11.Arg10">
            <summary>
            Gets or sets the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.
            </summary>
            <value>The tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`11.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`12">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`12.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`12"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`12.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`12.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`12.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`12.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`12.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`12.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`12.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`12.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`12.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`12.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`12.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`12.Arg11">
            <summary>
            Gets or sets the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.
            </summary>
            <value>The eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`12.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`13">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`13.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`13"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`13.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`13.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`13.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`13.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`13.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`13.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`13.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`13.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`13.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`13.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`13.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`13.Arg12">
            <summary>
            Gets or sets the twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.
            </summary>
            <value>The twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`13.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`14">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`14.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`14"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`14.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`14.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`14.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`14.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`14.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`14.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`14.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`14.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`14.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`14.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`14.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`14.Arg13">
            <summary>
            Gets or sets the thirteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.
            </summary>
            <value>The thirteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`14.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`15">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`15.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`15"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`15.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`15.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`15.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`15.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`15.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`15.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`15.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`15.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`15.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`15.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`15.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`15.Arg14">
            <summary>
            Gets or sets the fourteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.
            </summary>
            <value>The fourteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`15.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`16">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`16.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`16"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`16.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`16.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`16.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`16.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`16.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`16.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`16.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`16.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`16.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`16.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`16.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`16.Arg15">
            <summary>
            Gets or sets the fifteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.
            </summary>
            <value>The fifteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`16.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`17">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`17.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`17"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`17.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`17.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`17.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`17.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`17.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`17.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`17.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`17.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`17.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`17.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`17.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`17.Arg16">
            <summary>
            Gets or sets the sixteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.
            </summary>
            <value>The sixteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`17.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`18">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`18.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`18"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`18.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`18.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`18.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`18.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`18.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`18.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`18.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`18.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`18.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`18.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`18.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`18.Arg17">
            <summary>
            Gets or sets the seventeenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.
            </summary>
            <value>The seventeenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`18.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`19">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`19.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`19"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`19.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`19.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`19.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`19.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`19.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`19.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`19.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`19.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`19.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`19.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`19.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`19.Arg18">
            <summary>
            Gets or sets the eighteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.
            </summary>
            <value>The eighteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`19.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`20">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`20.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`20"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg19">The nineteenth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`20.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`20.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`20.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`20.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`20.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`20.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`20.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`20.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`20.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`20.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`20.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`20.Arg19">
            <summary>
            Gets or sets the nineteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.
            </summary>
            <value>The nineteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`20.Method"/>.</value>
        </member>
        <member name="T:Cuemon.DoerFactory`21">
            <summary>
            Provides an easy way of invoking an <see cref="T:Cuemon.Doer`1"/> delegate regardless of the amount of parameters provided.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="T20">The type of the twentieth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</typeparam>
        </member>
        <member name="M:Cuemon.DoerFactory`21.#ctor(Cuemon.Doer{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20},`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DoerFactory`21"/> class.
            </summary>
            <param name="method">The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg6">The sixth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg7">The seventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg8">The eighth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg9">The ninth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg10">The tenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg11">The eleventh parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg12">The twelfth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg13">The thirteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg14">The fourteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg15">The fifteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg16">The sixteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg17">The seventeenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg18">The eighteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg19">The nineteenth parameter of the function delegate <paramref name="method"/>.</param>
            <param name="arg20">The twentieth parameter of the function delegate <paramref name="method"/>.</param>
        </member>
        <member name="M:Cuemon.DoerFactory`21.ExecuteMethod">
            <summary>
            Executes the <see cref="T:Cuemon.Doer`1"/> delegate associated with <see cref="P:Cuemon.DoerFactory`21.Method"/>.
            </summary>
        </member>
        <member name="M:Cuemon.DoerFactory`21.GetMethodInfo">
            <summary>
            Gets the method represented by the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.
            </summary>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> describing the <see cref="P:Cuemon.DoerFactory`21.Method"/> represented by the function delegate.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`21.GetGenericArguments">
            <summary>
            Returns an array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance.
            </summary>
            <returns>An array of objects that represent the arguments passed to this <see cref="T:Cuemon.DoerFactory`1"/> instance. Returns an empty array if the current instance was constructed with no generic arguments.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`21.Clone">
            <summary>
            Creates a shallow copy of the current <see cref="T:Cuemon.DoerFactory`1"/> object.
            </summary>
            <returns>A new <see cref="T:Cuemon.DoerFactory`1"/> that is a copy of this instance.</returns>
        </member>
        <member name="M:Cuemon.DoerFactory`21.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:Cuemon.DoerFactory`21.Method">
            <summary>
            Gets the <see cref="T:Cuemon.Doer`1"/> delegate to invoke.
            </summary>
            <value>The <see cref="T:Cuemon.Doer`1"/> delegate to invoke.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`21.HasDelegate">
            <summary>
            Gets a value indicating whether this instance has an assigned function delegate to <see cref="P:Cuemon.DoerFactory`21.Method"/>.
            </summary>
            <value><c>true</c> if this instance an assigned function delegate to <see cref="P:Cuemon.DoerFactory`21.Method"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.DoerFactory`21.Arg20">
            <summary>
            Gets or sets the twentieth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.
            </summary>
            <value>The twentieth parameter of the function delegate <see cref="P:Cuemon.DoerFactory`21.Method"/>.</value>
        </member>
        <member name="T:Cuemon.Hierarchy`1">
            <summary>
            Represents a way to expose a node of a hierarchical structure, including the node object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object represented in the hierarchical structure.</typeparam>
        </member>
        <member name="T:Cuemon.IHierarchy`1">
            <summary>
            Provides a generic way to expose a node of a hierarchical structure, including the node object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the node represented in the hierarchical structure.</typeparam>
        </member>
        <member name="M:Cuemon.IHierarchy`1.Add(`0)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
        </member>
        <member name="M:Cuemon.IHierarchy`1.Add(`0,System.Reflection.MemberInfo)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <param name="member">The member from where <paramref name="instance"/> was referenced.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
        </member>
        <member name="M:Cuemon.IHierarchy`1.GetParent">
            <summary>
            Gets the parent node of the current node in the hierarchical structure.
            </summary>
            <returns>The parent node of the current node in the hierarchical structure.</returns>
        </member>
        <member name="M:Cuemon.IHierarchy`1.GetPath">
            <summary>
            Gets the hierarchical path of the node in the hierarchical structure.
            </summary>
            <value>A <see cref="T:System.String"/> that identifies the hierarchical path relative to the current node.</value>
        </member>
        <member name="M:Cuemon.IHierarchy`1.GetChildren">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence that represents all the child nodes of the current hierarchical node.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence that represents all the child nodes of the current hierarchical node.</returns>
        </member>
        <member name="P:Cuemon.IHierarchy`1.HasParent">
            <summary>
            Indicates whether the current node has a parent node.
            </summary>
            <value><c>true</c> if the current node has a parent node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.IHierarchy`1.HasChildren">
            <summary>
            Indicates whether the current node has any child nodes.
            </summary>
            <value><c>true</c> if the current node has any child nodes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.IHierarchy`1.Depth">
            <summary>
            Gets the current depth of the node in the hierarchical structure.
            </summary>
            <value>The current depth of the node in the hierarchical structure.</value>
        </member>
        <member name="P:Cuemon.IHierarchy`1.Index">
            <summary>
            Gets the zero-based index of the current node that this hierarchical structure represents.
            </summary>
            <value>The zero-based index of the current node that this hierarchical structure represents.</value>
        </member>
        <member name="P:Cuemon.IHierarchy`1.Item(System.Int32)">
            <summary>
            Gets the node at the specified index.
            </summary>
            <value>The node at the specified index.</value>
        </member>
        <member name="M:Cuemon.Hierarchy`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Hierarchy`1"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Hierarchy`1.Add(`0)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
        </member>
        <member name="M:Cuemon.Hierarchy`1.Add(`0,System.Type)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <param name="instanceType">The type of <paramref name="instance"/>.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instanceType"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy`1.Add(`0,System.Reflection.MemberInfo)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <param name="member">The member from where <paramref name="instance"/> was referenced.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
        </member>
        <member name="M:Cuemon.Hierarchy`1.Add(`0,System.Type,System.Reflection.MemberInfo)">
            <summary>
            Adds the specified instance to a node in the hierarchical structure representation.
            </summary>
            <param name="instance">The instance to a node in the hierarchical structure represents.</param>
            <param name="instanceType">The type of <paramref name="instance"/>.</param>
            <param name="member">The member from where <paramref name="instance"/> was referenced.</param>
            <returns>A reference to the newly added hierarchical node.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="instanceType"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy`1.GetPath">
            <summary>
            Gets the hierarchical path of the node in the hierarchical structure.
            </summary>
            <value>A <see cref="T:System.String"/> that identifies the hierarchical path relative to the current node.</value>
        </member>
        <member name="M:Cuemon.Hierarchy`1.GetChildren">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence that represents all the child nodes of the current hierarchical node.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence that represents all the child nodes of the current hierarchical node.</returns>
        </member>
        <member name="M:Cuemon.Hierarchy`1.GetParent">
            <summary>
            Gets the parent node of the current node in the hierarchical structure.
            </summary>
            <returns>The parent node of the current node in the hierarchical structure.</returns>
        </member>
        <member name="P:Cuemon.Hierarchy`1.Depth">
            <summary>
            Gets the current depth of the node in the hierarchical structure.
            </summary>
            <value>The current depth of the in the hierarchical structure.</value>
        </member>
        <member name="P:Cuemon.Hierarchy`1.Index">
            <summary>
            Gets the zero-based index of the current node that this hierarchical structure represents.
            </summary>
            <value>The zero-based index of the current node that this hierarchical structure represents.</value>
        </member>
        <member name="P:Cuemon.Hierarchy`1.HasParent">
            <summary>
            Gets a value indicating whether this instance has a parent.
            </summary>
            <value><c>true</c> if this instance has a parent; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Hierarchy`1.HasChildren">
            <summary>
            Gets a value indicating whether this instance has any children.
            </summary>
            <value><c>true</c> if this instance has any children; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Hierarchy`1.Item(System.Int32)">
            <summary>
            Gets the node at the specified index.
            </summary>
            <value>The node at the specified index.</value>
        </member>
        <member name="T:Cuemon.Hierarchy">
            <summary>
            Provides static helper methods for a hierarchical structure based on <see cref="T:Cuemon.IHierarchy`1"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Hierarchy.Root``1(Cuemon.IHierarchy{``0})">
            <summary>
            Returns the root node of the specified <paramref name="node"/> in the hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="node"/> in the hierarchical structure.</typeparam>
            <param name="node">The node that the hierarchical structure represents.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node that represents the root of the specified <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy.AncestorsAndSelf``1(Cuemon.IHierarchy{``0})">
            <summary>
            Gets all ancestors (parent, grandparent, etc.) and self of the specified <paramref name="node"/> in the hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="node"/> in the hierarchical structure.</typeparam>
            <param name="node">The node that the hierarchical structure represents.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to ancestors and self of the specified <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy.DescendantsAndSelf``1(Cuemon.IHierarchy{``0})">
            <summary>
            Gets all descendants (children, grandchildren, etc.) anf self of the current <paramref name="node"/> in the hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="node"/> in the hierarchical structure.</typeparam>
            <param name="node">The node that the hierarchical structure represents.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to the descendants and self of the specified <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy.SiblingsAndSelf``1(Cuemon.IHierarchy{``0})">
            <summary>
            Gets all siblings and self after the current <paramref name="node"/> in the hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="node"/> in the hierarchical structure.</typeparam>
            <param name="node">The node that the hierarchical structure represents.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to the siblings and self of the specified <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy.SiblingsAndSelfAt``1(Cuemon.IHierarchy{``0},System.Int32)">
            <summary>
            Gets all siblings and self after the current <paramref name="node"/> in the hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="node"/> in the hierarchical structure.</typeparam>
            <param name="node">The node that the hierarchical structure represents.</param>
            <param name="depth">The depth in the hierarchical structure from where to locate the siblings and self nodes.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to the siblings and self of the specified <paramref name="node"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="depth"/> is less than zero.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy.NodeAt``1(Cuemon.IHierarchy{``0},System.Int32)">
            <summary>
            Returns the node at the specified index of a hierarchical structure.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="node"/> in the hierarchical structure.</typeparam>
            <param name="node">The node from which the flattening will begin.</param>
            <param name="index">The zero-based index at which a node should be retrieved in the hierarchical structure.</param>
            <returns>The node at the specified <paramref name="index"/> in the hierarchical structure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero - or - <paramref name="index"/> exceeded the count of nodes in the hierarchical structure.
            </exception>
        </member>
        <member name="M:Cuemon.Hierarchy.FlattenAll``1(Cuemon.IHierarchy{``0})">
            <summary>
            Flattens the entirety of a hierarchical structure representation into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of nodes.
            </summary>
            <typeparam name="T">The type of the instance represented by the specified <paramref name="node"/> in the hierarchical structure.</typeparam>
            <param name="node">The node from which the flattening will begin.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of <see cref="T:Cuemon.IHierarchy`1"/> all nodes represented by the hierarchical structure.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.HierarchyUtility">
            <summary>
            This utility class is designed to make object hierarchy operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.HierarchyUtility.WhileSourceTraversalIsNotNull``1(``0,Cuemon.Doer{``0,``0})">
            <summary>
            Invokes the specified <paramref name="traversal"/> path of <paramref name="source"/> until obstructed by a null value.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/>.</typeparam>
            <param name="source">The source to travel until the <paramref name="traversal"/> path is obstructed by a null value.</param>
            <param name="traversal">The function delegate that is invoked until the traveled path is obstructed by a null value.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to the traveled path of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> -or- <paramref name="traversal"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.HierarchyUtility.WhileSourceTraversalHasElements``1(``0,Cuemon.Doer{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Invokes the specified <paramref name="traversal"/> path of <paramref name="source"/> until obstructed by an empty sequence.
            </summary>
            <typeparam name="TSource">The type of the <paramref name="source"/>.</typeparam>
            <param name="source">The source to travel until the <paramref name="traversal"/> path is obstructed by an empty sequence.</param>
            <param name="traversal">The function delegate that is invoked until the traveled path is obstructed by an empty sequence.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence equal to the traveled path of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> -or- <paramref name="traversal"/> is null.
            </exception>
        </member>
        <member name="T:Cuemon.DefaultOr">
            <summary>
            Provides ways to create an instance of <see cref="T:Cuemon.DefaultOr`1"/> that represents an intermediate object that to some extent implements a generic way to support the Null Object Pattern.
            </summary>
        </member>
        <member name="M:Cuemon.DefaultOr.Create``1(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DefaultOr`1"/> class. 
            </summary>
            <typeparam name="T">The type of the <paramref name="instance"/> to return.</typeparam>
            <param name="instance">The instance to intermediate.</param>
            <returns>The specified <paramref name="instance"/> if <see cref="P:Cuemon.DefaultOr`1.IsDefault"/> evaluates to <c>false</c>; otherwise a new instance of the specified <typeparamref name="T"/>, using the parameterless constructor.</returns>
        </member>
        <member name="T:Cuemon.DefaultOr`1">
            <summary>
            Represents an intermediate object that to some extent implements a generic way to support the Null Object Pattern.
            </summary>
            <typeparam name="T">The type of the <see cref="P:Cuemon.DefaultOr`1.Instance"/> to return.</typeparam>
        </member>
        <member name="M:Cuemon.DefaultOr`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DefaultOr`1"/> class.
            </summary>
            <param name="instance">The instance to intermediate.</param>
        </member>
        <member name="P:Cuemon.DefaultOr`1.Instance">
            <summary>
            Gets an instance of <typeparamref name="T"/>.
            </summary>
            <value>An instance of <typeparamref name="T"/>.</value>
        </member>
        <member name="P:Cuemon.DefaultOr`1.IsDefault">
            <summary>
            Gets a value indicating whether the originally supplied instance of <typeparamref name="T"/> equals default(T).
            </summary>
            <value><c>true</c> if the originally supplied instance of <typeparamref name="T"/> equals default(T); otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Cuemon.LoopUtility">
            <summary>
            Provides support for a generic way of specifying loops while providing ways to encapsulate and re-use existing code.
            </summary>
        </member>
        <member name="M:Cuemon.LoopUtility.For``1(``0,Cuemon.Act{``0})">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the former is initialized to set <c>counter</c> with an initial value of 0 and applying relational rule <see cref="F:Cuemon.RelationalOperator.LessThan"/> and the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``1(``0,Cuemon.RelationalOperator,``0,Cuemon.Act{``0})">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``1(``0,Cuemon.RelationalOperator,``0,Cuemon.AssignmentOperator,``0,Cuemon.Act{``0})">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``2(``0,Cuemon.Act{``0,``1},``1)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the former is initialized to set <c>counter</c> with an initial value of 0 and applying relational rule <see cref="F:Cuemon.RelationalOperator.LessThan"/> and the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``2(``0,Cuemon.RelationalOperator,``0,Cuemon.Act{``0,``1},``1)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``2(``0,Cuemon.RelationalOperator,``0,Cuemon.AssignmentOperator,``0,Cuemon.Act{``0,``1},``1)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg">The first parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``3(``0,Cuemon.Act{``0,``1,``2},``1,``2)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the former is initialized to set <c>counter</c> with an initial value of 0 and applying relational rule <see cref="F:Cuemon.RelationalOperator.LessThan"/> and the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``3(``0,Cuemon.RelationalOperator,``0,Cuemon.Act{``0,``1,``2},``1,``2)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``3(``0,Cuemon.RelationalOperator,``0,Cuemon.AssignmentOperator,``0,Cuemon.Act{``0,``1,``2},``1,``2)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``4(``0,Cuemon.Act{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the former is initialized to set <c>counter</c> with an initial value of 0 and applying relational rule <see cref="F:Cuemon.RelationalOperator.LessThan"/> and the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``4(``0,Cuemon.RelationalOperator,``0,Cuemon.Act{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``4(``0,Cuemon.RelationalOperator,``0,Cuemon.AssignmentOperator,``0,Cuemon.Act{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``5(``0,Cuemon.Act{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the former is initialized to set <c>counter</c> with an initial value of 0 and applying relational rule <see cref="F:Cuemon.RelationalOperator.LessThan"/> and the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``5(``0,Cuemon.RelationalOperator,``0,Cuemon.Act{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``5(``0,Cuemon.RelationalOperator,``0,Cuemon.AssignmentOperator,``0,Cuemon.Act{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``6(``0,Cuemon.Act{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the former is initialized to set <c>counter</c> with an initial value of 0 and applying relational rule <see cref="F:Cuemon.RelationalOperator.LessThan"/> and the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="repeats">The amount of repeats to do.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``6(``0,Cuemon.RelationalOperator,``0,Cuemon.Act{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>, where the latter is initialized to increment <c>counter</c> by 1 on each iteration.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``6(``0,Cuemon.RelationalOperator,``0,Cuemon.AssignmentOperator,``0,Cuemon.Act{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.<br/>
            This overload uses the default implementation of the necessary two callback methods of the for-loop; <see cref="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)"/> and <see cref="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)"/>.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``1(Cuemon.Doer{``0,Cuemon.RelationalOperator,``0,System.Boolean},``0,Cuemon.RelationalOperator,``0,Cuemon.Doer{``0,Cuemon.AssignmentOperator,``0,``0},Cuemon.AssignmentOperator,``0,Cuemon.Act{``0})">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <param name="condition">The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset.</param>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="iterator">The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the <c>counter</c>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null - or - <paramref name="iterator"/> is null - or - <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``2(Cuemon.Doer{``0,Cuemon.RelationalOperator,``0,System.Boolean},``0,Cuemon.RelationalOperator,``0,Cuemon.Doer{``0,Cuemon.AssignmentOperator,``0,``0},Cuemon.AssignmentOperator,``0,Cuemon.Act{``0,``1},``1)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="condition">The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset.</param>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="iterator">The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the <c>counter</c>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null - or - <paramref name="iterator"/> is null - or - <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``3(Cuemon.Doer{``0,Cuemon.RelationalOperator,``0,System.Boolean},``0,Cuemon.RelationalOperator,``0,Cuemon.Doer{``0,Cuemon.AssignmentOperator,``0,``0},Cuemon.AssignmentOperator,``0,Cuemon.Act{``0,``1,``2},``1,``2)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="condition">The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset.</param>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="iterator">The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the <c>counter</c>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null - or - <paramref name="iterator"/> is null - or - <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``4(Cuemon.Doer{``0,Cuemon.RelationalOperator,``0,System.Boolean},``0,Cuemon.RelationalOperator,``0,Cuemon.Doer{``0,Cuemon.AssignmentOperator,``0,``0},Cuemon.AssignmentOperator,``0,Cuemon.Act{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="condition">The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset.</param>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="iterator">The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the <c>counter</c>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null - or - <paramref name="iterator"/> is null - or - <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``5(Cuemon.Doer{``0,Cuemon.RelationalOperator,``0,System.Boolean},``0,Cuemon.RelationalOperator,``0,Cuemon.Doer{``0,Cuemon.AssignmentOperator,``0,``0},Cuemon.AssignmentOperator,``0,Cuemon.Act{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="condition">The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset.</param>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="iterator">The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the <c>counter</c>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null - or - <paramref name="iterator"/> is null - or - <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.For``6(Cuemon.Doer{``0,Cuemon.RelationalOperator,``0,System.Boolean},``0,Cuemon.RelationalOperator,``0,Cuemon.Doer{``0,Cuemon.AssignmentOperator,``0,``0},Cuemon.AssignmentOperator,``0,Cuemon.Act{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a for-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>counter</c> in the encapsulated for-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="condition">The condition delegate of the for-loop that is invoked once per iteration and determines the outcome of the conditional ruleset.</param>
            <param name="initial">The initial value of the <c>counter</c> in the for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply for the <c>condition</c> relational operator of the for-loop.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <param name="iterator">The iterator delegate of the for-loop that is invoked once per iteration and controls the steps of the <c>counter</c>.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply for the <c>iterator</c> assignment operator of the for-loop.</param>
            <param name="step">The value to assign the <c>counter</c> according to the rule specified by <paramref name="assignment"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null - or - <paramref name="iterator"/> is null - or - <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <typeparamref name="TSource"/> is outside the range of allowed types.<br/>
            Allowed types are: <see cref="T:System.Byte"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Single"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/> or <see cref="T:System.UInt64"/>.
            </exception>
            <remarks>Do not use this method for time critical operations as there are quite some overhead do to validation of generic parameter <typeparamref name="TSource"/>.</remarks>
        </member>
        <member name="M:Cuemon.LoopUtility.ForEach``1(System.Collections.Generic.IEnumerable{``0},Cuemon.Act{``0})">
            <summary>
            Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated foreach-loop.</typeparam>
            <param name="source">The sequence that is iterated in the encapsulated foreach-loop.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.ForEach``2(System.Collections.Generic.IEnumerable{``0},Cuemon.Act{``0,``1},``1)">
            <summary>
            Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated foreach-loop.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="source">The sequence that is iterated in the encapsulated foreach-loop.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.ForEach``3(System.Collections.Generic.IEnumerable{``0},Cuemon.Act{``0,``1,``2},``1,``2)">
            <summary>
            Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated foreach-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="source">The sequence that is iterated in the encapsulated foreach-loop.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.ForEach``4(System.Collections.Generic.IEnumerable{``0},Cuemon.Act{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated foreach-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="source">The sequence that is iterated in the encapsulated foreach-loop.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.ForEach``5(System.Collections.Generic.IEnumerable{``0},Cuemon.Act{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
            <summary>
            Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated foreach-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="source">The sequence that is iterated in the encapsulated foreach-loop.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.ForEach``6(System.Collections.Generic.IEnumerable{``0},Cuemon.Act{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a foreach-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated foreach-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="source">The sequence that is iterated in the encapsulated foreach-loop.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null -or- <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.While``1(``0,Cuemon.Doer{System.Boolean},Cuemon.Act{``0})">
            <summary>
            Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated while-loop.</typeparam>
            <param name="source">The objet being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="condition"/> delegate does not target an instance method on <paramref name="source"/>
            -or-
            <paramref name="source"/> does not match the source of the <paramref name="condition"/> delegate target.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.While``2(``0,Cuemon.Doer{System.Boolean},Cuemon.Act{``0,``1},``1)">
            <summary>
            Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated while-loop.</typeparam>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="source">The objet being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg">The parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="condition"/> delegate does not target an instance method on <paramref name="source"/>
            -or-
            <paramref name="source"/> does not match the source of the <paramref name="condition"/> delegate target.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.While``3(``0,Cuemon.Doer{System.Boolean},Cuemon.Act{``0,``1,``2},``1,``2)">
            <summary>
            Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated while-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="source">The objet being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="condition"/> delegate does not target an instance method on <paramref name="source"/>
            -or-
            <paramref name="source"/> does not match the source of the <paramref name="condition"/> delegate target.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.While``4(``0,Cuemon.Doer{System.Boolean},Cuemon.Act{``0,``1,``2,``3},``1,``2,``3)">
            <summary>
            Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated while-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="source">The objet being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="condition"/> delegate does not target an instance method on <paramref name="source"/>
            -or-
            <paramref name="source"/> does not match the source of the <paramref name="condition"/> delegate target.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.While``5(``0,Cuemon.Doer{System.Boolean},Cuemon.Act{``0,``1,``2,``3,``4},``1,``2,``3,``4)">
            <summary>
            Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated while-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="source">The objet being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="condition"/> delegate does not target an instance method on <paramref name="source"/>
            -or-
            <paramref name="source"/> does not match the source of the <paramref name="condition"/> delegate target.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.While``6(``0,Cuemon.Doer{System.Boolean},Cuemon.Act{``0,``1,``2,``3,``4,``5},``1,``2,``3,``4,``5)">
            <summary>
            Provides a generic way of executing a while-loop while providing ways to encapsulate and re-use existing code.
            </summary>
            <typeparam name="TSource">The type of the <c>source</c> in the encapsulated while-loop.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="method"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="method"/>.</typeparam>
            <param name="source">The objet being iterated in the encapsulated while-loop by the <paramref name="condition"/> delegate.</param>
            <param name="condition">The condition delegate of the while-loop that is invoked once per iteration and is a member of <paramref name="source"/>.</param>
            <param name="method">The delegate that is invoked once per iteration.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="method"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="condition"/> is null -or- <paramref name="method"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="condition"/> delegate does not target an instance method on <paramref name="source"/>
            -or-
            <paramref name="source"/> does not match the source of the <paramref name="condition"/> delegate target.
            </exception>
        </member>
        <member name="M:Cuemon.LoopUtility.Iterator``1(``0,Cuemon.AssignmentOperator,``0)">
            <summary>
            Provides a default implementation of a for-iterator callback method.
            </summary>
            <typeparam name="T">The type of the counter in a for-loop.</typeparam>
            <param name="current">The current value of the counter in a for-loop.</param>
            <param name="assignment">One of the enumeration values that specifies the rules to apply as the assignment operator for left-hand operand <paramref name="current"/> and right-hand operand <paramref name="step"/>.</param>
            <param name="step">The value to assign to <paramref name="current"/> according to the rule specified by <paramref name="assignment"/>.</param>
            <returns>``0.</returns>
        </member>
        <member name="M:Cuemon.LoopUtility.Condition``1(``0,Cuemon.RelationalOperator,``0)">
            <summary>
            Provides a default implementation of a for-condition callback method.
            </summary>
            <typeparam name="T">The type of the counter in a for-loop.</typeparam>
            <param name="current">The current value of the counter in a for-loop.</param>
            <param name="relational">One of the enumeration values that specifies the rules to apply as the relational operator for left-hand operand <paramref name="current"/> and right-hand operand <paramref name="repeats"/>.</param>
            <param name="repeats">The amount of repeats to do according to the rules specified by <paramref name="relational"/>.</param>
            <returns><c>true</c> if <paramref name="current"/> does not meet the condition of <paramref name="relational"/> and <paramref name="repeats"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Cuemon.RelationalOperator">
            <summary>
            Defines the most common numerical relational operators.
            </summary>
            <remarks>
            For more information please refer to this Wikipedia article: http://en.wikipedia.org/wiki/Relational_operator#Standard_relational_operators.
            </remarks>
        </member>
        <member name="F:Cuemon.RelationalOperator.Equal">
            <summary>
            A comparison for equality (==).
            </summary>
        </member>
        <member name="F:Cuemon.RelationalOperator.NotEqual">
            <summary>
            A comparison for inequality (!=).
            </summary>
        </member>
        <member name="F:Cuemon.RelationalOperator.GreaterThan">
            <summary>
            A comparison for greater than (&gt;).
            </summary>
        </member>
        <member name="F:Cuemon.RelationalOperator.GreaterThanOrEqual">
            <summary>
            A comparison for greater than or equal to (&gt;=).
            </summary>
        </member>
        <member name="F:Cuemon.RelationalOperator.LessThan">
            <summary>
            A comparison for less than (&lt;).
            </summary>
        </member>
        <member name="F:Cuemon.RelationalOperator.LessThanOrEqual">
            <summary>
            A comparison for less than or equal to (&lt;=).
            </summary>
        </member>
        <member name="T:Cuemon.Security.Cryptography.CyclicRedundancyCheck">
            <summary>
            Represents the abstract class from which all implementations of the CRC hash algorithm inherit.
            </summary>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.Cryptography.CyclicRedundancyCheck"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck.#ctor(Cuemon.Security.Cryptography.PolynomialRepresentation)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.Cryptography.CyclicRedundancyCheck"/> class.
            </summary>
            <param name="representation">The CRC generator polynomial representation.</param>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.
            </summary>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck.InitializePolynomial">
            <summary>
            Initializes the implementation of the polynomial representation details.
            </summary>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck.InitializePolynomialLookupTable(System.Byte,System.UInt16)">
            <summary>
            Initializes the implementation details of a <see cref="T:Cuemon.Security.Cryptography.CyclicRedundancyCheck"/> related polynomial lookup table.
            </summary>
            <param name="currentBit">The current bit ranging from 0 to 7.</param>
            <param name="currentTableIndex">The current index of the associated polynomial <see cref="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.LookupTable"/> ranging from 0 to 255.</param>
            <remarks>This method is - on first run - invoked 8 times per entry in the associated polynomial <see cref="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.LookupTable"/>, given a total of 2048 times.</remarks>
        </member>
        <member name="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.HashCoreResult">
            <summary>
            Gets or sets the resolved hash result.
            </summary>
            <value>The resolved hash result.</value>
        </member>
        <member name="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.LookupTable">
            <summary>
            Gets the lookup table for the associated CRC implementation.
            </summary>
            <value>The lookup table for the associated CRC implementation.</value>
        </member>
        <member name="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.Representation">
            <summary>
            Gets the CRC polynomial generator representation.
            </summary>
            <value>The CRC polynomial generator representation.</value>
        </member>
        <member name="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.Polynomial">
            <summary>
            Gets the CRC polynomial hexadecimal value equal to CRC implementation and <see cref="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.Representation"/>.
            </summary>
            <value>The CRC polynomial hexadecimal value equal to CRC implementation and <see cref="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.Representation"/>.</value>
        </member>
        <member name="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.DefaultSeed">
            <summary>
            Gets the CRC default seed value.
            </summary>
            <value>The CRC default seed value.</value>
        </member>
        <member name="T:Cuemon.Security.Cryptography.CyclicRedundancyCheck32">
            <summary>
            Computes the CRC32 hash value for the input data using the implementation provided by the cyclic redundancy check class (CRC). This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck32.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.Cryptography.CyclicRedundancyCheck32"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck32.#ctor(Cuemon.Security.Cryptography.PolynomialRepresentation)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.Cryptography.CyclicRedundancyCheck"/> class.
            </summary>
            <param name="representation">The CRC generator polynomial representation.</param>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck32.InitializePolynomial">
            <summary>
            Initializes the implementation of the polynomial representation details.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.Representation"/> property has an invalid value.
            </exception>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck32.InitializePolynomialLookupTable(System.Byte,System.UInt16)">
            <summary>
            Initializes the implementation details of a <see cref="T:Cuemon.Security.Cryptography.CyclicRedundancyCheck"/> related polynomial lookup table.
            </summary>
            <param name="currentBit">The current bit ranging from 0 to 7.</param>
            <param name="currentTableIndex">The current index of the associated polynomial <see cref="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.LookupTable"/> ranging from 0 to 255.</param>
            <remarks>This method is - on first run - invoked 8 times per entry in the associated polynomial <see cref="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck.LookupTable"/>, given a total of 2048 times.</remarks>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Cuemon.Security.Cryptography.CyclicRedundancyCheck32.HashFinal">
            <summary>
            When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck32.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
            <value>The size of the hash.</value>
            <returns>The size, in bits, of the computed hash code.</returns>
        </member>
        <member name="P:Cuemon.Security.Cryptography.CyclicRedundancyCheck32.DefaultSeed">
            <summary>
            Gets the CRC default seed value.
            </summary>
            <value>The CRC default seed value.</value>
        </member>
        <member name="T:Cuemon.Security.Cryptography.PolynomialRepresentation">
            <summary>
            Defines the common ways to express a CRC generator polynomial representation.
            </summary>
            <remarks>
            For more information regarding these representations, please refer to these Wikipedia articles:<br/>
            Mathematics of CRC - http://en.wikipedia.org/wiki/Mathematics_of_CRC#Polynomial_representations<br/>
            Cyclic redundancy check - http://en.wikipedia.org/wiki/Cyclic_redundancy_check#Designing_CRC_polynomials
            </remarks>
        </member>
        <member name="F:Cuemon.Security.Cryptography.PolynomialRepresentation.Normal">
            <summary>
            The most-significant byte (MSB) first of a CRC polynomial representation.
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.PolynomialRepresentation.Reversed">
            <summary>
            The least-significant byte (LSB) first of a CRC polynomial representation.
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.PolynomialRepresentation.ReversedReciprocal">
            <summary>
            The Koopman notation of a CRC polynomial representation.
            </summary>
        </member>
        <member name="T:Cuemon.TransientFaultException">
            <summary>
            The exception that is thrown when a transient fault handling was unsuccessful.
            </summary>
        </member>
        <member name="M:Cuemon.TransientFaultException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TransientFaultException"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.TransientFaultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TransientFaultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.TransientFaultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TransientFaultException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Cuemon.TransientFaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.TransientFaultException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Cuemon.EnumUtility">
            <summary>
            This utility class is designed to make enum related operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.EnumUtility.Parse``1(System.String)">
            <summary>
            Converts the string representation of the name or numeric <paramref name="value"/> of one or more enumerated constants to an equivalent enumerated <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the enum to convert.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An enum of type <typeparamref name="T"/> whose value is represented by <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.EnumUtility.Parse``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric <paramref name="value"/> of one or more enumerated constants to an equivalent enumerated <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the enum to convert.</typeparam>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase"><c>true</c> to ignore case; <c>false</c> to regard case.</param>
            <returns>An enum of type <typeparamref name="T"/> whose value is represented by <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="T"/>  does not represents an enumeration.
            </exception>
        </member>
        <member name="M:Cuemon.EnumUtility.HasFlag``1(``0,``0)">
            <summary>
            Determines whether one or more bit fields are set in the specified <paramref name="source"/>.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="source">The bit field or bit fields to test if set in <paramref name="value"/>.</param>
            <param name="value">An enumeration value.</param>
            <returns><c>true</c> if the bit field or bit fields that are set in <paramref name="source"/> are also set in the <paramref name="value"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Cuemon.TransientFaultUtility">
            <summary>
            Provides developers ways to make their applications more resilient by adding robust transient fault handling logic ideal for temporary condition such as network connectivity issues or service unavailability.
            </summary>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``1(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0})">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``1(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0})">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``2(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1},``0)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg">The parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``2(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1},``0)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg">The parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``3(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2},``0,``1)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``3(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2},``0,``1)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``4(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``4(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``5(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``5(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``6(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``6(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``1(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0})">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="TResult">The type of the return value of <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``2(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1},``0)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T">The type of the parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg">The parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``3(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2},``0,``1)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``4(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``5(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteFunction``6(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Doer{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of the function delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive function delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg5">The fifth parameter of the function delegate <paramref name="faultSensitiveMethod"/>.</param>
            <returns>The result from the <paramref name="faultSensitiveMethod"/>.</returns>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``1(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0},``0)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg">The parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``2(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1},``0,``1)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``3(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1,``2},``0,``1,``2)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``4(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``5(System.Int32,Cuemon.Doer{System.Int32,System.TimeSpan},Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="recoveryWaitTime">The function delegate that returns a <see cref="T:System.TimeSpan"/> specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``1(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0},``0)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg">The parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``1(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0},``0)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T">The type of the parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg">The parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``2(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1},``0,``1)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``2(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1},``0,``1)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``3(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1,``2},``0,``1,``2)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``3(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1,``2},``0,``1,``2)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``4(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``4(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``5(Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <remarks>Defaults to using <see cref="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts"/> for specifying the amount of retry attempts and the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.ExecuteAction``5(System.Int32,Cuemon.Doer{System.Exception,System.Boolean},Cuemon.Act{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Repetitively executes the specified <paramref name="faultSensitiveMethod"/> until the operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.
            </summary>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</typeparam>
            <param name="retryAttempts">The amount of retry attempts for transient faults.</param>
            <param name="isTransientFault">The function delegate that returns <c>true</c> if the failed operations contains clues that would suggest a transient fault; otherwise, <c>false</c>.</param>
            <param name="faultSensitiveMethod">The fault sensitive delegate that is invoked until an operation is successful, the amount of retry attempts has been reached, or a failed operation is not considered related to transient fault condition.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="faultSensitiveMethod"/>.</param>
            <remarks>Defaults to using the <see cref="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)"/> function implementation for specifying the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.</remarks>
        </member>
        <member name="M:Cuemon.TransientFaultUtility.RecoveryWaitTime(System.Int32)">
            <summary>
            Specifies the amount of time to wait for a transient fault to recover gracefully before trying a new attempt.
            </summary>
            <param name="currentAttempt">The current attempt.</param>
            <returns>A <see cref="T:System.TimeSpan"/> that defines the amount of time to wait for a transient fault to recover gracefully.</returns>
            <remarks>Default implementation is <see cref="P:Cuemon.TransientFaultUtility.DefaultRecoveryWaitTime"/> + 2^ to a maximum of 5; a total of 5 (default) + 32 = 37 seconds.</remarks>
        </member>
        <member name="P:Cuemon.TransientFaultUtility.DefaultRecoveryWaitTime">
            <summary>
            Gets or sets the default amount of time to wait for a transient fault to recover gracefully. Default is 5 seconds.
            </summary>
            <value>The amount of time to wait for a transient fault to recover gracefully.</value>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is zero.
            </exception>
        </member>
        <member name="P:Cuemon.TransientFaultUtility.DefaultRetryAttempts">
            <summary>
            Gets or sets the default amount of retry attempts for transient faults. Default is 5 retry attempts.
            </summary>
            <value>The default amount of retry attempts for transient faults.</value>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is zero.
            </exception>
        </member>
        <member name="T:Cuemon.TesterDoerUtility">
            <summary>
            This utility class is designed to handle those rare scenarios where you have knowledge about potential exceptions that can be safely ignored.
            </summary>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``1(Cuemon.Doer{``0},``0@)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="TResult">The type of the return value of the method.</typeparam>
            <param name="method">The function delegate to invoke to try and get the <typeparamref name="TResult"/>.</param>
            <param name="result">When this method returns, contains the <typeparamref name="TResult"/> from <paramref name="method"/>, or <b>default</b>(<typeparamref name="TResult"/>) if an exception is thrown.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``2(Cuemon.Doer{``0,``1},``0,``1@)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="T">The type of the first parameter of the method.</typeparam>
            <typeparam name="TResult">The type of the return value of the method.</typeparam>
            <param name="method">The function delegate to invoke to try and get the <typeparamref name="TResult"/>.</param>
            <param name="arg">The first parameter of the <paramref name="method"/>.</param>
            <param name="result">When this method returns, contains the <typeparamref name="TResult"/> from <paramref name="method"/>, or <b>default</b>(<typeparamref name="TResult"/>) if an exception is thrown.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``3(Cuemon.Doer{``0,``1,``2},``0,``1,``2@)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="TResult">The type of the return value of the method.</typeparam>
            <param name="method">The function delegate to invoke to try and get the <typeparamref name="TResult"/>.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <param name="result">When this method returns, contains the <typeparamref name="TResult"/> from <paramref name="method"/>, or <b>default</b>(<typeparamref name="TResult"/>) if an exception is thrown.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``4(Cuemon.Doer{``0,``1,``2,``3},``0,``1,``2,``3@)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="TResult">The type of the return value of the method.</typeparam>
            <param name="method">The function delegate to invoke to try and get the <typeparamref name="TResult"/>.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the <paramref name="method"/>.</param>
            <param name="result">When this method returns, contains the <typeparamref name="TResult"/> from <paramref name="method"/>, or <b>default</b>(<typeparamref name="TResult"/>) if an exception is thrown.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``5(Cuemon.Doer{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4@)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method.</typeparam>
            <typeparam name="TResult">The type of the return value of the method.</typeparam>
            <param name="method">The function delegate to invoke to try and get the <typeparamref name="TResult"/>.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the <paramref name="method"/>.</param>
            <param name="result">When this method returns, contains the <typeparamref name="TResult"/> from <paramref name="method"/>, or <b>default</b>(<typeparamref name="TResult"/>) if an exception is thrown.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``6(Cuemon.Doer{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5@)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method.</typeparam>
            <typeparam name="TResult">The type of the return value of the method.</typeparam>
            <param name="method">The function delegate to invoke to try and get the <typeparamref name="TResult"/>.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the <paramref name="method"/>.</param>
            <param name="result">When this method returns, contains the <typeparamref name="TResult"/> from <paramref name="method"/>, or <b>default</b>(<typeparamref name="TResult"/>) if an exception is thrown.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``2(Cuemon.Doer{``0,``1},``0)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> was invoked without an exception.
            </summary>
            <typeparam name="T">The type of the parameter of the method.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that you explicitly have chosen to ignore.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg">The parameter of the <paramref name="method"/>.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``3(Cuemon.Doer{``0,``1,``2},``0,``1)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> was invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that you explicitly have chosen to ignore.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``4(Cuemon.Doer{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> was invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that you explicitly have chosen to ignore.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the <paramref name="method"/>.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``5(Cuemon.Doer{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> was invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that you explicitly have chosen to ignore.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the <paramref name="method"/>.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteFunction``6(Cuemon.Doer{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> was invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that you explicitly have chosen to ignore.</typeparam>
            <param name="method">The function delegate to invoke.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the <paramref name="method"/>.</param>
            <returns><c>true</c> if an instance of <typeparamref name="TResult"/> has been created; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteAction(Cuemon.Act)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <param name="method">The delegate to invoke.</param>
            <returns><c>true</c> if the delegate <paramref name="method"/> was invoked without triggering an exception; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteAction``1(Cuemon.Act{``0},``0)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="T">The type of the parameter of the method.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg">The first parameter of the <paramref name="method"/>.</param>
            <returns><c>true</c> if the delegate <paramref name="method"/> was invoked without triggering an exception; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteAction``2(Cuemon.Act{``0,``1},``0,``1)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <returns><c>true</c> if the delegate <paramref name="method"/> was invoked without triggering an exception; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteAction``3(Cuemon.Act{``0,``1,``2},``0,``1,``2)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the <paramref name="method"/>.</param>
            <returns><c>true</c> if the delegate <paramref name="method"/> was invoked without triggering an exception; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteAction``4(Cuemon.Act{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the <paramref name="method"/>.</param>
            <returns><c>true</c> if the delegate <paramref name="method"/> was invoked without triggering an exception; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TesterDoerUtility.TryExecuteAction``5(Cuemon.Act{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Returns a value that indicates whether the specified <paramref name="method"/> can be invoked without an exception.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method.</typeparam>
            <param name="method">The delegate to invoke.</param>
            <param name="arg1">The first parameter of the <paramref name="method"/>.</param>
            <param name="arg2">The second parameter of the <paramref name="method"/>.</param>
            <param name="arg3">The third parameter of the <paramref name="method"/>.</param>
            <param name="arg4">The fourth parameter of the <paramref name="method"/>.</param>
            <param name="arg5">The fifth parameter of the <paramref name="method"/>.</param>
            <returns><c>true</c> if the delegate <paramref name="method"/> was invoked without triggering an exception; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Cuemon.Management.PerformanceMonitorCounter">
            <summary>
            Represents a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.
            </summary>
        </member>
        <member name="M:Cuemon.Management.PerformanceMonitorCounter.#ctor(System.Diagnostics.PerformanceCounter)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Management.PerformanceMonitorCounter"/> class.
            </summary>
            <param name="counter">The <see cref="T:System.Diagnostics.PerformanceCounter"/> to retrieve values from.</param>
        </member>
        <member name="M:Cuemon.Management.PerformanceMonitorCounter.#ctor(System.Diagnostics.PerformanceCounter,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Management.PerformanceMonitorCounter"/> class.
            </summary>
            <param name="counter">The <see cref="T:System.Diagnostics.PerformanceCounter"/> to retrieve values from.</param>
            <param name="sampleDelay">The delay before measuring a new calculated counter sample. Default is 128 ms.</param>
        </member>
        <member name="P:Cuemon.Management.PerformanceMonitorCounter.Object">
            <summary>
            Gets the name of the performance monitor object.
            </summary>
            <value>The name of the performance monitor object with which this counter is associated.</value>
        </member>
        <member name="P:Cuemon.Management.PerformanceMonitorCounter.Computer">
            <summary>
            Gets the computer name for this counter.
            </summary>
            <value>The computer on which the counter and its associated object reside.</value>
        </member>
        <member name="P:Cuemon.Management.PerformanceMonitorCounter.Instance">
            <summary>
            Gets the instance name for this counter.
            </summary>
            <value>The name of the performance monitor instance, or an empty string, if the counter is a single-instance counter.</value>
        </member>
        <member name="P:Cuemon.Management.PerformanceMonitorCounter.Counter">
            <summary>
            Gets the name of the counter that is associated with the performance monitor object.
            </summary>
            <value>The name of the counter, which generally describes the quantity being counted.</value>
        </member>
        <member name="P:Cuemon.Management.PerformanceMonitorCounter.Value">
            <summary>
            Gets the counter sample value that was present @ <see cref="P:Cuemon.Management.PerformanceMonitorCounter.UtcSampleTime"/>.
            </summary>
            <value>A snapshot of the counter sample value that was present @ <see cref="P:Cuemon.Management.PerformanceMonitorCounter.UtcSampleTime"/>.</value>
        </member>
        <member name="P:Cuemon.Management.PerformanceMonitorCounter.UtcSampleTime">
            <summary>
            Gets time when the counter sample was obtained.
            </summary>
            <value>The time when the counter sample was obtained.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="T:Cuemon.PlatformUtility">
            <summary>
            Provides information about the current platform.
            </summary>
        </member>
        <member name="M:Cuemon.PlatformUtility.GetProcessorAffinityCount">
            <summary>
            Gets the number of processors currently assigned to the currently active process.
            </summary>
            <returns>The number of processors currently assigned to the currently active process..</returns>
            <remarks>
            Code was inspired and originally authored by Jesse C. Slicer @ StackOverflow: http://stackoverflow.com/questions/188503/detecting-the-number-of-processors/189371#189371
            </remarks>
        </member>
        <member name="M:Cuemon.PlatformUtility.GetProcessorAffinityCount(System.Diagnostics.Process)">
            <summary>
            Gets the number of processors currently assigned to the specified <paramref name="process"/>.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> to query.</param>
            <returns>The number of processors currently assigned to the specified <paramref name="process"/>.</returns>
            <remarks>
            Code was inspired and originally authored by Jesse C. Slicer @ StackOverflow: http://stackoverflow.com/questions/188503/detecting-the-number-of-processors/189371#189371
            </remarks>
        </member>
        <member name="P:Cuemon.PlatformUtility.Processor">
            <summary>
            Gets the processor information of the current machine.
            </summary>
            <value>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/> representing various properties of the current machines processor/processors.</value>
        </member>
        <member name="T:Cuemon.Reflection.MethodSignature">
            <summary>
            Represent the signature of a method.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.#ctor(System.Reflection.MethodBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MethodSignature"/> class.
            </summary>
            <param name="method">The method to extract a signature for.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MethodSignature"/> class.
            </summary>
            <param name="className">The name of the class where the method is located.</param>
            <param name="methodName">The name of the method.</param>
            <remarks>This represents a method with no parameters.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MethodSignature"/> class.
            </summary>
            <param name="className">The name of the class where the method is located.</param>
            <param name="methodName">The name of the method.</param>
            <param name="isProperty">A value indicating whether the method is a property. Default is <c>false</c>.</param>
            <remarks>This represents a method with no parameters or a normal property.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.#ctor(System.String,System.String,Cuemon.Reflection.ParameterSignature[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MethodSignature"/> class.
            </summary>
            <param name="className">The name of the class where the method is located.</param>
            <param name="methodName">The name of the method.</param>
            <param name="parameters">A sequence of <see cref="T:Cuemon.Reflection.ParameterSignature"/> that represent the parameter signature of the method.</param>
            <remarks>This represents a method with one or more parameters.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.#ctor(System.String,System.String,System.Boolean,Cuemon.Reflection.ParameterSignature[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.MethodSignature"/> class.
            </summary>
            <param name="className">The name of the class where the method is located.</param>
            <param name="methodName">The name of the method.</param>
            <param name="isProperty">A value indicating whether the method is a property. Default is <c>false</c>.</param>
            <param name="parameters">A sequence of <see cref="T:Cuemon.Reflection.ParameterSignature"/> that represent the parameter signature of the method.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="className"/> is null or <br/>
            <paramref name="methodName"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="className"/> is empty or <br/>
            <paramref name="methodName"/> is empty.
            </exception>
            <remarks>This represents a method with one or more parameters or a property indexer.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.CreateDefault">
            <summary>
            Creates and returns a default <see cref="T:Cuemon.Reflection.MethodSignature"/> object ideal for debugging scenarios.
            </summary>
            <returns>A <see cref="T:Cuemon.Reflection.MethodSignature"/> object ideal for debugging scenarios.</returns>
            <remarks>
            This method will use <see cref="T:System.Diagnostics.StackFrame"/> to resolve the originating method you invoked this method from. This should only be used for debugging purposes due to the JIT.<br/>
            Read these articles for more information:<br/>
            <b>Release IS NOT Debug: 64bit Optimizations and C# Method Inlining in Release Build Call Stacks:</b> http://www.hanselman.com/blog/ReleaseISNOTDebug64bitOptimizationsAndCMethodInliningInReleaseBuildCallStacks.aspx <br/>
            <b>Tail call JIT conditions:</b> http://blogs.msdn.com/b/davbr/archive/2007/06/20/tail-call-jit-conditions.aspx <br/>
            <b>Compiler optimization:</b> http://en.wikipedia.org/wiki/Compiler_optimization
            </remarks>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.Create(System.Reflection.MethodBase)">
            <summary>
            Creates and returns a <see cref="T:Cuemon.Reflection.MethodSignature"/> object and automatically determines the type of the signature (be that method or property).
            </summary>
            <param name="method">The method to extract a signature for.</param>
            <returns>A <see cref="T:Cuemon.Reflection.MethodSignature"/> object.</returns>
            <remarks>Although confusing a property is to be thought of as a method with either one or two methods (Get, Set) contained inside the property declaration.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.CreateMethod(System.String,System.String)">
            <summary>
            Creates and returns a <see cref="T:Cuemon.Reflection.MethodSignature"/> object.
            </summary>
            <param name="className">The name of the class where the method is located.</param>
            <param name="methodName">The name of the method.</param>
            <returns>A <see cref="T:Cuemon.Reflection.MethodSignature"/> object.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.CreateMethod(System.String,System.String,Cuemon.Reflection.ParameterSignature[])">
            <summary>
            Creates and returns a <see cref="T:Cuemon.Reflection.MethodSignature"/> object.
            </summary>
            <param name="className">The name of the class where the method is located.</param>
            <param name="methodName">The name of the method.</param>
            <param name="parameters">A sequence of <see cref="T:Cuemon.Reflection.ParameterSignature"/> that represent the parameter signature of the method.</param>
            <returns>A <see cref="T:Cuemon.Reflection.MethodSignature"/> object.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.CreateProperty(System.String,System.String)">
            <summary>
            Creates and returns a <see cref="T:Cuemon.Reflection.MethodSignature"/> object.
            </summary>
            <param name="className">The name of the class where the method is located.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>A <see cref="T:Cuemon.Reflection.MethodSignature"/> object with <see cref="P:Cuemon.Reflection.MethodSignature.IsProperty"/> initialized to <c>true</c>.</returns>
            <remarks>Although confusing a property is to be thought of as a method with either one or two methods (Get, Set) contained inside the property declaration.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.CreateProperty(System.String,System.String,Cuemon.Reflection.ParameterSignature[])">
            <summary>
            Creates and returns a <see cref="T:Cuemon.Reflection.MethodSignature"/> object.
            </summary>
            <param name="className">The name of the class where the method is located.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="parameters">A sequence of <see cref="T:Cuemon.Reflection.ParameterSignature"/> that represent the parameter signature of the method.</param>
            <returns>A <see cref="T:Cuemon.Reflection.MethodSignature"/> object with <see cref="P:Cuemon.Reflection.MethodSignature.IsProperty"/> initialized to <c>true</c>.</returns>
            <remarks>Although confusing a property is to be thought of as a method with either one or two methods (Get, Set) contained inside the property declaration.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.MergeParameters(System.Object[])">
            <summary>
            Merges the <see cref="P:Cuemon.Reflection.MethodSignature.Parameters"/> signature of this instance with the specified <paramref name="runtimeParameterValues"/>.
            </summary>
            <param name="runtimeParameterValues">The runtime parameter values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the merged result of the <see cref="P:Cuemon.Reflection.MethodSignature.Parameters"/> signature of this instance and <paramref name="runtimeParameterValues"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.MergeParameters(Cuemon.Reflection.MethodSignature,System.Object[])">
            <summary>
            Merges the <paramref name="method"/> parameter signature with the specified <paramref name="runtimeParameterValues"/>.
            </summary>
            <param name="method">The method holding the parameter signature to merge with the runtime parameter values.</param>
            <param name="runtimeParameterValues">The runtime parameter values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the merged result of the <paramref name="method"/> parameter signature and <paramref name="runtimeParameterValues"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.MergeParameters(System.Collections.Generic.IEnumerable{Cuemon.Reflection.ParameterSignature},System.Object[])">
            <summary>
            Merges the <paramref name="parameters"/> signature with the specified <paramref name="runtimeParameterValues"/>.
            </summary>
            <param name="parameters">The parameter signature to merge with the runtime parameter values.</param>
            <param name="runtimeParameterValues">The runtime parameter values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the merged result of the <paramref name="parameters"/> signature and <paramref name="runtimeParameterValues"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.MethodSignature.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the method signature.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the method signature.</returns>
            <remarks>
            The returned string has the following format: <br/>
            Method without parameters: [<see cref="P:Cuemon.Reflection.MethodSignature.ClassName"/>].[<see cref="P:Cuemon.Reflection.MethodSignature.MethodName"/>]()<br/>
            Method with at least one or more parameter: [<see cref="P:Cuemon.Reflection.MethodSignature.ClassName"/>].[<see cref="P:Cuemon.Reflection.MethodSignature.MethodName"/>]([<see cref="P:Cuemon.Reflection.ParameterSignature.ParameterType"/>] [<see cref="P:Cuemon.Reflection.ParameterSignature.ParameterName"/>])<br/><br/>
            Property: [<see cref="P:Cuemon.Reflection.MethodSignature.ClassName"/>].[<see cref="P:Cuemon.Reflection.MethodSignature.MethodName"/>]<br/>
            Property with at least one indexer: [<see cref="P:Cuemon.Reflection.MethodSignature.ClassName"/>].[<see cref="P:Cuemon.Reflection.MethodSignature.MethodName"/>][[<see cref="P:Cuemon.Reflection.ParameterSignature.ParameterType"/>] [<see cref="P:Cuemon.Reflection.ParameterSignature.ParameterName"/>]]
            </remarks>
        </member>
        <member name="P:Cuemon.Reflection.MethodSignature.ClassName">
            <summary>
            Gets the name of the class where the method is located.
            </summary>
            <value>The name of the class where the method is located.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodSignature.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodSignature.Parameters">
            <summary>
            Gets the parameter of the method.
            </summary>
            <value>A sequence of type <see cref="T:Cuemon.Reflection.ParameterSignature"/> containing information that matches the signature of the method.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodSignature.HasParameters">
            <summary>
            Gets a value indicating whether the method has parameters.
            </summary>
            <value><c>true</c> if the method has parameters; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Reflection.MethodSignature.IsProperty">
            <summary>
            Gets a value indicating whether the method is a property.
            </summary>
            <value><c>true</c> if the method is a property; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Cuemon.Diagnostics.PerformanceLogEntry">
            <summary>
            Provides information about entries for an associated <see cref="T:Cuemon.Diagnostics.PerformanceLog"/>.
            </summary>
        </member>
        <member name="T:Cuemon.Diagnostics.LogEntry">
            <summary>
            Provides information about entries for an associated <see cref="T:Cuemon.Diagnostics.Log`1"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.LogEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.LogEntry"/> class.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.LogEntry.Created">
            <summary>
            Gets the UTC date time value from when this <see cref="T:Cuemon.Diagnostics.LogEntry"/> was created.
            </summary>
            <value>The UTC date time value from when this <see cref="T:Cuemon.Diagnostics.LogEntry"/> was created.</value>
        </member>
        <member name="P:Cuemon.Diagnostics.LogEntry.ComputerName">
            <summary>
            Gets or sets the name of the computer to associate with this <see cref="T:Cuemon.Diagnostics.LogEntry"/>.
            </summary>
            <value>The name of the computer to associate with this <see cref="T:Cuemon.Diagnostics.LogEntry"/>.</value>
        </member>
        <member name="P:Cuemon.Diagnostics.LogEntry.Severity">
            <summary>
            Gets or sets the severity of this <see cref="T:Cuemon.Diagnostics.LogEntry"/>.
            </summary>
            <value>The severity of this <see cref="T:Cuemon.Diagnostics.LogEntry"/>.</value>
        </member>
        <member name="P:Cuemon.Diagnostics.LogEntry.Title">
            <summary>
            Gets or sets the title of this <see cref="T:Cuemon.Diagnostics.LogEntry"/>.
            </summary>
            <value>The title of this <see cref="T:Cuemon.Diagnostics.LogEntry"/>.</value>
        </member>
        <member name="P:Cuemon.Diagnostics.LogEntry.Message">
            <summary>
            Gets or sets the message of this <see cref="T:Cuemon.Diagnostics.LogEntry"/>.
            </summary>
            <value>The message of this <see cref="T:Cuemon.Diagnostics.LogEntry"/>.</value>
        </member>
        <member name="P:Cuemon.Diagnostics.LogEntry.Details">
            <summary>
            Gets or sets any supplemental details of this <see cref="T:Cuemon.Diagnostics.LogEntry"/>.
            </summary>
            <value>The supplemental details of this <see cref="T:Cuemon.Diagnostics.LogEntry"/>.</value>
        </member>
        <member name="M:Cuemon.Diagnostics.PerformanceLogEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.LogEntry"/> class.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.PerformanceLogEntry.Elapsed">
            <summary>
            Gets or sets the elapsed time of a measured performance.
            </summary>
            <value>
            The elapsed time of a measured performance.
            </value>
        </member>
        <member name="T:Cuemon.Diagnostics.ProcessSnapshot">
            <summary>
            Provides a snapshot of information about an associated process.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.ProcessSnapshot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.ProcessSnapshot"/> class and associates it with the process resource that is running the calling application. 
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.ProcessSnapshot.#ctor(System.Diagnostics.Process)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.ProcessSnapshot"/> class.
            </summary>
            <param name="process">The process to snapshot for information.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.ProcessSnapshot.GetCurrentProcess">
            <summary>
            Gets a snapshot of the process resource that is running the calling application. 
            </summary>
            <returns>A <see cref="T:Cuemon.Diagnostics.ProcessSnapshot"/> associated with the process resource that is running the calling application.</returns>
        </member>
        <member name="M:Cuemon.Diagnostics.ProcessSnapshot.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Cuemon.Diagnostics.ProcessSnapshot.ProcessIdentifier">
            <summary>
            Gets the unique identifier for the associated process. This is also referred to as PID in Windows Task Manager.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.ProcessSnapshot.Handles">
            <summary>
            Gets the number of handles opened by the process.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.ProcessSnapshot.Threads">
            <summary>
            Gets the number of threads in use by the process.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.ProcessSnapshot.WorkingSet">
            <summary>
            Gets the amount of physical memory allocated for the associated process.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.ProcessSnapshot.PeakWorkingSet">
            <summary>
            Gets the maximum amount of physical memory used by the associated process.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.ProcessSnapshot.PrivateWorkingSet">
            <summary>
            Gets the amount of memory allocated for the associated process minus shared memory or 0 if unable to retreive the information.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.ProcessSnapshot.CommitSize">
            <summary>
            Gets the amount of virtual memory committed by the associated process.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.ProcessSnapshot.Name">
            <summary>
            Gets the name of the process. This is also referred to as Image Name in Windows Task Manager.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.ProcessSnapshot.UserName">
            <summary>
            Gets the user name under which the process is running or null if unable to retreive the information.
            </summary>
        </member>
        <member name="T:Cuemon.Diagnostics.TimeMeasureCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:Cuemon.Diagnostics.TimeMeasure.TimeMeasureCompleted"/> event.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasureCompletedEventArgs.#ctor(System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.TimeMeasureCompletedEventArgs"/> class.
            </summary>
            <param name="memberName">The name of the member that was invoked.</param>
            <param name="elapsed">The total elapsed time measured on the member that was invoked.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasureCompletedEventArgs.#ctor(System.String,System.TimeSpan,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.TimeMeasureCompletedEventArgs"/> class.
            </summary>
            <param name="memberName">The name of the member that was invoked.</param>
            <param name="elapsed">The total elapsed time measured on the member that was invoked.</param>
            <param name="data">A collection of key/value pairs that provide additional user-defined information about the member invoked.</param>
        </member>
        <member name="F:Cuemon.Diagnostics.TimeMeasureCompletedEventArgs.Empty">
            <summary>
            Represents an <see cref="T:Cuemon.Diagnostics.TimeMeasureCompletedEventArgs"/> event with no event data.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.TimeMeasureCompletedEventArgs.Elapsed">
            <summary>
            Gets the total elapsed time measured on the member that was invoked.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.TimeMeasureCompletedEventArgs.MemberName">
            <summary>
            Gets the name of the member that was invoked.
            </summary>
            <value>The name of the member that was invoked.</value>
        </member>
        <member name="P:Cuemon.Diagnostics.TimeMeasureCompletedEventArgs.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about the member that was invoked.
            </summary>
        </member>
        <member name="T:Cuemon.Diagnostics.PerformanceLog">
            <summary>
            Exposes an abstract interface, optimized for performance log handling.
            </summary>
        </member>
        <member name="T:Cuemon.Diagnostics.Log`1">
            <summary>
            Exposes an abstract interface for log handling.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.Log`1"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.Log`1"/> class.
            </summary>
            <param name="value">The object signed with a <see cref="T:Cuemon.Diagnostics.LogAttribute"/>.</param>
            <remarks><see cref="T:Cuemon.Diagnostics.Log`1"/> defaults to using an instance of <see cref="T:System.Text.UnicodeEncoding"/> unless specified otherwise.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.#ctor(System.Object,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.Log`1"/> class.
            </summary>
            <param name="value">The object signed with a <see cref="T:Cuemon.Diagnostics.LogAttribute"/>.</param>
            <param name="encoding">The encoding to use when writing the log.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.Log`1"/> class.
            </summary>
            <param name="name">The name of the log.</param>
            <param name="source">The source of event log entries.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.Log`1"/> class.
            </summary>
            <param name="name">The name of the log.</param>
            <param name="source">The source of event log entries.</param>
            <param name="encoding">The encoding to use when writing the log.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.WriteEntry(System.String,System.String)">
            <summary>
            Writes an information type entry with the given title and message text to the <see cref="T:Cuemon.Diagnostics.Log`1"/>.
            </summary>
            <param name="title">The title of the entry.</param>
            <param name="message">The message of the entry.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.WriteEntry(System.String,System.String,Cuemon.Diagnostics.LogEntrySeverity)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the given title and message text to the <see cref="T:Cuemon.Diagnostics.Log`1"/>.
            </summary>
            <param name="title">The title of the entry.</param>
            <param name="message">The message of the entry.</param>
            <param name="severity">One of the <see cref="T:Cuemon.Diagnostics.LogEntrySeverity"/> values.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.WriteEntry(System.String,System.String,System.String)">
            <summary>
            Writes an information type entry with the given title, message text and message details to the <see cref="T:Cuemon.Diagnostics.Log`1"/>.
            </summary>
            <param name="title">The title of the entry.</param>
            <param name="message">The message of the entry.</param>
            <param name="details">The message details of the entry.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.WriteEntry(System.String,System.String,System.String,Cuemon.Diagnostics.LogEntrySeverity)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the given title, message text and message details to the <see cref="T:Cuemon.Diagnostics.Log`1"/>.
            </summary>
            <param name="title">The title of the entry.</param>
            <param name="message">The message of the entry.</param>
            <param name="details">The message details of the entry.</param>
            <param name="severity">One of the <see cref="T:Cuemon.Diagnostics.LogEntrySeverity"/> values.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.WriteEntry(System.String,System.String,System.String,Cuemon.Diagnostics.LogEntrySeverity,System.String)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the given title, message text and message details to the <see cref="T:Cuemon.Diagnostics.Log`1"/>.
            </summary>
            <param name="title">The title of the entry.</param>
            <param name="message">The message of the entry.</param>
            <param name="details">The message details of the entry.</param>
            <param name="severity">One of the <see cref="T:Cuemon.Diagnostics.LogEntrySeverity"/> values.</param>
            <param name="computerName">The name of the computer to associate with the entry.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.Save">
            <summary>
            Persists the log to a repository.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.Log`1.WriteLog">
            <summary>
            Renders and writes all entries currently written to the log.
            </summary>
            <returns>A rendered <see cref="T:System.IO.Stream"/> of all entries written to the log.</returns>
        </member>
        <member name="P:Cuemon.Diagnostics.Log`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Cuemon.Diagnostics.Log`1"/>.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.Log`1.Encoding">
            <summary>
            Gets or sets the encoding to use when writing the log. Default encoding is <see cref="P:System.Text.Encoding.Unicode"/>.
            </summary>
            <value>The encoding to use when writing the log. Default encoding is <see cref="P:System.Text.Encoding.Unicode"/>.</value>
        </member>
        <member name="P:Cuemon.Diagnostics.Log`1.Name">
            <summary>
            Gets the name of the log.
            </summary>
            <value>The name of the log.</value>
        </member>
        <member name="P:Cuemon.Diagnostics.Log`1.Source">
            <summary>
            Gets or sets the source name to register and use when writing to the event log.
            </summary>
            <value>The source name to register and use when writing to the event log.</value>
        </member>
        <member name="P:Cuemon.Diagnostics.Log`1.Entries">
            <summary>
            Gets the entries of this log.
            </summary>
            <value>The entries of this log.</value>
        </member>
        <member name="M:Cuemon.Diagnostics.PerformanceLog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.PerformanceLog"/> class.
            </summary>
            <param name="sourceName">The source of event log entries.</param>
            <remarks><see cref="T:Cuemon.Diagnostics.PerformanceLog"/> defaults to using an instance of <see cref="T:System.Text.UnicodeEncoding"/> unless specified otherwise.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.PerformanceLog.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.PerformanceLog"/> class.
            </summary>
            <param name="sourceName">The source of event log entries.</param>
            <param name="encoding">The encoding to use when writing the log.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.PerformanceLog.WriteEntry(System.String,System.String,System.String,System.TimeSpan)">
            <summary>
            Writes an information entry with the specified parameters to the <see cref="T:Cuemon.Diagnostics.PerformanceLog"/>.
            </summary>
            <param name="fullClassName">The fully qualified class name on which the <paramref name="memberName"/> is called.</param>
            <param name="memberName">The measured member of the <paramref name="fullClassName"/>.</param>
            <param name="details">The optional details of the measured member.</param>
            <param name="executionTime">The measured time interval of the <paramref name="memberName"/>.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.PerformanceLog.WriteEntry(System.String,System.String,System.String,System.TimeSpan,Cuemon.Diagnostics.LogEntrySeverity)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the specified parameters to the <see cref="T:Cuemon.Diagnostics.PerformanceLog"/>.
            </summary>
            <param name="fullClassName">The fully qualified class name on which the <paramref name="memberName"/> is called.</param>
            <param name="memberName">The measured member of the <paramref name="fullClassName"/>.</param>
            <param name="details">The optional details of the measured member.</param>
            <param name="executionTime">The measured time interval of the <paramref name="memberName"/>.</param>
            <param name="severity">One of the <see cref="T:Cuemon.Diagnostics.LogEntrySeverity"/> values.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.PerformanceLog.WriteEntry(System.String,System.String,System.String,System.TimeSpan,Cuemon.Diagnostics.LogEntrySeverity,System.String)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the specified parameters to the <see cref="T:Cuemon.Diagnostics.PerformanceLog"/>.
            </summary>
            <param name="fullClassName">The fully qualified class name on which the <paramref name="memberName"/> is called.</param>
            <param name="memberName">The measured member of the <paramref name="fullClassName"/>.</param>
            <param name="details">The optional details of the measured member.</param>
            <param name="executionTime">The measured time interval of the <paramref name="memberName"/>.</param>
            <param name="severity">One of the <see cref="T:Cuemon.Diagnostics.LogEntrySeverity"/> values.</param>
            <param name="computerName">The name of the computer monitored.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.PerformanceLog.WriteEntry(System.String,System.String,System.String,Cuemon.Diagnostics.LogEntrySeverity,System.String)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the given title, message text and message details to the <see cref="T:Cuemon.Diagnostics.Log`1"/>.
            </summary>
            <param name="title">The title of the entry.</param>
            <param name="message">The message of the entry.</param>
            <param name="details">The message details of the entry.</param>
            <param name="severity">One of the <see cref="T:Cuemon.Diagnostics.LogEntrySeverity"/> values.</param>
            <param name="computerName">The name of the computer to associate with the entry.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.PerformanceLog.Save">
            <summary>
            Persists the log to a repository.
            </summary>
            <exception cref="T:System.NotImplementedException">This method must be overidden on the implementer class; otherwise a <see cref="T:System.NotImplementedException"/> is raised.</exception>
        </member>
        <member name="M:Cuemon.Diagnostics.PerformanceLog.WriteLog">
            <summary>
            Renders and writes all entries currently written to the log.
            </summary>
            <returns>A rendered <see cref="T:System.IO.Stream"/> of all entries written to the log.</returns>
        </member>
        <member name="T:Cuemon.Diagnostics.TimeMeasure">
            <summary>
            Provides a way of time measuring implementations of either <see cref="T:Cuemon.Diagnostics.IMethodPerformanceTiming"/> and/or <see cref="T:Cuemon.Diagnostics.IPropertyPerformanceTiming"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasure.#ctor(Cuemon.Diagnostics.IMethodPerformanceTiming,Cuemon.ComponentModel.MethodEnteredEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.TimeMeasure"/>.
            </summary>
            <param name="timing">The class to listen and perform time measurement on.</param>
            <param name="args">The method entered args as called from <see cref="M:Cuemon.Diagnostics.Instrumentation.OnMethodEntered(System.Reflection.MethodBase)"/>.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasure.#ctor(Cuemon.Diagnostics.IPropertyPerformanceTiming,System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.TimeMeasure"/> struct.
            </summary>
            <param name="timing">The class to listen and perform time measurement on.</param>
            <param name="args">The property changings args as called from <see cref="M:Cuemon.Diagnostics.Instrumentation.OnPropertyChanging(System.Reflection.MethodBase)"/>.</param>
        </member>
        <member name="E:Cuemon.Diagnostics.TimeMeasure.TimeMeasureRunning">
            <summary>
            Occurs when the performance timing is running.
            </summary>
        </member>
        <member name="E:Cuemon.Diagnostics.TimeMeasure.TimeMeasureCompleted">
            <summary>
            Occurs when the performance timing has completed.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.TimeMeasure.IsMeasuring">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.Diagnostics.TimeMeasure"/> timer is running. 
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Cuemon.Diagnostics.TimeMeasure"/> instance is currently running and measuring elapsed time for an interval; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cuemon.Diagnostics.TimeMeasureRunningEventArgs">
            <summary>
            Provides data for the <see cref="E:Cuemon.Diagnostics.TimeMeasure.TimeMeasureRunning"/> event.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.TimeMeasureRunningEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.TimeMeasureRunningEventArgs"/> class.
            </summary>
            <param name="memberName">The name of the member that was invoked.</param>
        </member>
        <member name="F:Cuemon.Diagnostics.TimeMeasureRunningEventArgs.Empty">
            <summary>
            Represents an <see cref="T:Cuemon.Diagnostics.TimeMeasureRunningEventArgs"/> event with no event data.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.TimeMeasureRunningEventArgs.MemberName">
            <summary>
            Gets the name of the member that was invoked.
            </summary>
            <value>The name of the member that was invoked.</value>
        </member>
        <member name="T:Cuemon.EventUtility">
            <summary>
            This utility class is designed to make some event related operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.EventUtility.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            A generic helper method method for raising an event.
            </summary>
            <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
            <param name="handler">The method that will handle the event.</param>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Cuemon.EventUtility.AddEvent``1(System.EventHandler{``0},System.EventHandler{``0}@)">
            <summary>
            A generic helper method for adding an event to a custom backing field <paramref name="backingFieldHandler"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
            <param name="handler">The method that will handle the event.</param>
            <param name="backingFieldHandler">The backing field reference for the <paramref name="handler"/>.</param>
            <remarks>The methodology is the same as in .NET 4.0.</remarks>
        </member>
        <member name="M:Cuemon.EventUtility.RemoveEvent``1(System.EventHandler{``0},System.EventHandler{``0}@)">
            <summary>
            A generic helper method for removing an event from a custom backing field <paramref name="backingFieldHandler"/>.
            </summary>
            <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
            <param name="handler">The method that will handle the event.</param>
            <param name="backingFieldHandler">The backing field reference for the <paramref name="handler"/>.</param>
            <remarks>The methodology is the same as in .NET 4.0.</remarks>
        </member>
        <member name="T:Cuemon.Doer`1">
            <summary>
            Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter. 
            </summary>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`2">
            <summary>
            Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg">The parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`3">
            <summary>
            Encapsulates a method that has two parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`4">
            <summary>
            Encapsulates a method that has three parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`5">
            <summary>
            Encapsulates a method that has four parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`6">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`7">
            <summary>
            Encapsulates a method that has six parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`8">
            <summary>
            Encapsulates a method that has seven parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`9">
            <summary>
            Encapsulates a method that has eight parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`10">
            <summary>
            Encapsulates a method that has nine parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`11">
            <summary>
            Encapsulates a method that has ten parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`12">
            <summary>
            Encapsulates a method that has eleven parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`13">
            <summary>
            Encapsulates a method that has twelve parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`14">
            <summary>
            Encapsulates a method that has thirteen parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`15">
            <summary>
            Encapsulates a method that has fourteen parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`16">
            <summary>
            Encapsulates a method that has fifteen parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`17">
            <summary>
            Encapsulates a method that has sixteen parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`18">
            <summary>
            Encapsulates a method that has seventeen parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg17">The seventeenth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`19">
            <summary>
            Encapsulates a method that has eighteen parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg17">The seventeenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg18">The eighteenth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`20">
            <summary>
            Encapsulates a method that has nineteen parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg17">The seventeenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg18">The eighteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg19">The nineteenth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.Doer`21">
            <summary>
            Encapsulates a method that has twenty parameters and returns a value of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T12">The type of the twelfth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T17">The type of the seventeenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T18">The type of the eighteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T19">The type of the nineteenth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="T20">The type of the twentieth parameter of the method that this function delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this function delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this function delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this function delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this function delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg9">The ninth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg10">The tenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg11">The eleventh parameter of the method that this function delegate encapsulates.</param>
            <param name="arg12">The twelfth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg13">The thirteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg14">The fourteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg15">The fifteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg16">The sixteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg17">The seventeenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg18">The eighteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg19">The nineteenth parameter of the method that this function delegate encapsulates.</param>
            <param name="arg20">The twentieth parameter of the method that this function delegate encapsulates.</param>
            <returns>The return value of the method that this function delegate encapsulates.</returns>
            <remarks>This function delegate is equivalent to <c>Func{TResult}</c> in .NET 3.5 (and newer) and for the same reason renamed to avoid naming conflict. The noun <c>Doer</c> was carefully selected to reflect a go-getter; a method that does something and then returns the result as part of a job. This fits perfectly for a generic function delegate.</remarks>
        </member>
        <member name="T:Cuemon.IO.Compression.CompressionUtility">
            <summary>
            This utility class is designed to make <see cref="T:System.IO.Stream"/> related compression operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.IO.Compression.CompressionUtility.CompressStream(System.IO.Stream)">
            <summary>
            Compresses the <paramref name="source"/> stream using the Deflate algorithm.
            </summary>
            <param name="source">The source stream to compress.</param>
            <returns>A compressed <see cref="T:System.IO.Stream"/> of the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.IO.Compression.CompressionUtility.CompressStream(System.IO.Stream,Cuemon.IO.Compression.CompressionType)">
            <summary>
            Compresses the <paramref name="source"/> stream using the specified <paramref name="compressionType"/> algorithm.
            </summary>
            <param name="source">The source stream to compress.</param>
            <param name="compressionType">The compression algorithm to use for the compression.</param>
            <returns>A compressed <see cref="T:System.IO.Stream"/> of the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.IO.Compression.CompressionUtility.DecompressStream(System.IO.Stream)">
            <summary>
            Decompresses the source stream using the Deflate algorithm.
            </summary>
            <param name="source">The source stream to decompress.</param>
            <returns>A decompressed <see cref="T:System.IO.Stream"/> of the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.IO.Compression.CompressionUtility.DecompressStream(System.IO.Stream,Cuemon.IO.Compression.CompressionType)">
            <summary>
            Decompresses the source stream using the specified <paramref name="compressionType"/> algorithm.
            </summary>
            <param name="source">The source stream to decompress.</param>
            <param name="compressionType">The compression algorithm to use for the decompression.</param>
            <returns>A decompressed <see cref="T:System.IO.Stream"/> of the <paramref name="source"/>.</returns>
        </member>
        <member name="T:Cuemon.IO.Compression.CompressionType">
            <summary>
            Specifies the algorithm used for compression.
            </summary>
        </member>
        <member name="F:Cuemon.IO.Compression.CompressionType.Deflate">
            <summary>
            A fast and efficient compression using a combination of the LZ77 algorithm and Huffman coding.
            </summary>
        </member>
        <member name="F:Cuemon.IO.Compression.CompressionType.GZip">
            <summary>
            A slower but otherwise identical compression to the <see cref="F:Cuemon.IO.Compression.CompressionType.Deflate"/> with cyclic redundancy check value for data corruption detection.
            </summary>
        </member>
        <member name="T:Cuemon.IO.JsonInstance">
            <summary>
            Represents a JSON instance from a structural data source.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonInstance.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.JsonInstance"/> class.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The value of the JSON object.</param>
            <param name="nodeNumber">The logical node number of the JSON object placement in the originating structural data source.</param>
        </member>
        <member name="M:Cuemon.IO.JsonInstance.GetSignature">
            <summary>
            Computes and returns a MD5 signature of the following properties: <see cref="P:Cuemon.IO.JsonInstance.Name"/>, <see cref="P:Cuemon.IO.JsonInstance.Value"/> and <see cref="P:Cuemon.IO.JsonInstance.NodeNumber"/>.
            </summary>
            <returns>A MD5 signature of the following properties: <see cref="P:Cuemon.IO.JsonInstance.Name"/>, <see cref="P:Cuemon.IO.JsonInstance.Value"/> and <see cref="P:Cuemon.IO.JsonInstance.NodeNumber"/>.</returns>
        </member>
        <member name="M:Cuemon.IO.JsonInstance.IsPartOfArray">
            <summary>
            Determines whether this <see cref="T:Cuemon.IO.JsonInstance"/> should be part of an array.
            </summary>
            <returns>
              <c>true</c> if this <see cref="T:Cuemon.IO.JsonInstance"/> should be part of an array; otherwise, <c>false</c>.
            </returns>
            <remarks>Because of the complexity when generating JSON, this property should be treated as a hint-only. Additional logic is assumed necessary.</remarks>
        </member>
        <member name="M:Cuemon.IO.JsonInstance.WriteStartArray">
            <summary>
            Determines whether this <see cref="T:Cuemon.IO.JsonInstance"/> is in a state, where a <see cref="F:Cuemon.IO.JsonWriter.BeginArray"/> should be written.
            </summary>
            <returns>
              <c>true</c> if this <see cref="T:Cuemon.IO.JsonInstance"/> is in a state, where a <see cref="F:Cuemon.IO.JsonWriter.BeginArray"/> should be written; otherwise, <c>false</c>.
            </returns>
            <remarks>Because of the complexity when generating JSON, this property should be treated as a hint-only. Additional logic is assumed necessary.</remarks>
        </member>
        <member name="M:Cuemon.IO.JsonInstance.WriteEndArray">
            <summary>
            Determines whether this <see cref="T:Cuemon.IO.JsonInstance"/> is in a state, where a <see cref="F:Cuemon.IO.JsonWriter.EndArray"/> should be written.
            </summary>
            <returns>
              <c>true</c> if this <see cref="T:Cuemon.IO.JsonInstance"/> is in a state, where a <see cref="F:Cuemon.IO.JsonWriter.EndArray"/> should be written; otherwise, <c>false</c>.
            </returns>
            <remarks>Because of the complexity when generating JSON, this property should be treated as a hint-only. Additional logic is assumed necessary.</remarks>
        </member>
        <member name="M:Cuemon.IO.JsonInstance.WriteValueSeperator">
            <summary>
            Determines whether this <see cref="T:Cuemon.IO.JsonInstance"/> is in a state, where a <see cref="F:Cuemon.IO.JsonWriter.ValueSeperator"/> should be written.
            </summary>
            <returns>
              <c>true</c> if this <see cref="T:Cuemon.IO.JsonInstance"/> is in a state, where a <see cref="F:Cuemon.IO.JsonWriter.ValueSeperator"/> should be written; otherwise, <c>false</c>.
            </returns>
            <remarks>Because of the complexity when generating JSON, this property should be treated as a hint-only. Additional logic is assumed necessary.</remarks>
        </member>
        <member name="P:Cuemon.IO.JsonInstance.Name">
            <summary>
            Gets the name of the JSON object.
            </summary>
        </member>
        <member name="P:Cuemon.IO.JsonInstance.Value">
            <summary>
            Gets the value of the JSON object.
            </summary>
        </member>
        <member name="P:Cuemon.IO.JsonInstance.NodeNumber">
            <summary>
            Gets the logical node number of the JSON object placement in the originating structural data source.
            </summary>
        </member>
        <member name="P:Cuemon.IO.JsonInstance.Instances">
            <summary>
            Gets the children of the current <see cref="T:Cuemon.IO.JsonInstance"/> object.
            </summary>
        </member>
        <member name="P:Cuemon.IO.JsonInstance.Parent">
            <summary>
            Gets or sets the parent of this <see cref="T:Cuemon.IO.JsonInstance"/> object.
            </summary>
            <value>The parent of this <see cref="T:Cuemon.IO.JsonInstance"/> object.</value>
        </member>
        <member name="T:Cuemon.IO.JsonInstanceCollection">
            <summary>
            Represents a list of JSON children from a structural data source.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonInstanceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.JsonInstanceCollection"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonInstanceCollection.#ctor(System.Collections.Generic.IEnumerable{Cuemon.IO.JsonInstance})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.JsonInstanceCollection"/> class.
            </summary>
            <param name="instances">The instances to fill this <see cref="T:Cuemon.IO.JsonInstanceCollection"/> with.</param>
        </member>
        <member name="M:Cuemon.IO.JsonInstanceCollection.FilterByName(System.String)">
            <summary>
            Returns a list of <see cref="T:Cuemon.IO.JsonInstance"/> filtered by the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Cuemon.IO.JsonInstance"/> to filter by.</param>
            <returns>A list of <see cref="T:Cuemon.IO.JsonInstance"/> filtered by the specified <paramref name="name"/>.</returns>
        </member>
        <member name="M:Cuemon.IO.JsonInstanceCollection.Compare(Cuemon.IO.JsonInstance,Cuemon.IO.JsonInstance)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
        </member>
        <member name="T:Cuemon.IO.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing JSON data.
            </summary>
        </member>
        <member name="F:Cuemon.IO.JsonWriter.BeginArray">
            <summary>
            Represents the begin-array character as defined in RFC 4627.
            </summary>
        </member>
        <member name="F:Cuemon.IO.JsonWriter.BeginObject">
            <summary>
            Represents the begin-object character as defined in RFC 4627.
            </summary>
        </member>
        <member name="F:Cuemon.IO.JsonWriter.EndArray">
            <summary>
            Represents the end-array character as defined in RFC 4627.
            </summary>
        </member>
        <member name="F:Cuemon.IO.JsonWriter.EndObject">
            <summary>
            Represents the end-object character as defined in RFC 4627.
            </summary>
        </member>
        <member name="F:Cuemon.IO.JsonWriter.NameSeperator">
            <summary>
            Represents the name-seperator character as defined in RFC 4627.
            </summary>
        </member>
        <member name="F:Cuemon.IO.JsonWriter.ValueSeperator">
            <summary>
            Represents the value-seperator character as defined in RFC 4627.
            </summary>
        </member>
        <member name="F:Cuemon.IO.JsonWriter.NullValue">
            <summary>
            Represents the null literal as defined in RFC 4627.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.JsonWriter"/> class.
            </summary>
            <param name="output">The <see cref="T:System.IO.Stream"/> to which you want to write.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.JsonWriter"/> class.
            </summary>
            <param name="output">The <see cref="T:System.IO.Stream"/> to which you want to write.</param>
            <param name="encoding">The character encoding to use in the generated <paramref name="output"/>.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.Create(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:Cuemon.IO.JsonWriter"/> instance using the specified stream.
            </summary>
            <param name="output">The <see cref="T:System.IO.Stream"/> to which you want to write.</param>
            <returns>An <see cref="T:Cuemon.IO.JsonWriter"/> object.</returns>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.Create(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:Cuemon.IO.JsonWriter"/> instance using the specified stream.
            </summary>
            <param name="output">The <see cref="T:System.IO.Stream"/> to which you want to write.</param>
            <param name="encoding">The character encoding to use in the generated <paramref name="output"/>.</param>
            <returns>An <see cref="T:Cuemon.IO.JsonWriter"/> object.</returns>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.ValidateEncoding(System.Text.Encoding)">
            <summary>
            Validates the specified <paramref name="encoding"/> according to RFC 4627.
            </summary>
            <param name="encoding">The character encoding to validate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="encoding"/> is not within the allowed range of allowed encoding values.</exception>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteStartArray">
            <summary>
            Writes the <see cref="F:Cuemon.IO.JsonWriter.BeginArray"/> tag of a JSON array.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteEndArray">
            <summary>
            Writes the <see cref="F:Cuemon.IO.JsonWriter.EndArray"/> tag of a JSON array.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteStartObject">
            <summary>
            Writes the <see cref="F:Cuemon.IO.JsonWriter.BeginObject"/> tag of a JSON object.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteEndObject">
            <summary>
            Writes the <see cref="F:Cuemon.IO.JsonWriter.EndObject"/> tag of a JSON object.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes the raw JSON manually from a string.
            </summary>
            <param name="data">String containing the text to write.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String)">
            <summary>
            Writes a JSON object with no value associated.
            </summary>
            <param name="name">The name of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Boolean)">
            <summary>
            Writes a boolean JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.Boolean"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Byte)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.Byte"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Byte[])">
            <summary>
            Writes a base64 encoded string JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The binary value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Char)">
            <summary>
            Writes a string JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.Char"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.DateTime)">
            <summary>
            Writes a string JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.DateTime"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Decimal)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.Decimal"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Double)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.Double"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Single)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.Single"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Guid)">
            <summary>
            Writes a string JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.Guid"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Int32)">
            <summary>
            Writes a string JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.Int32"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Int64)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.Int64"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.SByte)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.SByte"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Int16)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.Int16"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.String)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.String"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.UInt32)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.UInt32"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.UInt64)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.UInt64"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.UInt16)">
            <summary>
            Writes a numeric JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The <see cref="T:System.UInt16"/> value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObject(System.String,System.Object)">
            <summary>
            Writes a JSON object.
            </summary>
            <param name="name">The name of the JSON object.</param>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteNull">
            <summary>
            Writes a literal null value as defined in RFC 4627.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteValueSeperator">
            <summary>
            Writes the <see cref="F:Cuemon.IO.JsonWriter.ValueSeperator"/>.
            </summary>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectName(System.String)">
            <summary>
            Writes the name of a JSON object as defined in RFC 4627.
            </summary>
            <param name="name">The name of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.String)">
            <summary>
            Writes the string value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Boolean)">
            <summary>
            Writes the boolean value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Byte)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Byte[])">
            <summary>
            Writes the string value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
            <remarks><paramref name="value"/> is converted to a Base64 encoded string.</remarks>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Char)">
            <summary>
            Writes the string value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.DateTime)">
            <summary>
            Writes the string value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Decimal)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Double)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Single)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Guid)">
            <summary>
            Writes the string value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Int32)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Int64)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.SByte)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Int16)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.UInt32)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.UInt64)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.UInt16)">
            <summary>
            Writes the numeric value of a JSON object as defined in RFC 4627.
            </summary>
            <param name="value">The value of the JSON object.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.WriteObjectValue(System.Object)">
            <summary>
            Writes the value of a JSON object.
            </summary>
            <param name="value">The value of the JSON object.</param>
            <remarks><paramref name="value"/> is checked and written accordingly by the <see cref="T:System.IConvertible"/> interface.</remarks>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cuemon.IO.JsonWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Cuemon.IO.JsonWriter.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cuemon.IO.JsonWriter.Encoding">
            <summary>
            Gets the character encoding used by this instance of the <see cref="T:Cuemon.IO.JsonWriter"/>.
            </summary>
        </member>
        <member name="T:Cuemon.Management.ManagementUtility">
            <summary>
            This utility class is designed to make common management operations instrumented to the Windows Management Instrumentation (WMI) infrastructure easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.IsWindowsManagementInstrumentationRunning">
            <summary>
            Determines whether the Windows Management Instrumentation service is running.
            </summary>
            <returns>
              <c>true</c> if the Windows Management Instrumentation service is running; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetComputerSystemInfo">
            <summary>
            Creates and returns a read-only representation of the Win32_ComputerSystem WMI class.
            </summary>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/> representing the properties of the Win32_ComputerSystem WMI class.</returns>
            <remarks>
            For more information about the Win32_ComputerSystem WMI class, do visit this address: http://msdn.microsoft.com/en-us/library/windows/desktop/aa394102(v=vs.85).aspx.
            </remarks>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetOperatingSystemInfo">
            <summary>
            Creates and returns a read-only representation of the Win32_OperatingSystem WMI class.
            </summary>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/> representing the properties of the Win32_OperatingSystem WMI class.</returns>
            <remarks>
            For more information about the Win32_OperatingSystem WMI class, do visit this address: http://msdn.microsoft.com/en-us/library/windows/desktop/aa394239(v=vs.85).aspx.
            </remarks>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetProcessInfo">
            <summary>
            Creates and returns a read-only representation of the Win32_Process WMI class for the currently active process.
            </summary>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/> representing the properties (and owner information) of the Win32_Process WMI class.</returns>
            <remarks>
            For more information about the Win32_Process WMI class, do visit this address: http://msdn.microsoft.com/en-us/library/windows/desktop/aa394372(v=vs.85).aspx.
            </remarks>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetProcessInfo(System.Diagnostics.Process)">
            <summary>
            Creates and returns a read-only representation of the Win32_Process WMI class.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> to query.</param>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/> representing the properties (and owner information) of the Win32_Process WMI class.</returns>
            <remarks>
            For more information about the Win32_Process WMI class, do visit this address: http://msdn.microsoft.com/en-us/library/windows/desktop/aa394372(v=vs.85).aspx.
            </remarks>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetProcessorInfo">
            <summary>
            Creates and returns a read-only representation of the Win32_Processor WMI class.
            </summary>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/> representing the properties of the Win32_Processor WMI class.</returns>
            <remarks>
            For more information about the Win32_Processor WMI class, do visit this address: http://msdn.microsoft.com/en-us/library/windows/desktop/aa394373(v=vs.85).aspx.
            </remarks>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetPerformanceMonitorCounters(System.String)">
            <summary>
            Creates and returns a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor. Includes all instance names in the result.
            </summary>
            <param name="categoryName">The name of the performance monitor object.</param>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> representing a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="categoryName"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="categoryName"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="categoryName"/> is misspelled or does not exists.
            </exception>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetPerformanceMonitorCounters(System.String,System.TimeSpan)">
            <summary>
            Creates and returns a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor. Includes all instance names in the result.
            </summary>
            <param name="categoryName">The name of the performance monitor object.</param>
            <param name="sampleDelay">The delay to use when calculating the sample value. Default is 64 milliseconds. Recommended delay is 1 second.</param>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> representing a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="categoryName"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="categoryName"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="categoryName"/> is misspelled or does not exists.
            </exception>
            <remarks>If the calculated sample value of a counter depends on two counter reads, a delay has to be used before the result is accurate. The recommended delay time is one second to allow the counter to perform the next incremental read, but is default 64 milliseconds for performance considerations.</remarks>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetPerformanceMonitorCounters(System.String,System.String[])">
            <summary>
            Creates and returns a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.
            </summary>
            <param name="categoryName">The name of the performance monitor object.</param>
            <param name="instanceNames">The instance names to sample for the associated <paramref name="categoryName"/>. Use asterisk (*) to include all instance names.</param>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> representing a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="categoryName"/> is null or <br/>
            <paramref name="instanceNames"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="categoryName"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="categoryName"/> is misspelled or does not exists.
            </exception>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetPerformanceMonitorCounters(System.String,System.TimeSpan,System.String[])">
            <summary>
            Creates and returns a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.
            </summary>
            <param name="categoryName">The name of the performance monitor object.</param>
            <param name="sampleDelay">The delay to use when calculating the sample value. Default is 64 milliseconds. Recommended delay is 1 second.</param>
            <param name="instanceNames">The instance names to sample for the associated <paramref name="categoryName"/>. Use asterisk (*) to include all instance names.</param>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> representing a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="categoryName"/> is null or <br/>
            <paramref name="instanceNames"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="categoryName"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="categoryName"/> is misspelled or does not exists.
            </exception>
            <remarks>If the calculated sample value of a counter depends on two counter reads, a delay has to be used before the result is accurate. The recommended delay time is one second to allow the counter to perform the next incremental read, but is default 64 milliseconds for performance considerations.</remarks>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetPerformanceMonitorCounters(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and returns a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.
            </summary>
            <param name="categoryName">The name of the performance monitor object.</param>
            <param name="instanceNames">The instance names to sample for the associated <paramref name="categoryName"/>. Use asterisk (*) to include all instance names.</param>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> representing a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="categoryName"/> is null or <br/>
            <paramref name="instanceNames"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="categoryName"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="categoryName"/> is misspelled or does not exists.
            </exception>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetPerformanceMonitorCounters(System.String,System.TimeSpan,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and returns a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.
            </summary>
            <param name="categoryName">The name of the performance monitor object.</param>
            <param name="sampleDelay">The delay to use when calculating the sample value. Default is 64 milliseconds. Recommended delay is 1 second.</param>
            <param name="instanceNames">The instance names to sample for the associated <paramref name="categoryName"/>. Use asterisk (*) to include all instance names.</param>
            <returns>An <see cref="T:Cuemon.Collections.Generic.IReadOnlyCollection`1"/> representing a lightweight, read-only implementation of a Windows NT performance counter similar to Windows Performance Monitor.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="categoryName"/> is null or <br/>
            <paramref name="instanceNames"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="categoryName"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="categoryName"/> is misspelled or does not exists.
            </exception>
            <remarks>If the calculated sample value of a counter depends on two counter reads, a delay has to be used before the result is accurate. The recommended delay time is one second to allow the counter to perform the next incremental read, but is default 64 milliseconds for performance considerations.</remarks>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetInstanceName">
            <summary>
            Creates and returns a instance name compatible with the GetPerformanceMonitorCounters methods of the currently active process.
            </summary>
            <returns>A instance name compatible with the GetPerformanceMonitorCounters methods of the currently active process.</returns>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.GetInstanceName(System.Diagnostics.Process)">
            <summary>
            Creates and returns a instance name compatible with the GetPerformanceMonitorCounters methods of the specified <paramref name="process"/>.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> to extract an instance name from.</param>
            <returns>A instance name compatible with the GetPerformanceMonitorCounters methods of the specified <paramref name="process"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="process"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.ParseWin32(System.String)">
            <summary>
            Parses and returns a sequence of Win32 object equivalent to the specified <paramref name="className"/>.
            </summary>
            <param name="className">The name of the Win32 Class to query an instance of.</param>
            <returns>A <see cref="T:System.Management.ManagementObjectCollection"/> containing the objects that match the specified query.</returns>
            <remarks>
            For more information about Win32 Classes, do visit this address: http://msdn.microsoft.com/en-us/library/windows/desktop/aa394084(v=vs.85).aspx.
            </remarks>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.ParseWin32(System.String,System.String,System.Object[])">
            <summary>
            Parses and returns a sequence of Win32 object equivalent to the specified <paramref name="className"/>.
            </summary>
            <param name="className">The name of the Win32 Class to query an instance of.</param>
            <param name="conditionFormat">The condition to be applied when querying the Win32 class as a composite format string (see Remarks).</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A <see cref="T:System.Management.ManagementObjectCollection"/> containing the objects that match the specified query.</returns>
            <remarks>
            For more information about Win32 Classes, do visit this address: http://msdn.microsoft.com/en-us/library/windows/desktop/aa394084(v=vs.85).aspx.
            <br/>
            For more information regarding the <paramref name="conditionFormat"/>, have a look here: http://msdn.microsoft.com/en-us/library/txafckwd(v=vs.80).aspx.
            </remarks>
        </member>
        <member name="M:Cuemon.Management.ManagementUtility.ParseCimType(System.Management.CimType)">
            <summary>
            Parses and returns a <see cref="T:System.Type"/> equivalent of <paramref name="cimType"/>.
            </summary>
            <param name="cimType">The <see cref="T:System.Management.CimType"/> to parse.</param>
            <returns>A <see cref="T:System.Type"/> equivalent of <paramref name="cimType"/>.</returns>
        </member>
        <member name="T:Cuemon.Net.Http.HttpMethods">
            <summary>
            Defines the official HTTP data transfer method (such as GET, POST, or HEAD) used by the client to query a web server.
            </summary>
            <remarks>
            These are the official HTTP methods as specified in RFC 2616, section 9 (except for the CONNECT method).<br/>
            RFC 2616: http://www.w3.org/Protocols/rfc2616/rfc2616.html, RFC 2616 section 9: http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.
            <br/><br/>
            This enumeration has a <see cref="T:System.FlagsAttribute"/> that allows a bitwise combination of its member values.
            </remarks>
        </member>
        <member name="F:Cuemon.Net.Http.HttpMethods.Options">
            <summary>
            Represents an HTTP OPTIONS protocol method.
            </summary>
        </member>
        <member name="F:Cuemon.Net.Http.HttpMethods.Get">
            <summary>
            Represents an HTTP GET protocol method.
            </summary>
        </member>
        <member name="F:Cuemon.Net.Http.HttpMethods.Head">
            <summary>
            Represents an HTTP HEAD protocol method. The HEAD method is identical to GET except that the server only returns message-headers in the response, without a message-body.
            </summary>
        </member>
        <member name="F:Cuemon.Net.Http.HttpMethods.Post">
            <summary>
            Represents an HTTP POST protocol method that is used to post a new entity as an addition to a URI.
            </summary>
        </member>
        <member name="F:Cuemon.Net.Http.HttpMethods.Put">
            <summary>
            Represents an HTTP PUT protocol method that is used to replace an entity identified by a URI.
            </summary>
        </member>
        <member name="F:Cuemon.Net.Http.HttpMethods.Delete">
            <summary>
            Represents an HTTP DELETE protocol method.
            </summary>
        </member>
        <member name="F:Cuemon.Net.Http.HttpMethods.Trace">
            <summary>
            Represents an HTTP TRACE protocol method.
            </summary>
        </member>
        <member name="T:Cuemon.Net.Http.NetHttpUtility">
            <summary>
            This utility class is designed to make various HTTP related operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.WebResponseFromAsync(Cuemon.Doer{System.AsyncCallback,System.Object,System.IAsyncResult},Cuemon.Doer{System.IAsyncResult,System.Net.WebResponse},System.Net.HttpWebRequest)">
            <summary>
            Creates a <see cref="T:Cuemon.Threading.AsyncCallResult`2"/> that encapsulates a pair of <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/> and <see cref="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)"/> served like synchronous programming model but with full advantage of the asynchronous programming model pattern.
            </summary>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
            <param name="endMethod">The delegate that ends the asynchronous operation.</param>
            <param name="state">An object containing data to be used by the <paramref name="beginMethod"/> delegate.</param>
            <returns>The created <see cref="T:Cuemon.Threading.AsyncCallResult`2"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.ResponseAsString(System.Net.HttpWebResponse)">
            <summary>
            Creates and returns an UTF-8 encoded <see cref="T:System.String"/> containing the body from the specified <paramref name="response"/>. Default expected <see cref="T:System.Net.HttpStatusCode"/> is <see cref="F:System.Net.HttpStatusCode.OK"/>. Any preamble sequence is preserved.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> to retrieve the <see cref="T:System.String"/> from.</param>
            <returns>A <see cref="T:System.String"/> containing the body of the response.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="response"/> is null.
            </exception>
            <exception cref="T:System.Net.WebException">
            The resulting <see cref="P:System.Net.HttpWebResponse.StatusCode"/> is different from <see cref="F:System.Net.HttpStatusCode.OK"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.ResponseAsString(System.Net.HttpWebResponse,System.Net.HttpStatusCode[])">
            <summary>
            Creates and returns an UTF-8 encoded <see cref="T:System.String"/> containing the body from the specified <paramref name="response"/>. Any preamble sequence is preserved.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> to retrieve the <see cref="T:System.String"/> from.</param>
            <param name="expectedStatusCodes">One or more expected status codes in order to return a <see cref="T:System.String"/>.</param>
            <returns>A <see cref="T:System.String"/> containing the body of the response.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="response"/> is null or<br/>
            <paramref name="expectedStatusCodes"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expectedStatusCodes"/> is empty.
            </exception>
            <exception cref="T:System.Net.WebException">
            The specified <paramref name="expectedStatusCodes"/> did not contain the resulting <see cref="P:System.Net.HttpWebResponse.StatusCode"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.ResponseAsString(System.Net.HttpWebResponse,Cuemon.PreambleSequence,System.Net.HttpStatusCode[])">
            <summary>
            Creates and returns an UTF-8 encoded <see cref="T:System.String"/> containing the body from the specified <paramref name="response"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> to retrieve the <see cref="T:System.String"/> from.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="expectedStatusCodes">One or more expected status codes in order to return a <see cref="T:System.String"/>.</param>
            <returns>A <see cref="T:System.String"/> containing the body of the response.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="response"/> is null or<br/>
            <paramref name="expectedStatusCodes"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expectedStatusCodes"/> is empty.
            </exception>
            <exception cref="T:System.Net.WebException">
            The specified <paramref name="expectedStatusCodes"/> did not contain the resulting <see cref="P:System.Net.HttpWebResponse.StatusCode"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.ResponseAsString(System.Net.HttpWebResponse,Cuemon.PreambleSequence,System.Text.Encoding,System.Net.HttpStatusCode[])">
            <summary>
            Creates and returns a <see cref="T:System.String"/> containing the body from the specified <paramref name="response"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> to retrieve the <see cref="T:System.String"/> from.</param>
            <param name="sequence">Determines whether too keep or remove any preamble sequences.</param>
            <param name="encoding">The preferred encoding to apply to the result.</param>
            <param name="expectedStatusCodes">One or more expected status codes in order to return a <see cref="T:System.String"/>.</param>
            <returns>A <see cref="T:System.String"/> containing the body of the response.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="response"/> is null or<br/>
            <paramref name="expectedStatusCodes"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="expectedStatusCodes"/> is empty.
            </exception>
            <exception cref="T:System.Net.WebException">
            The specified <paramref name="expectedStatusCodes"/> did not contain the resulting <see cref="P:System.Net.HttpWebResponse.StatusCode"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.ResponseAsByteArray(System.Net.HttpWebResponse)">
            <summary>
            Creates and returns a byte array containing the body from the specified <paramref name="response"/>. Default expected <see cref="T:System.Net.HttpStatusCode"/> is <see cref="F:System.Net.HttpStatusCode.OK"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> to retrieve the byte array from.</param>
            <returns>A byte array containing the body of the response.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="response"/> is null.
            </exception>
            <exception cref="T:System.Net.WebException">
            The resulting <see cref="P:System.Net.HttpWebResponse.StatusCode"/> is different from <see cref="F:System.Net.HttpStatusCode.OK"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.ResponseAsByteArray(System.Net.HttpWebResponse,System.Net.HttpStatusCode[])">
            <summary>
            Creates and returns a byte array containing the body from the specified <paramref name="response"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> to retrieve the byte array from.</param>
            <param name="expectedStatusCodes">One or more expected status codes in order to return a byte array.</param>
            <returns>A byte array containing the body of the response.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="response"/> is null or<br/>
            <paramref name="expectedStatusCodes"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="expectedStatusCodes"/> is empty.
            </exception>
            <exception cref="T:System.Net.WebException">
            The specified <paramref name="expectedStatusCodes"/> did not contain the resulting <see cref="P:System.Net.HttpWebResponse.StatusCode"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.ResponseAsStream(System.Net.HttpWebResponse)">
            <summary>
            Creates and returns a seekable <see cref="T:System.IO.Stream"/> containing the body from the specified <paramref name="response"/>. Default expected <see cref="T:System.Net.HttpStatusCode"/> is <see cref="F:System.Net.HttpStatusCode.OK"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> to retrieve the <see cref="T:System.IO.Stream"/> from.</param>
            <returns>A seekable <see cref="T:System.IO.Stream"/> containing the body of the response.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="response"/> is null.
            </exception>
            <exception cref="T:System.Net.WebException">
            The resulting <see cref="P:System.Net.HttpWebResponse.StatusCode"/> is different from <see cref="F:System.Net.HttpStatusCode.OK"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.ResponseAsStream(System.Net.HttpWebResponse,System.Net.HttpStatusCode[])">
            <summary>
            Creates and returns a seekable <see cref="T:System.IO.Stream"/> containing the body from the specified <paramref name="response"/>.
            </summary>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> to retrieve the <see cref="T:System.IO.Stream"/> from.</param>
            <param name="expectedStatusCodes">One or more expected status codes in order to return a seekable response <see cref="T:System.IO.Stream"/>.</param>
            <returns>A seekable <see cref="T:System.IO.Stream"/> containing the body of the response.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="response"/> is null or<br/>
            <paramref name="expectedStatusCodes"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="expectedStatusCodes"/> is empty.
            </exception>
            <exception cref="T:System.Net.WebException">
            The specified <paramref name="expectedStatusCodes"/> did not contain the resulting <see cref="P:System.Net.HttpWebResponse.StatusCode"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified Internet resource <paramref name="request"/>.
            </summary>
            <param name="request">An instance of <see cref="T:System.Net.HttpWebRequest"/>.</param>
            <returns>Returns a HTTP-specific response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.Http(System.String,System.Uri)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified HTTP <paramref name="method"/> and URI <paramref name="location"/>.
            </summary>
            <param name="method">The request method to use to contact the Internet resource.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <returns>Returns a HTTP-specific response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.Http(System.String,System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified HTTP <paramref name="method"/> and URI <paramref name="location"/>.
            </summary>
            <param name="method">The request method to use to contact the Internet resource.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <returns>Returns a HTTP-specific response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.Http(System.String,System.Uri,System.Net.WebHeaderCollection,System.IO.Stream)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified HTTP <paramref name="method"/> and URI <paramref name="location"/>.
            </summary>
            <param name="method">The request method to use to contact the Internet resource.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>Returns a HTTP-specific response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.Http(System.String,System.Uri,System.String,System.IO.Stream)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified HTTP <paramref name="method"/> and URI <paramref name="location"/>.
            </summary>
            <param name="method">The request method to use to contact the Internet resource.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="contentType">The value of the Content-Type HTTP header.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>Returns a HTTP-specific response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpOptions(System.Uri)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Options"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpOptions(System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Options"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpDelete(System.Uri)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Delete"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpDelete(System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Delete"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpTrace(System.Uri)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Trace"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpTrace(System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Trace"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpHead(System.Uri)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Head"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpHead(System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Head"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpGet(System.Uri)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Get"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpGet(System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Get"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpPut(System.Uri,System.String,System.IO.Stream)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="contentType">The value of the Content-Type HTTP header.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Put"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpPut(System.Uri,System.Net.WebHeaderCollection,System.IO.Stream)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Put"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpPost(System.Uri,System.String,System.IO.Stream)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="contentType">The value of the Content-Type HTTP header.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Post"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.HttpPost(System.Uri,System.Net.WebHeaderCollection,System.IO.Stream)">
            <summary>
            Creates and returns a <see cref="T:System.Net.HttpWebResponse"/> from the specified URI <paramref name="location"/>.
            </summary>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>Returns a <see cref="F:Cuemon.Net.Http.HttpMethods.Post"/> response from an Internet resource.</returns>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpDeleteWorkItem(Cuemon.Threading.CountdownEvent,System.Uri)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="location"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpDeleteWorkItem(Cuemon.Threading.CountdownEvent,System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="location"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="headers"/> is an empty collection.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpGetWorkItem(Cuemon.Threading.CountdownEvent,System.Uri)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="location"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpGetWorkItem(Cuemon.Threading.CountdownEvent,System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="location"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="headers"/> is an empty collection.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpPutWorkItem(Cuemon.Threading.CountdownEvent,System.Uri,System.String,System.IO.Stream)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="contentType">The value of the Content-Type HTTP header.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="location"/> is null or<br/>
            <paramref name="contentType"/> is null or<br/>
            <paramref name="content"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="contentType"/> is empty.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpPutWorkItem(Cuemon.Threading.CountdownEvent,System.Uri,System.Net.WebHeaderCollection,System.IO.Stream)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            Default expected <see cref="T:System.Net.HttpStatusCode"/> is <see cref="F:System.Net.HttpStatusCode.OK"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="location"/> is null or<br/>
            <paramref name="content"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="headers"/> is an empty collection.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpPostWorkItem(Cuemon.Threading.CountdownEvent,System.Uri,System.String,System.IO.Stream)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            Default expected <see cref="T:System.Net.HttpStatusCode"/> is <see cref="F:System.Net.HttpStatusCode.OK"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="contentType">The value of the Content-Type HTTP header.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="location"/> is null or<br/>
            <paramref name="contentType"/> is null or<br/>
            <paramref name="content"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="contentType"/> is empty.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpPostWorkItem(Cuemon.Threading.CountdownEvent,System.Uri,System.Net.WebHeaderCollection,System.IO.Stream)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="location"/> is null or<br/>
            <paramref name="content"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="headers"/> is an empty collection.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpWorkItem(Cuemon.Threading.CountdownEvent,System.Net.HttpWebRequest)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="request">An instance of <see cref="T:System.Net.HttpWebRequest"/>.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpWorkItem(Cuemon.Threading.CountdownEvent,System.String,System.Uri)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The request method to use to contact the Internet resource.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="method"/> is null or<br/>
            <paramref name="location"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="method"/> is empty.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpWorkItem(Cuemon.Threading.CountdownEvent,System.String,System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The request method to use to contact the Internet resource.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="method"/> is null or<br/>
            <paramref name="location"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="method"/> is empty.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpWorkItem(Cuemon.Threading.CountdownEvent,System.String,System.Uri,System.Net.WebHeaderCollection,System.IO.Stream)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The request method to use to contact the Internet resource.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="headers">Specifies a collection of the name/value pairs that make up the HTTP headers.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="method"/> is null or<br/>
            <paramref name="location"/> is null or<br/>
            <paramref name="headers"/> is null or<br/>
            <paramref name="content"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="method"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="headers"/> is an empty collection.
            </exception>
        </member>
        <member name="M:Cuemon.Net.Http.NetHttpUtility.CreateHttpWorkItem(Cuemon.Threading.CountdownEvent,System.String,System.Uri,System.String,System.IO.Stream)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will call the <see cref="T:Cuemon.Net.Http.NetHttpUtility"/> associated method signature and invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> where the result is stored in <see cref="P:Cuemon.Threading.DoerWorkItem`1.Result"/>.
            </summary>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The request method to use to contact the Internet resource.</param>
            <param name="location">The URI to retrieve a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <param name="contentType">The value of the Content-Type HTTP header.</param>
            <param name="content">The content value of the HTTP request body.</param>
            <returns>An <see cref="T:Cuemon.Threading.IDoerWorkItem`1"/> implemented object that will invoke <see cref="M:Cuemon.Net.Http.NetHttpUtility.Http(System.Net.HttpWebRequest)"/> from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="synchronization"/> is null or<br/>
            <paramref name="method"/> is null or<br/>
            <paramref name="location"/> is null or<br/>
            <paramref name="contentType"/> is null or<br/>
            <paramref name="content"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="method"/> is empty or <br/>
            <paramref name="contentType"/> is empty.
            </exception>
        </member>
        <member name="P:Cuemon.Net.Http.NetHttpUtility.DefaultHttpTimeout">
            <summary>
            Gets or sets the default HTTP timeout value as a <see cref="T:System.TimeSpan"/> for <see cref="T:System.Net.HttpWebRequest"/> and <see cref="T:System.Net.HttpWebResponse"/> related operations. Default is 5 minutes.
            </summary>
            <value>The default HTTP timeout value as a <see cref="T:System.TimeSpan"/>.</value>
        </member>
        <member name="T:Cuemon.Net.ServicePointManagerUtility">
            <summary>
            This utility class is designed to make some service point manager operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Net.ServicePointManagerUtility.ValidateRemoteCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Verifies the remote Secure Sockets Layer (SSL) certificate used for authentication.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="certificate">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
            <param name="policyErrors">One or more errors associated with the remote certificate.</param>
            <returns>A <see cref="T:System.Boolean"/> value that determines whether the specified certificate is accepted for authentication.</returns>
            <remarks>This callback method follow the <see cref="P:Cuemon.Net.ServicePointManagerUtility.EnableServerCertificateValidation"/> setting.</remarks>
        </member>
        <member name="P:Cuemon.Net.ServicePointManagerUtility.EnableServerCertificateValidation">
            <summary>
            Gets or sets a value indicating whether validation of server certificates (SSL/TLS) is enabled.
            </summary>
            <value>
            	<c>true</c> if validation of server certificates (SSL/TLS) is enabled; otherwise, <c>false</c>.
            </value>
            <remarks>Default value is <c>true</c>. Be advised, that you should only disable this in case of self-signed certificates for internal testing.</remarks>
        </member>
        <member name="T:Cuemon.ReferenceComparer`1">
            <summary>
            Provides object hierarchy comparison.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="M:Cuemon.ReferenceComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of x and y, as explained here: Less than zero - x is less than y. Zero - x equals y. Greater than zero - x is greater than y.
            </returns>
        </member>
        <member name="P:Cuemon.ReferenceComparer`1.Default">
            <summary>
            Returns a default comparer for the type specified by the generic argument.
            </summary>
        </member>
        <member name="T:Cuemon.Globalization.Currency">
            <summary>
            Represents a currency information.
            </summary>
        </member>
        <member name="P:Cuemon.Globalization.Currency.IsoCode">
            <summary>
            Gets the numeric ISO 4217 code of this <see cref="T:Cuemon.Globalization.Currency"/>.
            </summary>
        </member>
        <member name="P:Cuemon.Globalization.Currency.EnglishName">
            <summary>
            Gets the currency name, in English, of this <see cref="T:Cuemon.Globalization.Currency"/>.
            </summary>
        </member>
        <member name="P:Cuemon.Globalization.Currency.NativeName">
            <summary>
            Gets the localized name of this <see cref="T:Cuemon.Globalization.Currency"/>. 
            </summary>
        </member>
        <member name="P:Cuemon.Globalization.Currency.Symbol">
            <summary>
            Gets the localized symbol of this <see cref="T:Cuemon.Globalization.Currency"/>.
            </summary>
            <value>The localized symbol of this <see cref="T:Cuemon.Globalization.Currency"/>.</value>
        </member>
        <member name="P:Cuemon.Globalization.Currency.ThreeLetterIsoCode">
            <summary>
            Gets the three-letter ISO 4217 code of this <see cref="T:Cuemon.Globalization.Currency"/>.
            </summary>
        </member>
        <member name="T:Cuemon.Globalization.GlobalizationUtility">
            <summary>
            This utility class is designed to make Globalization related operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Globalization.GlobalizationUtility.GetCurrency(System.String)">
            <summary>
            Gets a <see cref="T:Cuemon.Globalization.Currency"/> instance.
            </summary>
            <param name="threeLetterIsoCode">A three-letter ISO 4217 code.</param>
            <returns>A <see cref="T:Cuemon.Globalization.Currency"/> object.</returns>
        </member>
        <member name="M:Cuemon.Globalization.GlobalizationUtility.GetCurrency(System.Int32)">
            <summary>
            Gets a <see cref="T:Cuemon.Globalization.Currency"/> instance.
            </summary>
            <param name="isoCode">A numeric ISO 4217 code.</param>
            <returns>A <see cref="T:Cuemon.Globalization.Currency"/> object.</returns>
        </member>
        <member name="M:Cuemon.Globalization.GlobalizationUtility.HasCurrency(System.String)">
            <summary>
            Determines whether the specified three-letter ISO 4217 code is represented by this framework.
            </summary>
            <param name="threeLetterIsoCode">The three-letter ISO 4217 code.</param>
            <returns>
              <c>true</c> if the specified three-letter ISO 4217 code is represented by this framework; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.Globalization.GlobalizationUtility.HasCurrency(System.Int32)">
            <summary>
            Determines whether the specified numeric ISO 4217 code is represented by this framework.
            </summary>
            <param name="isoCode">The numeric ISO 4217 code.</param>
            <returns>
              <c>true</c> if the specified numeric ISO 4217 code is represented by this framework; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.Globalization.GlobalizationUtility.GetCurrencies">
            <summary>
            Gets a filtered list of region-specific ISO 4217 compatible currencies.
            </summary>
            <returns>A filtered list of region-specific ISO 4217 compatible currencies.</returns>
        </member>
        <member name="T:Cuemon.Reflection.ParameterSignature">
            <summary>
            Represent the signature of a parameter to a method, property or similar.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.ParameterSignature.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.ParameterSignature"/> class.
            </summary>
            <param name="parameterType">The type of the parameter.</param>
            <param name="parameterName">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameterType"/> is null or <br/>
            <paramref name="parameterName"/> is null.
            </exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">
            <paramref name="parameterName"/> is empty.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.ParameterSignature.Parse(System.Reflection.MethodBase)">
            <summary>
            Extracts and converts the <see cref="T:System.Reflection.ParameterInfo"/> sequence to its <see cref="T:System.Collections.Generic.IEnumerable`1"/> equivalent from <see cref="M:System.Reflection.MethodBase.GetParameters"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/> to extract parameter information from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that is equivalent to the <see cref="T:System.Reflection.ParameterInfo"/> sequence in <see cref="M:System.Reflection.MethodBase.GetParameters"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="method"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.ParameterSignature.Parse(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Converts the specified <see cref="T:System.Reflection.ParameterInfo"/> sequence to its <see cref="T:System.Collections.Generic.IEnumerable`1"/> equivalent.
            </summary>
            <param name="parameters">A sequence of <see cref="T:System.Reflection.ParameterInfo"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that is equivalent to the <see cref="T:System.Reflection.ParameterInfo"/> sequence.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parameters"/> is null.
            </exception>
        </member>
        <member name="P:Cuemon.Reflection.ParameterSignature.ParameterType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the parameter.
            </summary>
            <value>The <see cref="T:System.Type"/> of the parameter.</value>
        </member>
        <member name="P:Cuemon.Reflection.ParameterSignature.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name of the parameter.</value>
        </member>
        <member name="T:Cuemon.Reflection.PropertyEqualityComparer`1">
            <summary>
            Provides an equality comparison for <see cref="T:System.Reflection.PropertyInfo"/> objects.
            </summary>
        </member>
        <member name="M:Cuemon.Reflection.PropertyEqualityComparer`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Reflection.PropertyEqualityComparer`1"/> class.
            </summary>
            <param name="propertyName">Name of the property on <typeparamref name="T"/> to perform the comparison.</param>
        </member>
        <member name="M:Cuemon.Reflection.PropertyEqualityComparer`1.Equals(`0,`0)">
            <summary>
            When overridden in a derived class, determines whether two objects of type T are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Cuemon.Reflection.PropertyEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="P:Cuemon.Reflection.PropertyEqualityComparer`1.Default">
            <summary>
            Returns a default equality comparer for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility">
            <summary>
            This utility class is designed to make <see cref="T:System.Security.Cryptography.Rijndael"/> operations easier to work with.
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.BlockSize">
            <summary>
            Gets the block size (bits) for the Advanced Encryption Standard (AES)
            </summary>
        </member>
        <member name="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.GenerateInitializationVector">
            <summary>
            Generates a random 128 bit initialization vector (IV) to be used for the algorithm.
            </summary>
            <returns>A random 128 bit generated initialization vector (IV).</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.GenerateKey(Cuemon.Security.Cryptography.AdvancedEncryptionStandardKeySize)">
            <summary>
            Generates a random key to be used for the algorithm.
            </summary>
            <param name="keySize">The size of the key.</param>
            <returns>A random generated key with the specified <paramref name="keySize"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts the specified value from the provided <paramref name="key"/> and <paramref name="initializationVector"/>.
            </summary>
            <param name="value">The value to encrypt.</param>
            <param name="key">The key to use in the encryption algorithm.</param>
            <param name="initializationVector">The initialization vector (IV) to use in the encryption algorithm.</param>
            <returns>The encrypted value.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts the specified value from the provided <paramref name="key"/> and <paramref name="initializationVector"/>.
            </summary>
            <param name="value">The value to decrypt.</param>
            <param name="key">The key to use in the decryption algorithm.</param>
            <param name="initializationVector">The initialization vector (IV) to use in the decryption algorithm.</param>
            <returns>The decrypted value.</returns>
        </member>
        <member name="T:Cuemon.Security.Cryptography.AdvancedEncryptionStandardKeySize">
            <summary>
            Specifies the key size to be used in the Advanced Encryption Standard (AES) cipher.
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.AdvancedEncryptionStandardKeySize.AES128">
            <summary>
            A key size of 128 bit.
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.AdvancedEncryptionStandardKeySize.AES192">
            <summary>
            A key size of 192 bit.
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.AdvancedEncryptionStandardKeySize.AES256">
            <summary>
            A key size of 256 bit.
            </summary>
        </member>
        <member name="T:Cuemon.Security.SecurityToken">
            <summary>
            Represents a simple security token schematic.
            </summary>
        </member>
        <member name="M:Cuemon.Security.SecurityToken.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.SecurityToken"/> class.
            </summary>
            <param name="timeToLive">The amount of time this token remains usable.</param>
        </member>
        <member name="M:Cuemon.Security.SecurityToken.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.SecurityToken"/> class.
            </summary>
            <param name="timeToLive">The amount of time this token remains usable.</param>
            <param name="lengthOfToken">The length of the random generated token. Default is 24.</param>
        </member>
        <member name="M:Cuemon.Security.SecurityToken.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Security.SecurityToken"/> class.
            </summary>
            <param name="securityToken">The security token as XML.</param>
        </member>
        <member name="M:Cuemon.Security.SecurityToken.Create(System.TimeSpan)">
            <summary>
            Creates and returns a new <see cref="T:Cuemon.Security.SecurityToken"/> from the specified <paramref name="timeToLive"/>.
            </summary>
            <param name="timeToLive">The amount of time this token remains usable.</param>
            <returns>A new <see cref="T:Cuemon.Security.SecurityToken"/> instance.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityToken.Create(System.TimeSpan,System.Int32)">
            <summary>
            Creates and returns a new <see cref="T:Cuemon.Security.SecurityToken"/> from the specified <paramref name="timeToLive"/>.
            </summary>
            <param name="timeToLive">The amount of time the token remains usable.</param>
            <param name="lengthOfToken">The length of the random generated token.</param>
            <returns>A new <see cref="T:Cuemon.Security.SecurityToken"/> instance.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityToken.Parse(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> representation to its <see cref="T:Cuemon.Security.SecurityToken"/> equivalent.
            </summary>
            <param name="securityToken">The <see cref="T:Cuemon.Security.SecurityToken"/> equivalent created by <see cref="M:Cuemon.Security.SecurityToken.ToString"/>.</param>
            <returns>A <see cref="T:Cuemon.Security.SecurityToken"/> instance.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityToken.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in the following XML format: &lt;Token ttl="x" created="y"&gt;token&lt;Token&gt;.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance in the following XML format: &lt;Token ttl="x" created="y"&gt;token&lt;Token&gt;.
            </returns>
        </member>
        <member name="P:Cuemon.Security.SecurityToken.TimeToLive">
            <summary>
            Gets or sets the amount of time to keep this <see cref="T:Cuemon.Security.SecurityToken"/> alive.
            </summary>
            <value>
            The amount of time to keep this <see cref="T:Cuemon.Security.SecurityToken"/> alive.
            </value>
        </member>
        <member name="P:Cuemon.Security.SecurityToken.UtcCreated">
            <summary>
            Gets the UTC date time value from when this instance was created.
            </summary>
        </member>
        <member name="P:Cuemon.Security.SecurityToken.Token">
            <summary>
            Gets the token of this <see cref="T:Cuemon.Security.SecurityToken"/>.
            </summary>
        </member>
        <member name="P:Cuemon.Security.SecurityToken.HasExpired">
            <summary>
            Gets a value indicating whether this <see cref="T:Cuemon.Security.SecurityToken"/> has expired.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Cuemon.Security.SecurityToken"/> has expired; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cuemon.Security.SecurityUtility">
            <summary>
            This utility class is designed to make security operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Security.SecurityUtility.CreateEncryptedSecurityToken(System.TimeSpan,System.String,System.String)">
            <summary>
            Creates a security token easily adopted into various services in the format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.
            The token itself is encrypted using the <see cref="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Encrypt(System.Byte[],System.Byte[],System.Byte[])"/>
            </summary>
            <param name="timeToLive">The amount of time to keep this token alive.</param>
            <param name="securityKey">The key to use in the encryption algorithm.</param>
            <param name="securityInitializationVector">The initialization vector (IV) to use in the encryption algorithm.</param>
            <returns>A security token easily adopted into various services in the format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityUtility.CreateEncryptedSecurityToken(System.TimeSpan,System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a security token easily adopted into various services in the format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.
            The token itself is encrypted using the <see cref="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Encrypt(System.Byte[],System.Byte[],System.Byte[])"/>
            </summary>
            <param name="timeToLive">The amount of time to keep this token alive.</param>
            <param name="securityKey">The key to use in the encryption algorithm.</param>
            <param name="securityInitializationVector">The initialization vector (IV) to use in the encryption algorithm.</param>
            <param name="encoding">The encoding used for the <paramref name="securityKey"/> and <paramref name="securityInitializationVector"/>. Default is <see cref="P:System.Text.Encoding.UTF8"/>.</param>
            <returns>A security token easily adopted into various services in the following XML format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityUtility.CreateEncryptedSecurityToken(Cuemon.Security.SecurityToken,System.String,System.String)">
            <summary>
            Creates a security token easily adopted into various services in the format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.
            The token itself is encrypted using the <see cref="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Encrypt(System.Byte[],System.Byte[],System.Byte[])"/>
            </summary>
            <param name="token">The <see cref="T:Cuemon.Security.SecurityToken"/> to convert and encrypt to a byte[] representation.</param>
            <param name="securityKey">The key to use in the encryption algorithm.</param>
            <param name="securityInitializationVector">The initialization vector (IV) to use in the encryption algorithm.</param>
            <returns>A security token easily adopted into various services in the format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityUtility.CreateEncryptedSecurityToken(Cuemon.Security.SecurityToken,System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a security token easily adopted into various services in the format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.
            The token itself is encrypted using the <see cref="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Encrypt(System.Byte[],System.Byte[],System.Byte[])"/>
            </summary>
            <param name="token">The <see cref="T:Cuemon.Security.SecurityToken"/> to convert and encrypt to a byte[] representation.</param>
            <param name="securityKey">The key to use in the encryption algorithm.</param>
            <param name="securityInitializationVector">The initialization vector (IV) to use in the encryption algorithm.</param>
            <param name="encoding">The encoding used for the <paramref name="securityKey"/> and <paramref name="securityInitializationVector"/>. Default is <see cref="P:System.Text.Encoding.UTF8"/>.</param>
            <returns>A security token easily adopted into various services in the following XML format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityUtility.CreateEncryptedSecurityToken(System.TimeSpan,System.Byte[],System.Byte[])">
            <summary>
            Creates a security token easily adopted into various services in the format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.
            The token itself is encrypted using the <see cref="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Encrypt(System.Byte[],System.Byte[],System.Byte[])"/> method.
            </summary>
            <param name="timeToLive">The amount of time to keep this token alive.</param>
            <param name="securityKey">The key to use in the encryption algorithm.</param>
            <param name="securityInitializationVector">The initialization vector (IV) to use in the encryption algorithm.</param>
            <returns>A security token easily adopted into various services in the format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityUtility.CreateEncryptedSecurityToken(Cuemon.Security.SecurityToken,System.Byte[],System.Byte[])">
            <summary>
            Creates a security token easily adopted into various services in the format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.
            The token itself is encrypted using the <see cref="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Encrypt(System.Byte[],System.Byte[],System.Byte[])"/> method.
            </summary>
            <param name="token">The <see cref="T:Cuemon.Security.SecurityToken"/> to convert and encrypt to a byte[] representation.</param>
            <param name="securityKey">The key to use in the encryption algorithm.</param>
            <param name="securityInitializationVector">The initialization vector (IV) to use in the encryption algorithm.</param>
            <returns>A security token easily adopted into various services in the format of the <see cref="M:Cuemon.Security.SecurityToken.ToString"/> method.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityUtility.ParseEncryptedSecurityToken(System.Byte[],System.String,System.String)">
            <summary>
            Creates a <see cref="T:Cuemon.Security.SecurityToken"/> instance from the parsed encrypted <paramref name="securityToken"/>.
            The token itself is decrypted using the <see cref="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Decrypt(System.Byte[],System.Byte[],System.Byte[])"/> method.
            </summary>
            <param name="securityToken">The security token to parse.</param>
            <param name="securityKey">The key to use in the decryption algorithm.</param>
            <param name="securityInitializationVector">The initialization vector (IV) to use in the decryption algorithm.</param>
            <returns>An instance of the <see cref="T:Cuemon.Security.SecurityToken"/> object.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityUtility.ParseEncryptedSecurityToken(System.Byte[],System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a <see cref="T:Cuemon.Security.SecurityToken"/> instance from the parsed encrypted <paramref name="securityToken"/>.
            The token itself is decrypted using the <see cref="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Decrypt(System.Byte[],System.Byte[],System.Byte[])"/> method.
            </summary>
            <param name="securityToken">The security token to parse.</param>
            <param name="securityKey">The key to use in the decryption algorithm.</param>
            <param name="securityInitializationVector">The initialization vector (IV) to use in the decryption algorithm.</param>
            <param name="encoding">The encoding used for the <paramref name="securityKey"/> and <paramref name="securityInitializationVector"/>. Default is <see cref="P:System.Text.Encoding.UTF8"/>.</param>
            <returns>An instance of the <see cref="T:Cuemon.Security.SecurityToken"/> object.</returns>
        </member>
        <member name="M:Cuemon.Security.SecurityUtility.ParseEncryptedSecurityToken(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Creates a <see cref="T:Cuemon.Security.SecurityToken"/> instance from the parsed encrypted <paramref name="securityToken"/>.
            The token itself is decrypted using the <see cref="M:Cuemon.Security.Cryptography.AdvancedEncryptionStandardUtility.Decrypt(System.Byte[],System.Byte[],System.Byte[])"/> method.
            </summary>
            <param name="securityToken">The security token to parse.</param>
            <param name="securityKey">The key to use in the decryption algorithm.</param>
            <param name="securityInitializationVector">The initialization vector (IV) to use in the decryption algorithm.</param>
            <returns>An instance of the <see cref="T:Cuemon.Security.SecurityToken"/> object.</returns>
        </member>
        <member name="T:Cuemon.StringReplacePair">
            <summary>
            Defines a oldValue/newValue pair that can be set or retrieved for string replace operations.
            </summary>
        </member>
        <member name="M:Cuemon.StringReplacePair.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.StringReplacePair"/> struct.
            </summary>
            <param name="oldValue">The <see cref="T:System.String"/> value to be replaced.</param>
            <param name="newValue">The <see cref="T:System.String"/> value to replace all occurrences of <paramref name="oldValue"/>.</param>
        </member>
        <member name="M:Cuemon.StringReplacePair.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.Equals(Cuemon.StringReplacePair)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.op_Equality(Cuemon.StringReplacePair,Cuemon.StringReplacePair)">
            <summary>
            Indicates whether two <see cref="T:Cuemon.StringReplacePair"/> instances are equal.
            </summary>
            <param name="replacePair1">The first date interval to compare.</param>
            <param name="replacePair2">The second date interval to compare.</param>
            <returns><c>true</c> if the values of <paramref name="replacePair1"/> and <paramref name="replacePair2"/> are equal; otherwise, false. </returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.op_Inequality(Cuemon.StringReplacePair,Cuemon.StringReplacePair)">
            <summary>
            Indicates whether two <see cref="T:Cuemon.DateSpan"/> instances are not equal.
            </summary>
            <param name="replacePair1">The first date interval to compare.</param>
            <param name="replacePair2">The second date interval to compare.</param>
            <returns><c>true</c> if the values of <paramref name="replacePair1"/> and <paramref name="replacePair2"/> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Cuemon.StringReplacePair.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Cuemon.StringReplacePair"/>, using the string representations of the oldValue and newValue.
            </summary>
            <returns>A string representation of the <see cref="T:Cuemon.StringReplacePair"/>, which includes the string representations of the oldValue and newValue.</returns>
            <remarks>The string representation consists of the string representations of the oldValue and newValue, separated by a comma and a space, and enclosed in square brackets. For example, the ToString method for a <see cref="T:Cuemon.StringReplacePair"/> structure with the string OldValue "Test1" and the string NewValue "Test2" returns the string "[Test1, Test2]".</remarks>
        </member>
        <member name="P:Cuemon.StringReplacePair.OldValue">
            <summary>
            Gets the <see cref="T:System.String"/> value to be replaced.
            </summary>
            <value>The <see cref="T:System.String"/> value to be replaced.</value>
        </member>
        <member name="P:Cuemon.StringReplacePair.NewValue">
            <summary>
            Gets the <see cref="T:System.String"/> value to replace all occurrences of <see cref="P:Cuemon.StringReplacePair.OldValue"/>.
            </summary>
            <value>The <see cref="T:System.String"/> value to replace all occurrences of <see cref="P:Cuemon.StringReplacePair.OldValue"/>.</value>
        </member>
        <member name="T:Cuemon.Annotations.ValidationException">
            <summary>
            The exception that is thrown when a validation rule is not meet; either automatic in conjunction with the <see cref="T:Cuemon.Annotations.ValidationAttribute"/> class or manually.
            </summary>
        </member>
        <member name="M:Cuemon.Annotations.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Annotations.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Annotations.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Annotations.ValidationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.Annotations.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Annotations.ValidationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Cuemon.Annotations.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Annotations.ValidationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Cuemon.Threading.AsyncCall`2">
            <summary>
            Provides a way of encapsulating asynchronous operations using a synchronous programming model.
            </summary>
            <typeparam name="TState">The type of the return value of <see cref="P:Cuemon.Threading.AsyncCall`1.AsyncState"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of <see cref="P:Cuemon.Threading.AsyncCall`2.Result"/>.</typeparam>
        </member>
        <member name="T:Cuemon.Threading.AsyncCall`1">
            <summary>
            Provides a way of encapsulating asynchronous operations using a synchronous programming model.
            </summary>
            <typeparam name="TState">The type of the return value of <see cref="P:Cuemon.Threading.AsyncCall`1.AsyncState"/>.</typeparam>
        </member>
        <member name="T:Cuemon.Threading.AsyncCall">
            <summary>
            Provides a way of encapsulating asynchronous operations using a synchronous programming model.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall.#ctor(Cuemon.Doer{System.AsyncCallback,System.Object,System.IAsyncResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.AsyncCall"/> class.
            </summary>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall.#ctor(Cuemon.Doer{System.AsyncCallback,System.Object,System.IAsyncResult},Cuemon.Act{System.IAsyncResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.AsyncCall"/> class.
            </summary>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
            <param name="endMethod">The delegate that ends the asynchronous operation.</param>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:Cuemon.Threading.AsyncCall`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall.Invoke">
            <summary>
            Invokes the asynchronous operation.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall.Invoke(System.TimeSpan)">
            <summary>
            Invokes the asynchronous operation.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait for the asynchronous operation to complete.</param>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall.AsyncCallback(System.IAsyncResult)">
            <summary>
            The method to be called when a corresponding asynchronous operation completes.
            </summary>
            <param name="result">The result of the asynchronous operation.</param>
            <remarks>This method signals the <see cref="P:Cuemon.Threading.AsyncCall.Syncronization"/> object and thereby resumes the current thread.</remarks>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall.Exception">
            <summary>
            Gets the <see cref="P:Cuemon.Threading.AsyncCall.Exception"/> that caused the <see cref="T:Cuemon.Threading.AsyncCall"/> to end prematurely. If the <see cref="T:Cuemon.Threading.AsyncCall"/> completed successfully or has not yet thrown any exceptions, this will return null.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall.AsyncResult">
            <summary>
            Gets or sets the asynchronous result from <see cref="M:Cuemon.Threading.AsyncCall.AsyncCallback(System.IAsyncResult)"/>.
            </summary>
            <value>
            The asynchronous result produced from <see cref="M:Cuemon.Threading.AsyncCall.AsyncCallback(System.IAsyncResult)"/>.
            </value>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <returns>A <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</returns>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall.CompletedSynchronously">
            <summary>
            Gets a value that indicates whether the asynchronous operation completed synchronously.
            </summary>
            <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed.
            </summary>
            <returns>true if the operation is complete; otherwise, false.
              </returns>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall.Syncronization">
            <summary>
            Gets or sets the synchronization.
            </summary>
            <value>
            The synchronization.
            </value>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall.BeginMethod">
            <summary>
            A reference to the delegate that begins the asynchronous operation.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall.EndMethod">
            <summary>
            A reference to the delegate that ends the asynchronous operation.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall`1.#ctor(Cuemon.Doer{System.AsyncCallback,System.Object,System.IAsyncResult},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.AsyncCall`1"/> class.
            </summary>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
            <param name="state">An object containing data to be used by the <paramref name="beginMethod"/> delegate.</param>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall`1.#ctor(Cuemon.Doer{System.AsyncCallback,System.Object,System.IAsyncResult},Cuemon.Act{System.IAsyncResult},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.AsyncCall`1"/> class.
            </summary>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
            <param name="endMethod">The delegate that ends the asynchronous operation.</param>
            <param name="state">An object containing data to be used by the <paramref name="beginMethod"/> delegate.</param>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall`1.Invoke(System.TimeSpan)">
            <summary>
            Invokes the asynchronous operation.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the time to wait for the asynchronous operation to complete.</param>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall`1.AsyncState">
            <summary>
            Gets a user-defined <typeparamref name="TState"/> that qualifies or contains information about an asynchronous operation.
            </summary>
            <returns>A user-defined <typeparamref name="TState"/> that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall`2.#ctor(Cuemon.Doer{System.AsyncCallback,System.Object,System.IAsyncResult},Cuemon.Doer{System.IAsyncResult,`1},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.AsyncCall`2"/> class.
            </summary>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param>
            <param name="endMethod">The delegate that ends the asynchronous operation.</param>
            <param name="state">An object containing data to be used by the <paramref name="beginMethod"/> delegate.</param>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall`2.ToAsyncCallResult">
            <summary>
            Creates and returns a <see cref="T:Cuemon.Threading.AsyncCallResult`2"/> representation of the current <see cref="T:Cuemon.Threading.AsyncCall`2"/>.
            </summary>
            <returns>A <see cref="T:Cuemon.Threading.AsyncCallResult`2"/> representation of the current <see cref="T:Cuemon.Threading.AsyncCall`2"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AsyncCall`2.AsyncCallback(System.IAsyncResult)">
            <summary>
            The method to be called when a corresponding asynchronous operation completes.
            </summary>
            <param name="result">The result of the asynchronous operation.</param>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall`2.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.AsyncCall`2.EndMethod">
            <summary>
            A reference to the delegate that ends the asynchronous operation.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.AsyncCallResult`2">
            <summary>
            A class designed to encapsulate the result of an asynchronous operation.
            </summary>
            <typeparam name="TState">The type of the return value of <see cref="P:Cuemon.Threading.AsyncCallResult`2.AsyncState"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of <see cref="P:Cuemon.Threading.AsyncCallResult`2.Result"/>.</typeparam>
        </member>
        <member name="M:Cuemon.Threading.AsyncCallResult`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.AsyncCallResult`2"/> class.
            </summary>
            <param name="state">The state that qualifies or contains information about an asynchronous operation.</param>
            <param name="result">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Cuemon.Threading.AsyncCallResult`2.ResultAs``1">
            <summary>
            Gets the result of the asynchronous operation and cast it as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to return the <see cref="P:Cuemon.Threading.AsyncCallResult`2.Result"/> as.</typeparam>
            <returns>The value of the <see cref="P:Cuemon.Threading.AsyncCallResult`2.Result"/> cast as the <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.AsyncCallResult`2.ResultAs``1(`1)">
            <summary>
            Gets the result of the asynchronous operation and cast it as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to return the <see cref="P:Cuemon.Threading.AsyncCallResult`2.Result"/> as.</typeparam>
            <param name="result">The result of the asynchronous operation.</param>
            <returns>The value of the <see cref="P:Cuemon.Threading.AsyncCallResult`2.Result"/> cast as the <typeparamref name="T"/>.</returns>
        </member>
        <member name="P:Cuemon.Threading.AsyncCallResult`2.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <returns>
            A user-defined object that qualifies or contains information about an asynchronous operation.
              </returns>
        </member>
        <member name="P:Cuemon.Threading.AsyncCallResult`2.Result">
            <summary>
            Gets the result of the asynchronous operation.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.AsyncCallResult`2.Exception">
            <summary>
            Gets the <see cref="P:Cuemon.Threading.AsyncCallResult`2.Exception"/> that caused the <see cref="T:Cuemon.Threading.AsyncCall`2"/> to end prematurely. If the <see cref="T:Cuemon.Threading.AsyncCall`2"/> completed successfully or has not yet thrown any exceptions, this will return null.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.ActFactoryWorkItem.Synchronization">
            <summary>
            Gets an instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.ISortedDoerWorkItem`2">
            <summary>
            Defines a way to control work operations that returns a value on a per thread basis where the sorted result applies to <typeparamref name="TKey"/>.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.ISortedDoerWorkItem`2.SortOrder">
            <summary>
            Gets the <typeparamref name="TKey"/> that represents the sort order value.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.DoerFactorySortedWorkItem`2.Result">
            <summary>
            Gets the result of the work processed in <see cref="M:Cuemon.Threading.DoerFactorySortedWorkItem`2.ProcessWork"/>.
            </summary>
            <value>The result of the work processed in <see cref="M:Cuemon.Threading.DoerFactorySortedWorkItem`2.ProcessWork"/>.</value>
        </member>
        <member name="P:Cuemon.Threading.DoerFactorySortedWorkItem`2.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about this class.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.DoerFactorySortedWorkItem`2.Synchronization">
            <summary>
            Gets an instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.DoerFactorySortedWorkItem`2.SortOrder">
            <summary>
            Gets the <typeparamref name="TKey"/> that represents the sort order value.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.SortedDoerWorkItem`2">
            <summary>
            An abstract class providing a way for outsourcing thread intensive work to a <see cref="T:Cuemon.Threading.ISortedDoerWorkItemPool`2"/> implemented class.
            </summary>
            <typeparam name="TKey">The type of the key used to determine the sort order.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Cuemon.Threading.SortedDoerWorkItem`2.#ctor(`0,Cuemon.Threading.CountdownEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.SortedDoerWorkItem`2"/> class.
            </summary>
            <param name="sortOrder">The object that represents the sort order value.</param>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
        </member>
        <member name="P:Cuemon.Threading.SortedDoerWorkItem`2.SortOrder">
            <summary>
            Gets the object that represents the sort order value.
            </summary>
            <value>A <typeparamref name="TKey"/> that is the sort order value.</value>
        </member>
        <member name="P:Cuemon.Threading.DoerFactoryWorkItem`1.Result">
            <summary>
            Gets the result of the work processed in <see cref="M:Cuemon.Threading.DoerFactoryWorkItem`1.ProcessWork"/>.
            </summary>
            <value>The result of the work processed in <see cref="M:Cuemon.Threading.DoerFactoryWorkItem`1.ProcessWork"/>.</value>
        </member>
        <member name="P:Cuemon.Threading.DoerFactoryWorkItem`1.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about this class.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.DoerFactoryWorkItem`1.Synchronization">
            <summary>
            Gets an instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.SortedFuncWorkItem">
            <summary>
            Provides static helper methods for function delegates based on <see cref="T:Cuemon.Threading.ISortedDoerWorkItem`2"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.SortedFuncWorkItem.Create``2(``0,Cuemon.Threading.CountdownEvent,Cuemon.Doer{``1})">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.ISortedDoerWorkItem`2"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="TKey">The type of the key used to determine the sort order.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="sortOrder">The object that represents the sort order value.</param>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.SortedFuncWorkItem.Create``3(``0,Cuemon.Threading.CountdownEvent,Cuemon.Doer{``1,``2},``1)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.ISortedDoerWorkItem`2"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TKey">The type of the key used to determine the sort order.</typeparam>
            <param name="sortOrder">The object that represents the sort order value.</param>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <param name="arg">The parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.SortedFuncWorkItem.Create``4(``0,Cuemon.Threading.CountdownEvent,Cuemon.Doer{``1,``2,``3},``1,``2)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.ISortedDoerWorkItem`2"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TKey">The type of the key used to determine the sort order.</typeparam>
            <param name="sortOrder">The object that represents the sort order value.</param>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.SortedFuncWorkItem.Create``5(``0,Cuemon.Threading.CountdownEvent,Cuemon.Doer{``1,``2,``3,``4},``1,``2,``3)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.ISortedDoerWorkItem`2"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TKey">The type of the key used to determine the sort order.</typeparam>
            <param name="sortOrder">The object that represents the sort order value.</param>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.SortedFuncWorkItem.Create``6(``0,Cuemon.Threading.CountdownEvent,Cuemon.Doer{``1,``2,``3,``4,``5},``1,``2,``3,``4)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.ISortedDoerWorkItem`2"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TKey">The type of the key used to determine the sort order.</typeparam>
            <param name="sortOrder">The object that represents the sort order value.</param>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="M:Cuemon.Threading.SortedFuncWorkItem.Create``7(``0,Cuemon.Threading.CountdownEvent,Cuemon.Doer{``1,``2,``3,``4,``5,``6},``1,``2,``3,``4,``5)">
            <summary>
            Creates and returns an <see cref="T:Cuemon.Threading.ISortedDoerWorkItem`2"/> implemented object that will invoke the specified <paramref name="method"/>.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TKey">The type of the key used to determine the sort order.</typeparam>
            <param name="sortOrder">The object that represents the sort order value.</param>
            <param name="synchronization">An instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> object used for threaded synchronization signaling.</param>
            <param name="method">The method to call from the associated <see cref="T:Cuemon.Threading.DoerWorkItemPool`1"/>.</param>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <returns>An <see cref="T:Cuemon.Threading.IActWorkItem"/> implemented object that will invoke the specified <paramref name="method"/> from the associated <see cref="T:Cuemon.Threading.ActWorkItemPool"/>.</returns>
        </member>
        <member name="T:Cuemon.Threading.CountdownEvent">
            <summary>
            Represents a synchronization primitive that is signaled when its count reaches zero.
            </summary>
            <remarks>This class was inspired by the newly introduced CountdownEvent in .NET 4.0, and I think .NET 2.0 users should benefit from this lightweight implementation.</remarks>
        </member>
        <member name="M:Cuemon.Threading.CountdownEvent.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.CountdownEvent"/> class.
            </summary>
            <param name="initialCount">The number of signals initially required to set the <see cref="T:Cuemon.Threading.CountdownEvent"/>.</param>
        </member>
        <member name="M:Cuemon.Threading.CountdownEvent.AddCount(System.Int32)">
            <summary>
            Increments the <see cref="P:Cuemon.Threading.CountdownEvent.CurrentCount"/> by a specified value.
            </summary>
            <param name="signalCount">The value by which to increase <see cref="P:Cuemon.Threading.CountdownEvent.CurrentCount"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="signalCount"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <see cref="P:Cuemon.Threading.CountdownEvent.CurrentCount"/> is equal to or greater than <see cref="F:System.Int32.MaxValue"/> after count is incremented by <paramref name="signalCount"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Threading.CountdownEvent.Signal">
            <summary>
            Registers a signal with the CountdownEvent, decrementing the value of CurrentCount.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.CountdownEvent.Wait">
            <summary>
            Blocks the current thread until the <see cref="T:Cuemon.Threading.CountdownEvent"/> is set.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.CountdownEvent.Wait(System.TimeSpan)">
            <summary>
            Blocks the current thread until the <see cref="T:Cuemon.Threading.CountdownEvent"/> is set, using a <see cref="T:System.TimeSpan"/> to measure the timeout. Default is 30 seconds.
            </summary>
            <param name="timeout">A <see cref="T:System.TimeSpan"/> that represents the time to wait.</param>
        </member>
        <member name="M:Cuemon.Threading.CountdownEvent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cuemon.Threading.CountdownEvent.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.CountdownEvent.IsSet">
            <summary>
            Determines whether the event is set.
            </summary>
            <returns>
                <c>true</c> if the event is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Cuemon.Threading.CountdownEvent.ElapsedTime">
            <summary>
            Gets the elapsed waiting time of the current thread.
            </summary>
        </member>
        <member name="P:Cuemon.Threading.CountdownEvent.CurrentCount">
            <summary>
            Gets the number of remaining signals required to set the event.
            </summary>
        </member>
        <member name="T:Cuemon.Threading.SortedDoerWorkItemPool`2">
            <summary>
            Provides a pool of threads to execute work items implementing the <see cref="T:Cuemon.Threading.ISortedDoerWorkItem`2"/> interface.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.SortedDoerWorkItemPool`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.SortedDoerWorkItemPool`2"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Threading.SortedDoerWorkItemPool`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Threading.SortedDoerWorkItemPool`2"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing keys.</param>
        </member>
        <member name="M:Cuemon.Threading.SortedDoerWorkItemPool`2.ProcessWork(Cuemon.Threading.ISortedDoerWorkItem{`0,`1})">
            <summary>
            The work to be processed one thread at a time.
            </summary>
            <param name="work">The work item to execute one thread at a time.</param>
        </member>
        <member name="P:Cuemon.Threading.SortedDoerWorkItemPool`2.Result">
            <summary>
            Gets the result of the work processed in <see cref="M:Cuemon.Threading.SortedDoerWorkItemPool`2.ProcessWork(Cuemon.Threading.ISortedDoerWorkItem{`0,`1})"/>.
            </summary>
            <value>
            The result of the work processed in <see cref="M:Cuemon.Threading.SortedDoerWorkItemPool`2.ProcessWork(Cuemon.Threading.ISortedDoerWorkItem{`0,`1})"/>.
            </value>
        </member>
        <member name="T:Cuemon.WatcherEventArgs">
            <summary>
            Provides data for watcher related operations.
            </summary>
        </member>
        <member name="M:Cuemon.WatcherEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.WatcherEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.WatcherEventArgs.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.WatcherEventArgs"/> class.
            </summary>
            <param name="utcLastModified">The time when a <see cref="T:Cuemon.Watcher"/> last detected changes to a resource.</param>
        </member>
        <member name="M:Cuemon.WatcherEventArgs.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.WatcherEventArgs"/> class.
            </summary>
            <param name="utcLastModified">The time when a <see cref="T:Cuemon.Watcher"/> last detected changes to a resource.</param>
            <param name="delayed">The time a <see cref="T:Cuemon.Watcher"/> was intentionally delayed before signaling changes to a resource.</param>
        </member>
        <member name="F:Cuemon.WatcherEventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="P:Cuemon.WatcherEventArgs.UtcLastModified">
            <summary>
            Gets the time when a watcher last detected changes to a resource, or a <see cref="F:System.DateTime.MinValue"/> if an empty event.
            </summary>
            <value>The time when a watcher last detected changes to a resource, or a <see cref="F:System.DateTime.MinValue"/> if an empty event.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="P:Cuemon.WatcherEventArgs.Delayed">
            <summary>
            Gets the time a <see cref="T:Cuemon.Watcher"/> was intentionally delayed before signaling changes to a resource.
            </summary>
        </member>
        <member name="T:Cuemon.DateSpan">
            <summary>
            Represents a <see cref="T:System.DateTime"/> interval between two <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="M:Cuemon.DateSpan.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DateSpan"/> structure with a default <see cref="T:System.DateTime"/> value set to <see cref="P:System.DateTime.Today"/>.
            </summary>
            <param name="start">A <see cref="T:System.DateTime"/> value for the <see cref="T:Cuemon.DateSpan"/> calculation.</param>
        </member>
        <member name="M:Cuemon.DateSpan.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DateSpan"/> structure with a default <see cref="P:Cuemon.DateSpan.Calendar"/> value from the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> class.
            </summary>
            <param name="start">A <see cref="T:System.DateTime"/> value for the <see cref="T:Cuemon.DateSpan"/> calculation.</param>
            <param name="end">A <see cref="T:System.DateTime"/> value for the <see cref="T:Cuemon.DateSpan"/> calculation.</param>
        </member>
        <member name="M:Cuemon.DateSpan.#ctor(System.DateTime,System.DateTime,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <param name="start">A <see cref="T:System.DateTime"/> value for the <see cref="T:Cuemon.DateSpan"/> calculation.</param>
            <param name="end">A <see cref="T:System.DateTime"/> value for the <see cref="T:Cuemon.DateSpan"/> calculation.</param>
            <param name="calendar">The <see cref="P:Cuemon.DateSpan.Calendar"/> that applies to this <see cref="T:Cuemon.DateSpan"/>.</param>
        </member>
        <member name="M:Cuemon.DateSpan.GetWeeks">
            <summary>
            Calculates the number of weeks represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>Calculates the number of weeks represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="M:Cuemon.DateSpan.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Cuemon.DateSpan.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.DateSpan.Equals(Cuemon.DateSpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Cuemon.DateSpan.op_Equality(Cuemon.DateSpan,Cuemon.DateSpan)">
            <summary>
            Indicates whether two <see cref="T:Cuemon.DateSpan"/> instances are equal.
            </summary>
            <param name="dateSpan1">The first date interval to compare.</param>
            <param name="dateSpan2">The second date interval to compare.</param>
            <returns><c>true</c> if the values of <paramref name="dateSpan1"/> and <paramref name="dateSpan2"/> are equal; otherwise, false. </returns>
        </member>
        <member name="M:Cuemon.DateSpan.op_Inequality(Cuemon.DateSpan,Cuemon.DateSpan)">
            <summary>
            Indicates whether two <see cref="T:Cuemon.DateSpan"/> instances are not equal.
            </summary>
            <param name="dateSpan1">The first date interval to compare.</param>
            <param name="dateSpan2">The second date interval to compare.</param>
            <returns><c>true</c> if the values of <paramref name="dateSpan1"/> and <paramref name="dateSpan2"/> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Cuemon.DateSpan.Parse(System.String)">
            <summary>
            Constructs a new <see cref="T:Cuemon.DateSpan"/> object from a date and time interval specified in a string.
            </summary>
            <param name="start">A string that specifies the starting date and time value for the <see cref="T:Cuemon.DateSpan"/> interval.</param>
            <returns>A <see cref="T:Cuemon.DateSpan"/> that corresponds to <paramref name="start"/> and <see cref="P:System.DateTime.Today"/> for the last part of the interval.</returns>
        </member>
        <member name="M:Cuemon.DateSpan.Parse(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Cuemon.DateSpan"/> object from a date and time interval specified in a string.
            </summary>
            <param name="start">A string that specifies the starting date and time value for the <see cref="T:Cuemon.DateSpan"/> interval.</param>
            <param name="end">A string that specifies the ending date and time value for the <see cref="T:Cuemon.DateSpan"/> interval.</param>
            <returns>A <see cref="T:Cuemon.DateSpan"/> that corresponds to <paramref name="start"/> and <paramref name="end"/> of the interval.</returns>
        </member>
        <member name="M:Cuemon.DateSpan.Parse(System.String,System.String,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Cuemon.DateSpan"/> object from a date and time interval specified in a string.
            </summary>
            <param name="start">A string that specifies the starting date and time value for the <see cref="T:Cuemon.DateSpan"/> interval.</param>
            <param name="end">A string that specifies the ending date and time value for the <see cref="T:Cuemon.DateSpan"/> interval.</param>
            <param name="lcid">An integer that specifies a <see cref="T:System.Globalization.CultureInfo"/> to resolve a <see cref="P:Cuemon.DateSpan.Calendar"/> object from.</param>
            <returns>A <see cref="T:Cuemon.DateSpan"/> that corresponds to <paramref name="start"/> and <paramref name="end"/> of the interval.</returns>
        </member>
        <member name="M:Cuemon.DateSpan.ToString">
            <summary>
            Converts the value of the current <see cref="T:Cuemon.DateSpan"/> object to its equivalent string representation.
            </summary>
            <returns>
            The <see cref="T:System.String"/> representation of the current <see cref="T:Cuemon.DateSpan"/> value. 
            </returns>
            <remarks>The returned string has the following format: y*:MM:dd:hh:mm:ss.f*, where y* is the actual calculated years and f* is the actual calculated milliseconds.</remarks>
        </member>
        <member name="P:Cuemon.DateSpan.Calendar">
            <summary>
            Gets the calendar represented by the current <see cref="T:Cuemon.DateSpan"/> structure. 
            The default value is taken from the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> class.
            </summary>
            <value>A <see cref="P:Cuemon.DateSpan.Calendar"/> that represents the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Days">
            <summary>
            Gets the number of days represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of days represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalDays">
            <summary>
            Gets the total number of days represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of days represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Hours">
            <summary>
            Gets the number of hours represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of hours represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalHours">
            <summary>
            Gets the total number of hours represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of hours represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Milliseconds">
            <summary>
            Gets the number of milliseconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of milliseconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalMilliseconds">
            <summary>
            Gets the total number of milliseconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of milliseconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Minutes">
            <summary>
            Gets the number of minutes represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of minutes represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalMinutes">
            <summary>
            Gets the total number of minutes represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of minutes represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Months">
            <summary>
            Gets the number of months represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of months represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalMonths">
            <summary>
            Gets the total number of months represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of months represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Seconds">
            <summary>
            Gets the number of seconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of seconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.TotalSeconds">
            <summary>
            Gets the total number of seconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The total number of seconds represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Ticks">
            <summary>
            Gets the number of ticks represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of ticks represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="P:Cuemon.DateSpan.Years">
            <summary>
            Gets the number of years represented by the current <see cref="T:Cuemon.DateSpan"/> structure.
            </summary>
            <value>The number of years represented by the current <see cref="T:Cuemon.DateSpan"/> structure.</value>
        </member>
        <member name="T:Cuemon.Dependency">
            <summary>
            An abstract class for establishing various methods of a dependency relationship to an object. 
            The implementing class of the <see cref="T:Cuemon.Dependency"/> class must monitor the dependency relationships so that when any of them changes, action will automatically be taken.
            </summary>
        </member>
        <member name="T:Cuemon.IDependency">
            <summary>
            Defines a method to control dependency related operations.
            </summary>
        </member>
        <member name="E:Cuemon.IDependency.DependencyChanged">
            <summary>
            Occurs when a <see cref="T:Cuemon.IDependency"/> object has changed.
            </summary>
        </member>
        <member name="P:Cuemon.IDependency.UtcLastModified">
            <summary>
            Gets the time when the dependency was last changed.
            </summary>
            <value>The time when the dependency was last changed.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="P:Cuemon.IDependency.HasChanged">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.IDependency"/> object has changed.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Cuemon.IDependency"/> object has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Cuemon.Dependency.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Dependency"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Dependency.SetUtcLastModified(System.DateTime)">
            <summary>
            Marks the time when a dependency last changed.
            </summary>
            <param name="utcLastModified">The time when the dependency last changed.</param>
        </member>
        <member name="M:Cuemon.Dependency.OnDependencyChangedRaised(Cuemon.DependencyEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Dependency.DependencyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.DependencyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Cuemon.Dependency.DependencyChanged">
            <summary>
            Occurs when a <see cref="T:Cuemon.Dependency"/> has changed.
            </summary>
        </member>
        <member name="P:Cuemon.Dependency.UtcLastModified">
            <summary>
            Gets time when the dependency was last changed.
            </summary>
            <value>The time when the dependency was last changed.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="P:Cuemon.Dependency.HasChanged">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.Dependency"/> object has changed.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Cuemon.Dependency"/> object has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cuemon.Caching.CachingManager">
            <summary>
            Provides access to caching in an application.
            </summary>
        </member>
        <member name="P:Cuemon.Caching.CachingManager.Cache">
            <summary>
            Gets a collection of cached objects for the current application domain.
            </summary>
            <value>A collection of cached objects for the current application domain.</value>
        </member>
        <member name="T:Cuemon.Diagnostics.FileExceptionLog">
            <summary>
            A simple <see cref="T:System.Exception"/> log handler which supports writing to a text-file.
            </summary>
        </member>
        <member name="T:Cuemon.Diagnostics.ExceptionLog">
            <summary>
            Exposes an abstract interface, optimized for <see cref="T:System.Exception"/> log handling.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.ExceptionLog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.ExceptionLog"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.ExceptionLog.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.ExceptionLog"/> class.
            </summary>
            <param name="value">The object signed with a <see cref="T:Cuemon.Diagnostics.LogAttribute"/>.</param>
            <remarks><see cref="T:Cuemon.Diagnostics.ExceptionLog"/> defaults to using an instance of <see cref="T:System.Text.UnicodeEncoding"/> unless specified otherwise.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.ExceptionLog.#ctor(System.Object,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.ExceptionLog"/> class.
            </summary>
            <param name="value">The object signed with a <see cref="T:Cuemon.Diagnostics.LogAttribute"/>.</param>
            <param name="encoding">The encoding to use when writing the log.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.ExceptionLog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.ExceptionLog"/> class.
            </summary>
            <param name="logName">The name of the log.</param>
            <param name="sourceName">The source of event log entries.</param>
            <remarks><see cref="T:Cuemon.Diagnostics.ExceptionLog"/> defaults to using an instance of <see cref="T:System.Text.UnicodeEncoding"/> unless specified otherwise.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.ExceptionLog.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.ExceptionLog"/> class.
            </summary>
            <param name="logName">The name of the log.</param>
            <param name="sourceName">The source of event log entries.</param>
            <param name="encoding">The encoding to use when writing the log.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.ExceptionLog.Save">
            <summary>
            Persists the log to a repository.
            </summary>
            <exception cref="T:System.NotImplementedException">This method must be overridden on the implementer class; otherwise a <see cref="T:System.NotImplementedException"/> is raised.</exception>
        </member>
        <member name="M:Cuemon.Diagnostics.ExceptionLog.WriteEntry(System.Exception)">
            <summary>
            Writes an error type entry, with the given <see cref="T:System.Exception"/>, to the exception log.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> which holds the data to write to the <see cref="T:Cuemon.Diagnostics.ExceptionLog"/>.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.ExceptionLog.WriteEntry(System.Exception,Cuemon.Diagnostics.LogEntrySeverity)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the <see cref="T:System.Exception"/> to the <see cref="T:Cuemon.Diagnostics.ExceptionLog"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> which holds the data to write to the <see cref="T:Cuemon.Diagnostics.ExceptionLog"/>.</param>
            <param name="severity">One of the <see cref="T:Cuemon.Diagnostics.LogEntrySeverity"/> values.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.ExceptionLog.WriteEntry(System.Exception,Cuemon.Diagnostics.LogEntrySeverity,System.String)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the <see cref="T:System.Exception"/> to the <see cref="T:Cuemon.Diagnostics.ExceptionLog"/>.
            </summary>
            <param name="exception">The <see cref="T:System.Exception"/> which holds the data to write to the <see cref="T:Cuemon.Diagnostics.ExceptionLog"/>.</param>
            <param name="severity">One of the <see cref="T:Cuemon.Diagnostics.LogEntrySeverity"/> values.</param>
            <param name="computerName">The name of the computer to associate the <paramref name="exception"/> with.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.FileExceptionLog.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.FileExceptionLog"/> class.
            </summary>
            <param name="value">The object signed with a <see cref="T:Cuemon.Diagnostics.LogAttribute"/>.</param>
            <remarks><see cref="T:Cuemon.Diagnostics.FileExceptionLog"/> defaults to using an instance of <see cref="T:System.Text.UTF8Encoding"/> unless specified otherwise.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.FileExceptionLog.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.FileExceptionLog"/> class.
            </summary>
            <param name="value">The object signed with a <see cref="T:Cuemon.Diagnostics.LogAttribute"/>.</param>
            <param name="fileName">The name of the text-file to where exceptions is written.</param>
            <remarks><see cref="T:Cuemon.Diagnostics.FileExceptionLog"/> defaults to using an instance of <see cref="T:System.Text.UTF8Encoding"/> unless specified otherwise.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.FileExceptionLog.#ctor(System.Object,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.FileExceptionLog"/> class.
            </summary>
            <param name="value">The object signed with a <see cref="T:Cuemon.Diagnostics.LogAttribute"/>.</param>
            <param name="fileName">The name of the text-file to where exceptions is written.</param>
            <param name="encoding">The encoding to use with the text-file.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.FileExceptionLog.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.FileExceptionLog"/> class.
            </summary>
            <param name="logName">The name of the log.</param>
            <param name="sourceName">The source of event log entries.</param>
            <param name="fileName">The name of the text-file to where exceptions is written.</param>
            <remarks><see cref="T:Cuemon.Diagnostics.FileExceptionLog"/> defaults to using an instance of <see cref="T:System.Text.UTF8Encoding"/> unless specified otherwise.</remarks>
        </member>
        <member name="M:Cuemon.Diagnostics.FileExceptionLog.#ctor(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.FileExceptionLog"/> class.
            </summary>
            <param name="logName">The name of the log.</param>
            <param name="sourceName">The source of event log entries.</param>
            <param name="fileName">The name of the text-file to where exceptions is written.</param>
            <param name="encoding">The encoding to use with the text-file.</param>
        </member>
        <member name="M:Cuemon.Diagnostics.FileExceptionLog.Save">
            <summary>
            Persists the log to a text-file with the specified <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="P:Cuemon.Diagnostics.FileExceptionLog.FileName">
            <summary>
            Gets or sets the name of the text-file where the exceptions are written.
            </summary>
            <value>The name of the text-file to where exceptions is written.</value>
        </member>
        <member name="T:Cuemon.Diagnostics.LogAttribute">
            <summary>
            Provides members to describe name and source of an incident.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.LogAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.LogAttribute"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Diagnostics.LogAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Diagnostics.LogAttribute"/> class.
            </summary>
            <param name="name">The name of the log to categorize possible events under.</param>
            <param name="source">The source name to associate with the provided <paramref name="name"/>.</param>
        </member>
        <member name="P:Cuemon.Diagnostics.LogAttribute.Name">
            <summary>
            Gets or sets the name of the log to categorize possible events under.
            </summary>
            <value>The name of the log to categorize possible events under.</value>
        </member>
        <member name="P:Cuemon.Diagnostics.LogAttribute.Source">
            <summary>
            Gets or sets the source name to associate with the log.
            </summary>
            <value>The source name to associate with the log.</value>
        </member>
        <member name="T:Cuemon.Diagnostics.LogEntrySeverity">
            <summary>
            Specifies the severity of a log entry.
            </summary>
        </member>
        <member name="F:Cuemon.Diagnostics.LogEntrySeverity.Information">
            <summary>
            An information event. This indicates a significant, successful operation.
            </summary>
        </member>
        <member name="F:Cuemon.Diagnostics.LogEntrySeverity.Warning">
            <summary>
            A warning event. This indicates a problem that is not immediately significant, but that may signify conditions that could cause future problems.
            </summary>
        </member>
        <member name="F:Cuemon.Diagnostics.LogEntrySeverity.Error">
            <summary>
            An error event. This indicates a significant problem the user should know about; usually a loss of functionality or data.
            </summary>
        </member>
        <member name="F:Cuemon.Diagnostics.LogEntrySeverity.SuccessAudit">
            <summary>
            A success audit event. This indicates a security event that occurs when an audited access attempt is successful; for example, logging on successfully.
            </summary>
        </member>
        <member name="F:Cuemon.Diagnostics.LogEntrySeverity.FailureAudit">
            <summary>
            A failure audit event. This indicates a security event that occurs when an audited access attempt fails; for example, a failed attempt to open a file.
            </summary>
        </member>
        <member name="T:Cuemon.IO.FileUtility">
            <summary>
            This utility class is designed to make various file related operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.IO.FileUtility.GetCacheValidator(System.String)">
            <summary>
            Returns a <see cref="T:Cuemon.Caching.CacheValidator"/> from the specified <paramref name="fileName"/>.
            </summary>
            <param name="fileName">The fully qualified name of the new file. Do not end the path with the directory separator character.</param>
            <returns>A <see cref="T:Cuemon.Caching.CacheValidator"/> that fully represents the integrity of the specified <paramref name="fileName"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> is null.
            </exception>
            <remarks>Should the specified <paramref name="fileName"/> trigger any sort of exception, a <see cref="P:Cuemon.Caching.CacheValidator.Default"/> is returned.</remarks>
        </member>
        <member name="M:Cuemon.IO.FileUtility.ParseFileName(System.String)">
            <summary>
            Parses and removes invalid characters from the specified <paramref name="fileName"/>.
            </summary>
            <param name="fileName">A relative or absolute path for the file to parse.</param>
            <returns>A <see cref="T:System.String"/> cleansed for possible invalid characters in regards to a file location.</returns>
        </member>
        <member name="M:Cuemon.IO.FileUtility.CanAccess(System.String,System.IO.FileAccess)">
            <summary>
            Determines whether a file can be accessed by the specified <see cref="T:System.IO.FileAccess"/> method.
            </summary>
            <param name="path">The file wanted for access.</param>
            <param name="access">The method to access the file by.</param>
            <returns>
            	<c>true</c> if a file can be accessed by the specified <see cref="T:System.IO.FileAccess"/> method; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Cuemon.IO.FileDependency">
            <summary>
            This <see cref="T:Cuemon.IO.FileDependency"/> class will monitor any changes occurred to files or directories while notifying subscribing objects.
            </summary>
        </member>
        <member name="M:Cuemon.IO.FileDependency.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.FileDependency"/> class.
            </summary>
            <param name="path">The directory that this <see cref="T:Cuemon.IO.FileDependency"/> will monitor. When the directory changes, this <see cref="T:Cuemon.IO.FileDependency"/> will notify any subscribing objects of the change.</param>
        </member>
        <member name="M:Cuemon.IO.FileDependency.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.FileDependency"/> class.
            </summary>
            <param name="path">The directory that this <see cref="T:Cuemon.IO.FileDependency"/> will monitor. When the directory changes, this <see cref="T:Cuemon.IO.FileDependency"/> will notify any subscribing objects of the change.</param>
            <param name="filter">The type of files to watch. For example, "*.xslt" watches for changes to all XSLT files.</param>
        </member>
        <member name="M:Cuemon.IO.FileDependency.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.FileDependency"/> class.
            </summary>
            <param name="directories">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of directories that this <see cref="T:Cuemon.IO.FileDependency"/> will monitor. When any of these directories changes, this <see cref="T:Cuemon.IO.FileDependency"/> will notify any subscribing objects of the change.</param>
        </member>
        <member name="M:Cuemon.IO.FileDependency.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.FileDependency"/> class.
            </summary>
            <param name="directories">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of directories that this <see cref="T:Cuemon.IO.FileDependency"/> will monitor. When any of these directories changes, this <see cref="T:Cuemon.IO.FileDependency"/> will notify any subscribing objects of the change.</param>
            <param name="filter">The type of files to watch. For example, "*.xslt" watches for changes to all XSLT files.</param>
        </member>
        <member name="P:Cuemon.IO.FileDependency.HasChanged">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.Dependency"/> object has changed.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Cuemon.Dependency"/> object has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cuemon.CharUtility">
            <summary>
            This utility class is designed to make <see cref="T:System.Char"/> operations easier to work with.
            </summary>
        </member>
        <member name="T:Cuemon.Collections.Generic.EnumerableUtility">
            <summary>
            This utility class provides a set of static methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>. 
            </summary>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.SelectMany``2(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the one-to-many transform function on each element of the <paramref name="source"/> sequence.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Select``2(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the transform function on each element of <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Any(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> to check for emptiness.</param>
            <returns><c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check for emptiness.</param>
            <returns><c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Range(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="start">The value of the first integer in the sequence.</param>
            <param name="count">The number of sequential integers to generate.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a range of sequential integral numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count"/> is less than 0 or <br/>
            <paramref name="start"/> + <paramref name="count"/> is larger than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Where``1(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null or <br/>
            <paramref name="predicate"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Chunk``1(System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Creates and returns a chunked <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence with a maximum of 128 elements.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to chunk into smaller slices for a batch run or similar.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains no more than 128 elements from the <paramref name="source"/> sequence.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
            <remarks>The original <paramref name="source"/> is reduced equivalent to the number of elements in the returned sequence.</remarks>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Chunk``1(System.Collections.Generic.IEnumerable{``0}@,System.Int32)">
            <summary>
            Returns a chunked <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence with a maximum of the specified <paramref name="size"/>. Default is 128.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to chunk into smaller slices for a batch run or similar.</param>
            <param name="size">The amount of elements to process at a time.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains no more than the specified <paramref name="size"/> of elements from the <paramref name="source"/> sequence.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="size"/> is less or equal to 0.
            </exception>
            <remarks>The original <paramref name="source"/> is reduced equivalent to the number of elements in the returned sequence.</remarks>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create an array from.</param>
            <returns>An array that contains the elements from the input sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Cast``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Cast the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the specified type.
            </summary>
            <typeparam name="TResult">The type to cast the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to be cast to type <typeparamref name="TResult"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains each element of the <paramref name="source"/> sequence cast to the specified type.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Convert``2(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1})">
            <summary>
            Converts the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the specified type.
            </summary>
            <typeparam name="TSource">The original source type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The converted result type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to be cast to type <typeparamref name="TResult"/>.</param>
            <param name="converter">The function delegate that converts <typeparamref name="TSource"/> to a <typeparamref name="TResult"/> representation once per iteration.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains each element of the <paramref name="source"/> sequence converted to the specified <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FindAll``1(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,System.Boolean})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="match">The function delegate that defines the conditions of the elements to search for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FindAll``2(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1,System.Boolean},``1)">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified function delegate.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence.</typeparam>
            <typeparam name="T">The type of the first parameter of the delegate <paramref name="match"/>.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="match">The function delegate that defines the conditions of the elements to search for.</param>
            <param name="arg">The first parameter of the delegate <paramref name="match"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FindAll``3(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1,``2,System.Boolean},``1,``2)">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified function delegate.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="match"/>.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="match">The function delegate that defines the conditions of the elements to search for.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="match"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FindAll``4(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1,``2,``3,System.Boolean},``1,``2,``3)">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified function delegate.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="match"/>.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="match">The function delegate that defines the conditions of the elements to search for.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="match"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FindAll``5(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1,``2,``3,``4,System.Boolean},``1,``2,``3,``4)">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified function delegate.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="match"/>.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="match">The function delegate that defines the conditions of the elements to search for.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="match"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FindAll``6(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1,``2,``3,``4,``5,System.Boolean},``1,``2,``3,``4,``5)">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified function delegate.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="match"/>.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="match">The function delegate that defines the conditions of the elements to search for.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="match"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FindAll``7(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,System.Boolean},``1,``2,``3,``4,``5,``6)">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified function delegate.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="match"/>.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="match">The function delegate that defines the conditions of the elements to search for.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="match"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FindAll``8(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean},``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified function delegate.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="match"/>.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="match">The function delegate that defines the conditions of the elements to search for.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="match"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FindAll``9(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean},``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified function delegate.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="match"/>.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="match">The function delegate that defines the conditions of the elements to search for.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="match"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FindAll``10(System.Collections.Generic.IEnumerable{``0},Cuemon.Doer{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean},``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified function delegate.
            </summary>
            <typeparam name="TSource">The type of the elements of the sequence.</typeparam>
            <typeparam name="T1">The type of the first parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T2">The type of the second parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T3">The type of the third parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the delegate <paramref name="match"/>.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the delegate <paramref name="match"/>.</typeparam>
            <param name="source">The sequence to search.</param>
            <param name="match">The function delegate that defines the conditions of the elements to search for.</param>
            <param name="arg1">The first parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg2">The second parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg3">The third parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg4">The fourth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg5">The fifth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg6">The sixth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg7">The seventh parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg8">The eighth parameter of the delegate <paramref name="match"/>.</param>
            <param name="arg9">The ninth parameter of the delegate <paramref name="match"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.</param>
            <returns>default(TSource) if source is empty; otherwise, the first element in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
            <remarks>The default value for reference and nullable types is null.</remarks>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the last element of.</param>
            <returns>default(TSource) if source is empty; otherwise, the last element in <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
            <remarks>The default value for reference and nullable types is null.</remarks>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>The element at the specified position in the <paramref name="source"/> sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Max(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the maximum value in a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32"/> values to determine the maximum value of.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Max(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the maximum value in a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64"/> values to determine the maximum value of.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum value in a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double"/> values to determine the maximum value of.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the maximum value in a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal"/> values to determine the maximum value of.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Min(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the minimum value in a sequence of <see cref="T:System.Int32"/> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32"/> values to determine the minimum value of.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Min(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the minimum value in a sequence of <see cref="T:System.Int64"/> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64"/> values to determine the minimum value of.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum value in a sequence of <see cref="T:System.Double"/> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double"/> values to determine the minimum value of.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the minimum value in a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal"/> values to determine the minimum value of.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Count(System.Collections.IEnumerable)">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">A sequence that contains elements to be counted.</param>
            <returns>The number of elements in the input sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>. </typeparam>
            <param name="source">A sequence that contains elements to be counted.</param>
            <returns>The number of elements in the input sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <see paramref="source"/>.</typeparam>
            <param name="source">A sequence of values to reverse.</param>
            <returns>A sequence whose elements correspond to those of the input sequence in reverse order.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Concat``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Concatenates the specified sequences in <paramref name="sources"/> into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences of <see paramref="sources"/>.</typeparam>
            <param name="sources">The sequences to concatenate into one <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the concatenated elements of the specified sequences in <paramref name="sources"/>.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.EqualityComparer`1"/> to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.SortAscending``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns ascending sorted elements from a sequence by using the default comparer to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains ascending sorted elements from the source sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.SortAscending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns ascending sorted elements from a sequence by using a specified <see cref="T:System.Collections.Generic.Comparer`1"/> to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains ascending sorted elements from the source sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.SortDescending``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns ascending sorted elements from a sequence by using the default comparer to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains descending sorted elements from the source sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.SortDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns descending sorted elements from a sequence by using a specified <see cref="T:System.Collections.Generic.Comparer`1"/> to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains descending sorted elements from the source sequence.</returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
            <typeparam name="TSource">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see paramref="source"/>.</typeparam>
            <param name="source">A sequence in which to locate a value.</param>
            <param name="value">The value to locate in the sequence.</param>
            <returns>
            	<c>true</c> if the source sequence contains an element that has the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.Collections.Generic.EnumerableUtility.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TSource">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see paramref="source"/>.</typeparam>
            <param name="source">A sequence in which to locate a value.</param>
            <param name="value">The value to locate in the sequence.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>
            	<c>true</c> if the source sequence contains an element that has the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Cuemon.Configuration.DataConnectionElement">
            <summary>
            Represents a configuration element within a configuration file (@name, @address, @database, @networkLibrary, @password, @timeout, @userId).
            </summary>
        </member>
        <member name="T:Cuemon.Configuration.IDataConnectionElement">
            <summary>
            An interface representing a configuration element within a configuration file (@name, @address, @database, @networkLibrary, @password, @timeout, @userId).
            </summary>
        </member>
        <member name="P:Cuemon.Configuration.IDataConnectionElement.Name">
            <summary>
            Gets or sets the name of the connection.
            </summary>
            <value>The name of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.IDataConnectionElement.Address">
            <summary>
            Gets or sets the address of the connection.
            </summary>
            <value>The address of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.IDataConnectionElement.Database">
            <summary>
            Gets or sets the database of the connection.
            </summary>
            <value>The database of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.IDataConnectionElement.NetworkLibrary">
            <summary>
            Gets or sets the network library of the connection.
            </summary>
            <value>The network library of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.IDataConnectionElement.Password">
            <summary>
            Gets or sets the password of the connection.
            </summary>
            <value>The password of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.IDataConnectionElement.UserId">
            <summary>
            Gets or sets the user id of the connection.
            </summary>
            <value>The user id of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.IDataConnectionElement.Timeout">
            <summary>
            Gets or sets the timeout of the connection.
            </summary>
            <value>The timeout of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.DataConnectionElement.Name">
            <summary>
            Gets or sets the name of the connection.
            </summary>
            <value>The name of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.DataConnectionElement.Address">
            <summary>
            Gets or sets the address of the connection.
            </summary>
            <value>The address of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.DataConnectionElement.Database">
            <summary>
            Gets or sets the database of the connection.
            </summary>
            <value>The database of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.DataConnectionElement.NetworkLibrary">
            <summary>
            Gets or sets the network library of the connection.
            </summary>
            <value>The network library of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.DataConnectionElement.Password">
            <summary>
            Gets or sets the password of the connection.
            </summary>
            <value>The password of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.DataConnectionElement.Timeout">
            <summary>
            Gets or sets the timeout of the connection.
            </summary>
            <value>The timeout of the connection.</value>
        </member>
        <member name="P:Cuemon.Configuration.DataConnectionElement.UserId">
            <summary>
            Gets or sets the user id of the connection.
            </summary>
            <value>The user id of the connection.</value>
        </member>
        <member name="T:Cuemon.Configuration.DataConnectionElementCollection">
            <summary>
            Represents a configuration element containing a collection of child elements (<see cref="T:Cuemon.Configuration.DataConnectionElement"></see>).
            </summary>
        </member>
        <member name="M:Cuemon.Configuration.DataConnectionElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Cuemon.Configuration.DataConnectionElement"></see>.
            </summary>
            <returns>
            A new <see cref="T:Cuemon.Configuration.DataConnectionElement"></see>.
            </returns>
        </member>
        <member name="M:Cuemon.Configuration.DataConnectionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:Cuemon.Configuration.DataConnectionElement"></see> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:Cuemon.Configuration.DataConnectionElement"></see>.
            </returns>
        </member>
        <member name="T:Cuemon.Configuration.SectionGroup">
            <summary>
            Represents a group of related sections within a configuration file (Data).
            </summary>
        </member>
        <member name="P:Cuemon.Configuration.SectionGroup.Data">
            <summary>
            Gets the data section group element.
            </summary>
            <value>The data section group element.</value>
        </member>
        <member name="T:Cuemon.Configuration.DataSection">
            <summary>
            Represents a section within a configuration file (Data/Connections).
            </summary>
        </member>
        <member name="M:Cuemon.Configuration.DataSection.GetDefaultConnectionFromCollection">
            <summary>
            Gets the default connection from the connection collection as specified in the corresponding attribute.
            </summary>
            <returns>The default connection as specified in the corresponding attribute.</returns>
        </member>
        <member name="P:Cuemon.Configuration.DataSection.DefaultConnection">
            <summary>
            Gets or sets the default connection for your appliation.
            </summary>
            <value>The default connection to use in your application.</value>
        </member>
        <member name="P:Cuemon.Configuration.DataSection.Connections">
            <summary>
            Gets the available connections from your configuration file.
            </summary>
            <value>The connections as entered in your configuration file.</value>
        </member>
        <member name="T:Cuemon.DateTimeUtility">
            <summary>
            This utility class is designed to make <see cref="T:System.DateTime"/> operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.DateTimeUtility.GetLowestValue(System.DateTime[])">
            <summary>
            Gets the lowest <see cref="T:System.DateTime"/> value of the specified <see cref="T:System.DateTime"/> values.
            </summary>
            <param name="source">A variable number of <see cref="T:System.DateTime"/> values to parse for the lowest value.</param>
            <returns>The lowest <see cref="T:System.DateTime"/> value of the specified <see cref="T:System.DateTime"/> values.</returns>
        </member>
        <member name="M:Cuemon.DateTimeUtility.GetHighestValue(System.DateTime[])">
            <summary>
            Gets the highest <see cref="T:System.DateTime"/> value of the specified <see cref="T:System.DateTime"/> values.
            </summary>
            <param name="source">A variable number of <see cref="T:System.DateTime"/> values to parse for the highest value.</param>
            <returns>The highest <see cref="T:System.DateTime"/> value of the specified <see cref="T:System.DateTime"/> values.</returns>
        </member>
        <member name="T:Cuemon.StandardizedDateTimeFormatPattern">
            <summary>
            Defines some standardized patterns to use when formatting date- and time values.
            </summary>
        </member>
        <member name="F:Cuemon.StandardizedDateTimeFormatPattern.Iso8601CompleteDateBasic">
            <summary>
            Displays a date using the ISO8601 basic date format, eg.: YYYYMMDD.
            </summary>
        </member>
        <member name="F:Cuemon.StandardizedDateTimeFormatPattern.Iso8601CompleteDateExtended">
            <summary>
            Displays a date using the ISO8601 extended date format (human readable), eg.: YYYY-MM-DD.
            </summary>
        </member>
        <member name="F:Cuemon.StandardizedDateTimeFormatPattern.Iso8601CompleteDateTimeBasic">
            <summary>
            Displays a date using the ISO8601 basic date format in conjunction with the ISO8601 time format, eg.: YYYYMMDDThhmmssTZD.
            </summary>
        </member>
        <member name="F:Cuemon.StandardizedDateTimeFormatPattern.Iso8601CompleteDateTimeExtended">
            <summary>
            Displays a date using the ISO8601 extended date format (human readable) in conjunction with the ISO8601 extended time format (human readable), eg.: YYYY-MM-DDThh:mm:ssTZD.
            </summary>
        </member>
        <member name="T:Cuemon.DateTimeFormatPattern">
            <summary>
            Defines the default pattern to use when formatting date- and time values.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.ShortDate">
            <summary>
            Displays a date using the short-date format.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.LongDate">
            <summary>
            Displays a date using the long-date format.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.ShortTime">
            <summary>
            Displays a time using the short-time format.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.LongTime">
            <summary>
            Displays a time using the long-time format.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.ShortDateTime">
            <summary>
            Displays a date using the short-date format in conjunction with the short-time format.
            </summary>
        </member>
        <member name="F:Cuemon.DateTimeFormatPattern.LongDateTime">
            <summary>
            Displays a date using the long-date format in conjunction with the long-time format.
            </summary>
        </member>
        <member name="T:Cuemon.DependencyEventArgs">
            <summary>
            Provides data for dependency related operations.
            </summary>
        </member>
        <member name="M:Cuemon.DependencyEventArgs.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.DependencyEventArgs"/> class.
            </summary>
        </member>
        <member name="F:Cuemon.DependencyEventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="P:Cuemon.DependencyEventArgs.UtcLastModified">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value from when a <see cref="T:Cuemon.Dependency"/> was last changed, or a <see cref="F:System.DateTime.MinValue"/> if an empty event.
            </summary>
            <value>The <see cref="T:System.DateTime"/> value from when a <see cref="T:Cuemon.Dependency"/> was last changed, or a <see cref="F:System.DateTime.MinValue"/> if an empty event.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="T:Cuemon.Filter">
            <summary>
            Specifies a generic way of handling the supported actions for filtering statements.
            </summary>
        </member>
        <member name="F:Cuemon.Filter.None">
            <summary>
            Specifies that no filter should be applied.
            </summary>
        </member>
        <member name="F:Cuemon.Filter.Exclude">
            <summary>
            If the condition is met, the input value(s) is excluded from the results.
            </summary>
        </member>
        <member name="F:Cuemon.Filter.Include">
            <summary>
            If the condition is met, only the input value(s) is included in the results.
            </summary>
        </member>
        <member name="T:Cuemon.Globalization.TimeZoneInfo">
            <summary>
            Represents time zone information.
            </summary>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Globalization.TimeZoneInfo"/> class, using the time zone of the current computer system and the current UTC year.
            </summary>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.#ctor(Cuemon.Globalization.TimeZoneInfoKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Globalization.TimeZoneInfo"/> class, using the specified <paramref name="timeZone"/> and the current UTC year.
            </summary>
            <param name="timeZone">The <see cref="T:Cuemon.Globalization.TimeZoneInfoKey"/> to resolve the standard name of the timezone.</param>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Globalization.TimeZoneInfo"/> class, using the specified <paramref name="standardName"/> and the current UTC year.
            </summary>
            <param name="standardName">The standard name of the timezone.</param>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.GetKey">
            <summary>
            Gets the key for the time zone.
            </summary>
            <value>The key for the time zone.</value>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.SetStandardName(Cuemon.Globalization.TimeZoneInfoKey)">
            <summary>
            Infrastructure. Specifies a new standard time zone name, bypassing constructor value.
            </summary>
            <param name="timeZone">The <see cref="T:Cuemon.Globalization.TimeZoneInfoKey"/> to specify a standard time zone name from.</param>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.SetStandardName(System.String)">
            <summary>
            Infrastructure. Specifies a new standard time zone name, bypassing constructor value.
            </summary>
            <param name="standardName">The standard time zone name.</param>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.IsValid(System.String)">
            <summary>
            Determines whether the specified standard name is valid.
            </summary>
            <param name="standardName">The name of the time zone to validate.</param>
            <returns>
            	<c>true</c> if the specified standard name is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.GetKey(System.String)">
            <summary>
            Gets the time zone key from the standard name.
            </summary>
            <param name="standardName">The time zone standard name.</param>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.GetStandardName(Cuemon.Globalization.TimeZoneInfoKey)">
            <summary>
            Gets the time zone standard name.
            </summary>
            <param name="timeZone">The time zone key to lookup the standard name from.</param>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.IsDaylightSavingTime">
            <summary>
            Returns a value indicating whether the current date and time is within a daylight saving time period.
            </summary>
            <returns>
                <c>true</c> if time is in a daylight saving time period; <c>false</c> otherwise, or if time is null.
            </returns>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
            <summary>
            Returns a value indicating whether the specified date and time is within a daylight saving time period.
            </summary>
            <param name="time">A date and time.</param>
            <returns>
            true if time is in a daylight saving time period; false otherwise, or if time is null.
            </returns>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.GetDaylightChanges">
            <summary>
            Returns the daylight saving time period for the current year.
            </summary>
            <returns>
            A <see cref="T:System.Globalization.DaylightTime"></see> instance containing the start and end date for daylight saving time in year.
            </returns>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.GetDaylightChanges(System.Int32)">
            <summary>
            Returns the daylight saving time period for a particular year.
            </summary>
            <param name="year">The year to which the daylight saving time period applies.</param>
            <returns>
            A <see cref="T:System.Globalization.DaylightTime"></see> instance containing the start and end date for daylight saving time in year.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">year is less than 1 or greater than 9999. </exception>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.GetUtcOffset">
            <summary>
            Returns the coordinated universal time (UTC) offset for the current local time.
            </summary>
            <returns>The UTC offset from time, measured in ticks.</returns>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfo.GetUtcOffset(System.DateTime)">
            <summary>
            Returns the coordinated universal time (UTC) offset for the specified local time.
            </summary>
            <param name="time">The local date and time.</param>
            <returns>
            The UTC offset from time, measured in ticks.
            </returns>
        </member>
        <member name="P:Cuemon.Globalization.TimeZoneInfo.StandardName">
            <summary>
            Gets or sets the standard time zone name.
            </summary>
            <value></value>
            <returns>The standard time zone name.</returns>
            <exception cref="T:System.ArgumentNullException">Attempted to set this property to null. </exception>
        </member>
        <member name="P:Cuemon.Globalization.TimeZoneInfo.DaylightChangesYearInUse">
            <summary>
            Gets the year currently used for resolving daylight changes for this time zone.
            </summary>
            <value>The year currently used for resolving daylight changes for this time zone.</value>
        </member>
        <member name="P:Cuemon.Globalization.TimeZoneInfo.DisplayName">
            <summary>
            Gets the display name of the time zone.
            </summary>
            <value>The display name of the time zone.</value>
        </member>
        <member name="P:Cuemon.Globalization.TimeZoneInfo.DaylightName">
            <summary>
            Gets the daylight saving time zone name.
            </summary>
            <returns>The daylight saving time zone name.</returns>
        </member>
        <member name="T:Cuemon.Globalization.TimeZoneInfo.SYSTEMTIME">
            <summary>
            The standard Windows SYSTEMTIME structure.
            </summary>
        </member>
        <member name="T:Cuemon.Globalization.TimeZoneInfo.TZI">
            <summary>
            The layout of the Tzi value in the registry.
            </summary>
        </member>
        <member name="T:Cuemon.Globalization.TimeZoneInfoDictionary`1">
            <summary>
            Represents a dictionary of all available time zone representations found in registry (SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones).
            </summary>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Globalization.TimeZoneInfoDictionary`1"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.Add(Cuemon.Globalization.TimeZoneInfoKey,`0)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.Add(System.Collections.Generic.KeyValuePair{Cuemon.Globalization.TimeZoneInfoKey,`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.Contains(System.Collections.Generic.KeyValuePair{Cuemon.Globalization.TimeZoneInfoKey,`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.CopyTo(System.Collections.Generic.KeyValuePair{Cuemon.Globalization.TimeZoneInfoKey,`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.Remove(System.Collections.Generic.KeyValuePair{Cuemon.Globalization.TimeZoneInfoKey,`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.ContainsKey(Cuemon.Globalization.TimeZoneInfoKey)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.Remove(Cuemon.Globalization.TimeZoneInfoKey)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.TryGetValue(Cuemon.Globalization.TimeZoneInfoKey,`0@)">
            <summary>
            Gets the value associated with the specified key. 
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cuemon.Globalization.TimeZoneInfoDictionary`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Cuemon.Globalization.TimeZoneInfoDictionary`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:Cuemon.Globalization.TimeZoneInfoDictionary`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Cuemon.Globalization.TimeZoneInfoDictionary`1.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Cuemon.Globalization.TimeZoneInfoDictionary`1.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Cuemon.Globalization.TimeZoneInfoDictionary`1.Item(Cuemon.Globalization.TimeZoneInfoKey)">
            <summary>
            Gets or sets the <see cref="T:Cuemon.Globalization.TimeZoneInfo"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Cuemon.Globalization.TimeZoneInfoKey">
            <summary>
            Defines all the available time zone values as specified by Microsoft registry entry; SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.Undefined">
            <summary>
            Undefined TimeZoneInfo Key!
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.AfghanistanStandardTime">
            <summary>
            Afghanistan Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.AlaskanStandardTime">
            <summary>
            Alaskan Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.ArabStandardTime">
            <summary>
            Arab Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.ArabianStandardTime">
            <summary>
            Arabian Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.AtlanticStandardTime">
            <summary>
            Atlantic Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.AusCentralStandardTime">
            <summary>
            AUS Central Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.AusEasternStandardTime">
            <summary>
            AUS Eastern Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.AzerbaijanStandardTime">
            <summary>
            Azerbaijan Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.AzoresStandardTime">
            <summary>
            Azores Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CanadaCentralStandardTime">
            <summary>
            Canada Central Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CapeVerdeStandardTime">
            <summary>
            Cape Verde Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CaucasusStandardTime">
            <summary>
            Caucasus Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CenAustraliaStandardTime">
            <summary>
            Cen. Australia Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CentralAmericaStandardTime">
            <summary>
            Central America Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CentralAsiaStandardTime">
            <summary>
            Central Asia Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CentralBrazilianStandardTime">
            <summary>
            Central Brazilian Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CentralEuropeStandardTime">
            <summary>
            Central Europe Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CentralEuropeanStandardTime">
            <summary>
            Central European Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CentralPacificStandardTime">
            <summary>
            Central Pacific Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CentralStandardTime">
            <summary>
            Central Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.CentralStandardTimeMexico">
            <summary>
            Central Standard Time (Mexico)
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.ChinaStandardTime">
            <summary>
            China Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.DatelineStandardTime">
            <summary>
            Dateline Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.EAfricaStandardTime">
            <summary>
            E. Africa Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.EAustraliaStandardTime">
            <summary>
            E. Australia Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.EEuropeStandardTime">
            <summary>
            E. Europe Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.ESouthAmericaStandardTime">
            <summary>
            E. South America Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.EasternStandardTime">
            <summary>
            Eastern Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.EgyptStandardTime">
            <summary>
            Egypt Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.EkaterinburgStandardTime">
            <summary>
            Ekaterinburg Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.FijiStandardTime">
            <summary>
            Fiji Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.FleStandardTime">
            <summary>
            FLE Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.GeorgianStandardTime">
            <summary>
            Georgian Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.GmtStandardTime">
            <summary>
            GMT Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.GreenlandStandardTime">
            <summary>
            Greenland Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.GreenwichStandardTime">
            <summary>
            Greenwich Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.GtbStandardTime">
            <summary>
            GTB Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.HawaiianStandardTime">
            <summary>
            Hawaiian Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.IndiaStandardTime">
            <summary>
            India Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.IranStandardTime">
            <summary>
            Iran Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.IsraelStandardTime">
            <summary>
            Israel Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.JordanStandardTime">
            <summary>
            Jordan Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.KoreaStandardTime">
            <summary>
            Korea Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.MidAtlanticStandardTime">
            <summary>
            Mid-Atlantic Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.MiddleEastStandardTime">
            <summary>
            Middle East Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.MountainStandardTime">
            <summary>
            Mountain Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.MountainStandardTimeMexico">
            <summary>
            Mountain Standard Time (Mexico)
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.MyanmarStandardTime">
            <summary>
            Myanmar Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.NCentralAsiaStandardTime">
            <summary>
            N. Central Asia Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.NamibiaStandardTime">
            <summary>
            Namibia Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.NepalStandardTime">
            <summary>
            Nepal Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.NewZealandStandardTime">
            <summary>
            New Zealand Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.NewfoundlandStandardTime">
            <summary>
            Newfoundland Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.NorthAsiaEastStandardTime">
            <summary>
            North Asia East Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.NorthAsiaStandardTime">
            <summary>
            North Asia Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.PacificSAStandardTime">
            <summary>
            Pacific SA Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.PacificStandardTime">
            <summary>
            Pacific Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.PacificStandardTimeMexico">
            <summary>
            Pacific Standard Time (Mexico)
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.RomanceStandardTime">
            <summary>
            Romance Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.RussianStandardTime">
            <summary>
            Russian Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.SAEasternStandardTime">
            <summary>
            SA Eastern Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.SAPacificStandardTime">
            <summary>
            SA Pacific Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.SAWesternStandardTime">
            <summary>
            SA Western Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.SamoaStandardTime">
            <summary>
            Samoa Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.SEAsiaStandardTime">
            <summary>
            SE Asia Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.SingaporeStandardTime">
            <summary>
            Singapore Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.SouthAfricaStandardTime">
            <summary>
            South Africa Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.SriLankaStandardTime">
            <summary>
            Sri Lanka Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.TaipeiStandardTime">
            <summary>
            Taipei Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.TasmaniaStandardTime">
            <summary>
            Tasmania Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.TokyoStandardTime">
            <summary>
            Tokyo Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.TongaStandardTime">
            <summary>
            Tonga Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.UsEasternStandardTime">
            <summary>
            US Eastern Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.UsMountainStandardTime">
            <summary>
            US Mountain Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.VladivostokStandardTime">
            <summary>
            Vladivostok Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.WAustraliaStandardTime">
            <summary>
            W. Australia Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.WCentralAfricaStandardTime">
            <summary>
            W. Central Africa Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.WEuropeStandardTime">
            <summary>
            W. Europe Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.WestAsiaStandardTime">
            <summary>
            West Asia Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.WestPacificStandardTime">
            <summary>
            West Pacific Standard Time
            </summary>
        </member>
        <member name="F:Cuemon.Globalization.TimeZoneInfoKey.YakutskStandardTime">
            <summary>
            Yakutsk Standard Time
            </summary>
        </member>
        <member name="T:Cuemon.IO.FileBase">
            <summary>
            Exposes an abstract interface for reading common properties of a file as well as content of the file.
            </summary>
        </member>
        <member name="M:Cuemon.IO.FileBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.FileBase"/> class.
            </summary>
            <param name="fileLocation">The location of the file to represent.</param>
        </member>
        <member name="M:Cuemon.IO.FileBase.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.FileBase"/> class.
            </summary>
            <param name="fileLocation">The <see cref="T:System.Uri"/> of the file to represent.</param>
        </member>
        <member name="M:Cuemon.IO.FileBase.GetCacheValidator">
            <summary>
            Gets a <see cref="T:Cuemon.Caching.CacheValidator"/> object that represents the content of the resource.
            </summary>
            <returns>A <see cref="T:Cuemon.Caching.CacheValidator"/> object that represents the content of the resource.</returns>
            <remarks>If unable to resolve the attributes of the file, the <see cref="T:Cuemon.Caching.CacheValidator"/> object of this property is initialized with <see cref="F:System.DateTime.MinValue"/> values.</remarks>
        </member>
        <member name="M:Cuemon.IO.FileBase.GetValidUriSchemes">
            <summary>
            Gets all the currently supported URI schemes for a file location.
            </summary>
            <returns>An <see cref="T:System.Array"/> of all the currently supported URI schemes for a file location.</returns>
        </member>
        <member name="M:Cuemon.IO.FileBase.ToStream">
            <summary>
            Creates and returns a <see cref="T:System.IO.Stream"/> representation of the file content.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> object.</returns>
        </member>
        <member name="P:Cuemon.IO.FileBase.CanAccess">
            <summary>
            Gets or sets a value indicating whether this file can be accessed.
            </summary>
            <value><c>true</c> if this file can be accessed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.IO.FileBase.UriLocation">
            <summary>
            Gets the location of the file as an URI.
            </summary>
            <value>The location of the file as an URI.</value>
        </member>
        <member name="T:Cuemon.IO.XmlFile">
            <summary>
            Exposes an interface for reading common properties of a XML file.
            </summary>
        </member>
        <member name="M:Cuemon.IO.XmlFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.IO.XmlFile"/> class.
            </summary>
            <param name="fileLocation">The file location.</param>
        </member>
        <member name="T:Cuemon.Net.NetDependency">
            <summary>
            This <see cref="T:Cuemon.Net.NetDependency"/> class will monitor any changes occurred to a Uniform Resource Identifier while notifying subscribing objects.
            </summary>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="value">The URI string to monitor for changes.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="value">The URI to monitor for changes.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. The <paramref name="checkResponseData"/> is useful, when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="dueTime">The amount of time to delay before the associated <see cref="T:Cuemon.Net.NetWatcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.Boolean,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke. The <paramref name="checkResponseData"/> is useful when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.Uri},System.Boolean,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="dueTime">The amount of time to delay before the associated <see cref="T:Cuemon.Net.NetWatcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            <remarks>The <paramref name="checkResponseData"/> is useful when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI string locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI string locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. The <paramref name="checkResponseData"/> is useful, when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="dueTime">The amount of time to delay before the associated <see cref="T:Cuemon.Net.NetWatcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <remarks>The <paramref name="checkResponseData"/> is useful when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <param name="dueTime">The amount of time to delay before the associated <see cref="T:Cuemon.Net.NetWatcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <remarks>The <paramref name="checkResponseData"/> is useful when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An array of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <param name="values">An array of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. The <paramref name="checkResponseData"/> is useful, when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.TimeSpan,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="values">An array of URI string locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.TimeSpan,System.TimeSpan,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="dueTime">The amount of time to delay before the associated <see cref="T:Cuemon.Net.NetWatcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            <param name="values">An array of URI string locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Boolean,System.TimeSpan,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="values">An array of URI string locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <remarks>The <paramref name="checkResponseData"/> is useful when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Boolean,System.TimeSpan,System.TimeSpan,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="dueTime">The amount of time to delay before the associated <see cref="T:Cuemon.Net.NetWatcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            <param name="values">An array of URI string locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <remarks>The <paramref name="checkResponseData"/> is useful when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="values">An array of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Boolean,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <param name="values">An array of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <remarks>The signaling is default delayed 15 seconds before first invoke. Signaling occurs every 2 minutes. The <paramref name="checkResponseData"/> is useful, when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.TimeSpan,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="values">An array of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.TimeSpan,System.TimeSpan,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="dueTime">The amount of time to delay before the associated <see cref="T:Cuemon.Net.NetWatcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            <param name="values">An array of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Boolean,System.TimeSpan,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="values">An array of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <remarks>The <paramref name="checkResponseData"/> is useful when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetDependency.#ctor(System.Boolean,System.TimeSpan,System.TimeSpan,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetDependency"/> class.
            </summary>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <param name="period">The time interval between periodic signaling to the specified <paramref name="values"/> by the associated <see cref="T:Cuemon.Net.NetWatcher"/>. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="dueTime">The amount of time to delay before the associated <see cref="T:Cuemon.Net.NetWatcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            <param name="values">An array of URI locations that this <see cref="T:Cuemon.Net.NetDependency"/> will monitor. When any of these resources changes, this <see cref="T:Cuemon.Net.NetDependency"/> will notify any subscribing objects of the change.</param>
            <remarks>The <paramref name="checkResponseData"/> is useful when the web server you are probing does not contain the Last-Modified header.</remarks>
        </member>
        <member name="P:Cuemon.Net.NetDependency.HasChanged">
            <summary>
            Gets a value indicating whether the <see cref="T:Cuemon.Dependency"/> object has changed.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:Cuemon.Dependency"/> object has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cuemon.Net.NetWatcher">
            <summary>
            A <see cref="T:Cuemon.Watcher"/> implementation, that can monitor and signal changes of one or more URI locations by raising the <see cref="E:Cuemon.Watcher.Changed"/> event.
            </summary>
        </member>
        <member name="T:Cuemon.Watcher">
            <summary>
            An abstract class for establishing a watcher, that can monitor and signal changes of a resource by raising the <see cref="E:Cuemon.Watcher.Changed"/> event.
            </summary>
        </member>
        <member name="M:Cuemon.Watcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Watcher"/> class, where the signaling is initiated immediately and hereby followed by a periodic signaling every 2 minutes.
            </summary>
        </member>
        <member name="M:Cuemon.Watcher.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Watcher"/> class, where the signaling is initiated immediately.
            </summary>
            <param name="period">The time interval between periodic signaling. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
        </member>
        <member name="M:Cuemon.Watcher.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Watcher"/> class.
            </summary>
            <param name="dueTime">A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the <see cref="T:Cuemon.Watcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            <param name="period">The time interval between periodic signaling. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
        </member>
        <member name="M:Cuemon.Watcher.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Watcher"/> class.
            </summary>
            <param name="dueTime">A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the <see cref="T:Cuemon.Watcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            <param name="period">The time interval between periodic signaling. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <param name="dueTimeOnChanged">The amount of time to postpone a <see cref="E:Cuemon.Watcher.Changed"/> event. Specify zero (0) to disable postponing.</param>
        </member>
        <member name="M:Cuemon.Watcher.SetUtcLastModified(System.DateTime)">
            <summary>
            Marks the time when a resource being monitored was last changed.
            </summary>
            <param name="utcLastModified">The time when a resource being monitored was last changed.</param>
        </member>
        <member name="M:Cuemon.Watcher.HandleSignaling">
            <summary>
            Handles the signaling of this <see cref="T:Cuemon.Watcher"/>.
            </summary>
        </member>
        <member name="M:Cuemon.Watcher.OnChangedRaised">
            <summary>
            Raises the <see cref="E:Cuemon.Watcher.Changed"/> event.
            </summary>
            <remarks>This method raises the <see cref="E:Cuemon.Watcher.Changed"/> event with <see cref="P:Cuemon.Watcher.UtcLastModified"/> and <see cref="P:Cuemon.Watcher.DueTimeOnChanged"/> passed to a new instance of <see cref="T:Cuemon.WatcherEventArgs"/>.</remarks>
        </member>
        <member name="M:Cuemon.Watcher.OnChangedRaised(Cuemon.WatcherEventArgs)">
            <summary>
            Raises the <see cref="E:Cuemon.Watcher.Changed"/> event.
            </summary>
            <param name="e">The <see cref="T:Cuemon.WatcherEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cuemon.Watcher.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cuemon.Watcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:Cuemon.Watcher.Changed">
            <summary>
            Occurs when a resource has changed.
            </summary>
        </member>
        <member name="P:Cuemon.Watcher.UtcLastModified">
            <summary>
            Gets time when the resource being monitored was last changed.
            </summary>
            <value>The time when the resource being monitored was last changed.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="P:Cuemon.Watcher.UtcLastSignaled">
            <summary>
            Gets the time when the last signaling occurred.
            </summary>
            <value>The time when the last signaling occurred.</value>
            <remarks>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</remarks>
        </member>
        <member name="P:Cuemon.Watcher.DueTime">
            <summary>
            Gets or sets the <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the <see cref="T:Cuemon.Watcher"/> starts signaling.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before the <see cref="T:Cuemon.Watcher"/> starts signaling.</value>
            <remarks>If <see cref="P:Cuemon.Watcher.DueTime"/> is zero (0), the signaling is started immediately. If <see cref="P:Cuemon.Watcher.DueTime"/> is negative one (-1) milliseconds, the signaling is never started; and the underlying timer is disabled, but can be re-enabled by specifying a positive value for <see cref="P:Cuemon.Watcher.DueTime"/> property.</remarks>
        </member>
        <member name="P:Cuemon.Watcher.Period">
            <summary>
            Gets or sets the time interval between periodic signaling.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> representing the time interval between periodic signaling.</value>
            <remarks>If <see cref="P:Cuemon.Watcher.Period"/> is zero (0) or negative one (-1) milliseconds, and <see cref="P:Cuemon.Watcher.DueTime"/> is positive, the signaling is done once; the periodic behavior of the underlying timer is disabled, but can be re-enabled by specifying a value greater than zero for <see cref="P:Cuemon.Watcher.Period"/> property.</remarks>
        </member>
        <member name="P:Cuemon.Watcher.DueTimeOnChanged">
            <summary>
            Gets the amount of time to postpone a <see cref="E:Cuemon.Watcher.Changed"/> event.
            </summary>
        </member>
        <member name="M:Cuemon.Net.NetWatcher.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetWatcher"/> class.
            </summary>
            <param name="requestUri">The request URI to monitor for changes.</param>
            <remarks>Monitors the provided <paramref name="requestUri"/> for changes in an interval of two minutes, using the last modified timestamp of the ressource.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetWatcher.#ctor(System.Uri,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetWatcher"/> class.
            </summary>
            <param name="requestUri">The request URI to monitor for changes.</param>
            <param name="period">The time interval between periodic signaling for changes of provided <paramref name="requestUri"/>.</param>
            <remarks>Monitors the provided <paramref name="requestUri"/> for changes in an interval specified by <paramref name="period"/>, using the last modified time stamp of the resource.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetWatcher.#ctor(System.Uri,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetWatcher"/> class.
            </summary>
            <param name="requestUri">The request URI to monitor for changes.</param>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <remarks>Monitors the provided <paramref name="requestUri"/> for changes in an interval of two minutes, determined by <paramref name="checkResponseData"/>.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetWatcher.#ctor(System.Uri,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetWatcher"/> class.
            </summary>
            <param name="requestUri">The request URI to monitor for changes.</param>
            <param name="period">The time interval between periodic signaling for changes of provided <paramref name="requestUri"/>.</param>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <remarks>Monitors the provided <paramref name="requestUri"/> for changes in an interval specified by <paramref name="period"/>, determined by <paramref name="checkResponseData"/>. The signaling is default delayed 15 seconds before first invoke.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetWatcher.#ctor(System.Uri,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Net.NetWatcher"/> class.
            </summary>
            <param name="requestUri">The request URI to monitor for changes.</param>
            <param name="period">The time interval between periodic signaling for changes of provided <paramref name="requestUri"/>.</param>
            <param name="dueTime">The amount of time to delay before the associated <see cref="T:Cuemon.Watcher"/> starts signaling. Specify negative one (-1) milliseconds to prevent the signaling from starting. Specify zero (0) to start the signaling immediately.</param>
            <param name="checkResponseData">if set to <c>true</c>, a MD5 hash check of the response data is used to determine a change state of the resource; <c>false</c> to check only for the last modification of the resource.</param>
            <remarks>Monitors the provided <paramref name="requestUri"/> for changes in an interval specified by <paramref name="period"/>, determined by <paramref name="checkResponseData"/>.</remarks>
        </member>
        <member name="M:Cuemon.Net.NetWatcher.HandleSignaling">
            <summary>
            Handles the signaling of this <see cref="T:Cuemon.Net.NetWatcher"/>.
            </summary>
        </member>
        <member name="P:Cuemon.Net.NetWatcher.CheckResponseData">
            <summary>
            Gets a value indicating whether to perform a MD5 hash-check of the response data from the <see cref="P:Cuemon.Net.NetWatcher.RequestUri"/>.
            </summary>
            <value><c>true</c> to perform a MD5 hash-check of the response data from the <see cref="P:Cuemon.Net.NetWatcher.RequestUri"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cuemon.Net.NetWatcher.RequestUri">
            <summary>
            Gets the associated request URI of this <see cref="T:Cuemon.Net.NetWatcher"/>.
            </summary>
            <value>The associated request URI of this <see cref="T:Cuemon.Net.NetWatcher"/>.</value>
        </member>
        <member name="P:Cuemon.Net.NetWatcher.Scheme">
            <summary>
            Gets the <see cref="T:Cuemon.UriScheme"/> of this <see cref="T:Cuemon.Net.NetWatcher"/>.
            </summary>
            <value>An <see cref="T:Cuemon.UriScheme"/> of this <see cref="T:Cuemon.Net.NetWatcher"/>.</value>
        </member>
        <member name="T:Cuemon.Net.NetUtility">
            <summary>
            This utility class is designed to make various net related operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Net.NetUtility.CanAccess(System.Net.WebRequest)">
            <summary>
            Determines whether the provided <see cref="T:System.Net.WebRequest"/> successfully can establish a <see cref="T:System.Net.WebResponse"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.WebRequest"/> to check for a <see cref="T:System.Net.WebResponse"/>.</param>
            <returns>
            	<c>true</c> if the provided <see cref="T:System.Net.WebRequest"/> successfully can establish a <see cref="T:System.Net.WebResponse"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.Net.NetUtility.GetResponse(System.Net.WebRequest)">
            <summary>
            Gets the <see cref="T:System.Net.WebResponse"/> of the <see cref="T:System.Net.WebRequest"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.WebRequest"/> to initiate a <see cref="T:System.Net.WebResponse"/> from.</param>
            <returns>A <see cref="T:System.Net.WebResponse"/> object, not suffering from the vexing exception design by Microsoft.</returns>
            <remarks>
            More about vexing design can be found here: http://blogs.msdn.com/ericlippert/archive/2008/09/10/vexing-exceptions.aspx
            Thanks for the enlightenment goes to this URL: http://stackoverflow.com/questions/1366848/httpwebrequest-getresponse-throws-webexception-on-http-304
            </remarks>
        </member>
        <member name="M:Cuemon.Net.NetUtility.GetResponse(System.IAsyncResult)">
            <summary>
            Gets the <see cref="T:System.Net.WebResponse"/> from the asynchronous request returned by the <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/> method.
            </summary>
            <param name="result">An <see cref="T:System.IAsyncResult"/> that references a pending request for a response.</param>
            <returns>A <see cref="T:System.Net.WebResponse"/> object, not suffering from the vexing exception design by Microsoft.</returns>
            <remarks>
            More about vexing design can be found here: http://blogs.msdn.com/ericlippert/archive/2008/09/10/vexing-exceptions.aspx
            Thanks for the enlightenment goes to this URL: http://stackoverflow.com/questions/1366848/httpwebrequest-getresponse-throws-webexception-on-http-304
            </remarks>
        </member>
        <member name="M:Cuemon.Net.NetUtility.GetFileWebResponse(System.Net.WebRequest)">
            <summary>
            Gets the <see cref="T:System.Net.FileWebResponse"/> of the <see cref="T:System.Net.FileWebRequest"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.WebRequest"/> to initiate a <see cref="T:System.Net.FileWebResponse"/> from.</param>
            <returns>A <see cref="T:System.Net.FileWebResponse"/> object, not suffering from the vexing exception design by Microsoft.</returns>
            <remarks>
            More about vexing design can be found here: http://blogs.msdn.com/ericlippert/archive/2008/09/10/vexing-exceptions.aspx
            Thanks for the enlightenment goes to this URL: http://stackoverflow.com/questions/1366848/httpwebrequest-getresponse-throws-webexception-on-http-304
            </remarks>
        </member>
        <member name="M:Cuemon.Net.NetUtility.GetFileWebResponse(System.IAsyncResult)">
            <summary>
            Gets the <see cref="T:System.Net.FileWebResponse"/> from the asynchronous request returned by the <see cref="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/> method.
            </summary>
            <param name="result">An <see cref="T:System.IAsyncResult"/> that references a pending request for a response.</param>
            <returns>A <see cref="T:System.Net.FileWebResponse"/> object, not suffering from the vexing exception design by Microsoft.</returns>
            <remarks>
            More about vexing design can be found here: http://blogs.msdn.com/ericlippert/archive/2008/09/10/vexing-exceptions.aspx
            Thanks for the enlightenment goes to this URL: http://stackoverflow.com/questions/1366848/httpwebrequest-getresponse-throws-webexception-on-http-304
            </remarks>
        </member>
        <member name="M:Cuemon.Net.NetUtility.GetFtpWebResponse(System.Net.WebRequest)">
            <summary>
            Gets the <see cref="T:System.Net.FtpWebResponse"/> of the <see cref="T:System.Net.FtpWebRequest"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.WebRequest"/> to initiate a <see cref="T:System.Net.FtpWebResponse"/> from.</param>
            <returns>A <see cref="T:System.Net.FtpWebResponse"/> object, not suffering from the vexing exception design by Microsoft.</returns>
            <remarks>
            More about vexing design can be found here: http://blogs.msdn.com/ericlippert/archive/2008/09/10/vexing-exceptions.aspx
            Thanks for the enlightenment goes to this URL: http://stackoverflow.com/questions/1366848/httpwebrequest-getresponse-throws-webexception-on-http-304
            </remarks>
        </member>
        <member name="M:Cuemon.Net.NetUtility.GetFtpWebResponse(System.IAsyncResult)">
            <summary>
            Gets the <see cref="T:System.Net.FtpWebResponse"/> from the asynchronous request returned by the <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/> method.
            </summary>
            <param name="result">An <see cref="T:System.IAsyncResult"/> that references a pending request for a response.</param>
            <returns>A <see cref="T:System.Net.FtpWebResponse"/> object, not suffering from the vexing exception design by Microsoft.</returns>
            <remarks>
            More about vexing design can be found here: http://blogs.msdn.com/ericlippert/archive/2008/09/10/vexing-exceptions.aspx
            Thanks for the enlightenment goes to this URL: http://stackoverflow.com/questions/1366848/httpwebrequest-getresponse-throws-webexception-on-http-304
            </remarks>
        </member>
        <member name="M:Cuemon.Net.NetUtility.GetHttpWebResponse(System.Net.WebRequest)">
            <summary>
            Gets the <see cref="T:System.Net.HttpWebResponse"/> of the <see cref="T:System.Net.HttpWebRequest"/> instance.
            </summary>
            <param name="request">The <see cref="T:System.Net.WebRequest"/> to initiate a <see cref="T:System.Net.HttpWebResponse"/> from.</param>
            <returns>A <see cref="T:System.Net.HttpWebResponse"/> object, not suffering from the vexing exception design by Microsoft.</returns>
            <remarks>
            More about vexing design can be found here: http://blogs.msdn.com/ericlippert/archive/2008/09/10/vexing-exceptions.aspx
            Thanks for the enlightenment goes to this URL: http://stackoverflow.com/questions/1366848/httpwebrequest-getresponse-throws-webexception-on-http-304
            </remarks>
        </member>
        <member name="M:Cuemon.Net.NetUtility.GetHttpWebResponse(System.IAsyncResult)">
            <summary>
            Gets the <see cref="T:System.Net.HttpWebResponse"/> of the asynchronous <see cref="T:System.Net.HttpWebRequest"/> instance.
            </summary>
            <param name="result">An <see cref="T:System.IAsyncResult"/> that references a pending HTTP request for a HTTP response.</param>
            <returns>A <see cref="T:System.Net.WebResponse"/> object, not suffering from the vexing exception design by Microsoft.</returns>
            <remarks>
            More about vexing design can be found here: http://blogs.msdn.com/ericlippert/archive/2008/09/10/vexing-exceptions.aspx
            Thanks for the enlightenment goes to this URL: http://stackoverflow.com/questions/1366848/httpwebrequest-getresponse-throws-webexception-on-http-304
            </remarks>
        </member>
        <member name="T:Cuemon.RoundOffAccuracy">
            <summary>
            The accuracy of a rounding for a computed number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestTenth">
            <summary>
            Specifies a rounding to the nearest tenth of a number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestHundredth">
            <summary>
            Specifies a rounding to the nearest hundredth of a number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestThousandth">
            <summary>
            Specifies a rounding to the nearest thousandth of a number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestTenThousandth">
            <summary>
            Specifies a rounding to the nearest ten thousandth of a number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestHundredThousandth">
            <summary>
            Specifies a rounding to the nearest hundred thousandth of a number.
            </summary>
        </member>
        <member name="F:Cuemon.RoundOffAccuracy.NearestMillion">
            <summary>
            Specifies a rounding to the nearest million of a number.
            </summary>
        </member>
        <member name="T:Cuemon.NumberUtility">
            <summary>
            This utility class is designed to make number operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.NumberUtility.IsEven(System.Int32)">
            <summary>
            Determines whether the specified <paramref name="value"/> is an even number.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is an even number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.IsOdd(System.Int32)">
            <summary>
            Determines whether the specified <paramref name="value"/> is an odd number.
            </summary>
            <param name="value">The value to evaluate.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is an odd number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.IsNumeric(System.String)">
            <summary>
            Determines whether the specified value can be evaluated as a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <returns><c>true</c> if the specified value can be evaluated as a number; otherwise, <c>false</c>.</returns>
            <remarks>
            This method implements a default permitted format of <paramref name="value"/> as <see cref="F:System.Globalization.NumberStyles.Number"/>.<br/>
            This method implements a default culture-specific formatting information about <paramref name="value"/> specified to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </remarks>
        </member>
        <member name="M:Cuemon.NumberUtility.IsNumeric(System.String,System.Globalization.NumberStyles)">
            <summary>
            Determines whether the specified value can be evaluated as a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <returns><c>true</c> if the specified value can be evaluated as a number; otherwise, <c>false</c>.</returns>
            <remarks>This method implements a default culture-specific formatting information about <paramref name="value"/> specified to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.</remarks>
        </member>
        <member name="M:Cuemon.NumberUtility.IsNumeric(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Determines whether the specified value can be evaluated as a number.
            </summary>
            <param name="value">The value to be evaluated.</param>
            <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <returns><c>true</c> if the specified value can be evaluated as a number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.RoundOff(System.Double,Cuemon.RoundOffAccuracy)">
            <summary>
            Rounds a double-precision floating-point value to the nearest integral value closest to the specified <paramref name="accuracy"/>.
            </summary>
            <param name="value">A double-precision floating-point number to be rounded.</param>
            <param name="accuracy">The accuracy to use in the rounding.</param>
            <returns>
            The integer value closest to the specified <paramref name="accuracy"/> of <paramref name="value"/>.<br/>
            Note that this method returns a <see cref="T:System.Double"/> instead of an integral type.
            </returns>
        </member>
        <member name="M:Cuemon.NumberUtility.BytesToKilobytes(System.Int64)">
            <summary>
            Converts the specified <paramref name="bytes"/> to its equivalent representation in kilobytes.
            </summary>
            <param name="bytes">The bytes to be converted.</param>
            <returns>A kilobyte representation equivalent to the specified <paramref name="bytes"/>.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.BytesToMegabytes(System.Int64)">
            <summary>
            Converts the specified <paramref name="bytes"/> to its equivalent representation in megabytes.
            </summary>
            <param name="bytes">The bytes to be converted.</param>
            <returns>A megabyte representation equivalent to the specified <paramref name="bytes"/>.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.BytesToGigabytes(System.Int64)">
            <summary>
            Converts the specified <paramref name="bytes"/> to its equivalent representation in gigabytes.
            </summary>
            <param name="bytes">The bytes to be converted.</param>
            <returns>A gigabyte representation equivalent to the specified <paramref name="bytes"/>.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.BytesToTerabytes(System.Int64)">
            <summary>
            Converts the specified <paramref name="bytes"/> to its equivalent representation in terabytes.
            </summary>
            <param name="bytes">The bytes to be converted.</param>
            <returns>A terabyte representation equivalent to the specified <paramref name="bytes"/>.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.IsPrime(System.Int32)">
            <summary>
            Determines whether the specified <paramref name="value"/> is a prime number.
            </summary>
            <param name="value">The positive integer to determine whether is a prime number.</param>
            <returns><c>true</c> if the specified <paramref name="value"/> is a prime number; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> has a value smaller than 0.
            </exception>
        </member>
        <member name="M:Cuemon.NumberUtility.Factorial(System.Double)">
            <summary>
            Calculates the factorial of a positive integer <paramref name="n"/> denoted by n!.
            </summary>
            <param name="n">The positive integer to calculate a factorial number by.</param>
            <returns>The factorial number calculated from <paramref name="n"/>, or <see cref="F:System.Double.PositiveInfinity"/> if <paramref name="n"/> is to high a value.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetHighestValue(System.Int32[])">
            <summary>
            Gets the highest <see cref="T:System.Int32"/> value of the specified <see cref="T:System.Int32"/> values.
            </summary>
            <param name="values">A variable number of <see cref="T:System.Int32"/> values to parse for the highest value.</param>
            <returns>The highest <see cref="T:System.Int32"/> value of the specified <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetHighestValue(System.Int64[])">
            <summary>
            Gets the highest <see cref="T:System.Int64"/> value of the specified <see cref="T:System.Int64"/> values.
            </summary>
            <param name="values">A variable number of <see cref="T:System.Int64"/> values to parse for the highest value.</param>
            <returns>The highest <see cref="T:System.Int64"/> value of the specified <see cref="T:System.Int64"/> values.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetHighestValue(System.Double[])">
            <summary>
            Gets the highest <see cref="T:System.Double"/> value of the specified <see cref="T:System.Double"/> values.
            </summary>
            <param name="values">A variable number of <see cref="T:System.Double"/> values to parse for the highest value.</param>
            <returns>The highest <see cref="T:System.Double"/> value of the specified <see cref="T:System.Double"/> values.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetHighestValue(System.Decimal[])">
            <summary>
            Gets the highest <see cref="T:System.Decimal"/> value of the specified <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="values">A variable number of <see cref="T:System.Decimal"/> values to parse for the highest value.</param>
            <returns>The highest <see cref="T:System.Decimal"/> value of the specified <see cref="T:System.Decimal"/> values.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetLowestValue(System.Int32[])">
            <summary>
            Gets the lowest <see cref="T:System.Int32"/> value of the specified <see cref="T:System.Int32"/> values.
            </summary>
            <param name="values">A variable number of <see cref="T:System.Int32"/> values to parse for the lowest value.</param>
            <returns>The lowest <see cref="T:System.Int32"/> value of the specified <see cref="T:System.Int32"/> values.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetLowestValue(System.Int64[])">
            <summary>
            Gets the lowest <see cref="T:System.Int64"/> value of the specified <see cref="T:System.Int64"/> values.
            </summary>
            <param name="values">A variable number of <see cref="T:System.Int64"/> values to parse for the lowest value.</param>
            <returns>The lowest <see cref="T:System.Int64"/> value of the specified <see cref="T:System.Int64"/> values.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetLowestValue(System.Double[])">
            <summary>
            Gets the lowest <see cref="T:System.Double"/> value of the specified <see cref="T:System.Double"/> values.
            </summary>
            <param name="values">A variable number of <see cref="T:System.Double"/> values to parse for the lowest value.</param>
            <returns>The lowest <see cref="T:System.Double"/> value of the specified <see cref="T:System.Double"/> values.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetLowestValue(System.Decimal[])">
            <summary>
            Gets the lowest <see cref="T:System.Decimal"/> value of the specified <see cref="T:System.Decimal"/> values.
            </summary>
            <param name="values">A variable number of <see cref="T:System.Decimal"/> values to parse for the lowest value.</param>
            <returns>The lowest <see cref="T:System.Decimal"/> value of the specified <see cref="T:System.Decimal"/> values.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetRandomNumber">
            <summary>
            Generates a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetRandomNumber(System.Int32)">
            <summary>
            Generates a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return values ordinarily includes zero but not maxValue. However, if maxValue equals zero, maxValue is returned.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Generates a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned. </param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.</returns>
        </member>
        <member name="M:Cuemon.NumberUtility.GetRandomNumber(System.Int32,System.Int32,Cuemon.RandomSeverity)">
            <summary>
            Generates a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <param name="severity">The severity of the random number being generated.</param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="minValue"/> is greater than <paramref name="maxValue"/>
            </exception>
        </member>
        <member name="T:Cuemon.RandomSeverity">
            <summary>
            Specifies the severity of the generation of a random number.
            </summary>
        </member>
        <member name="F:Cuemon.RandomSeverity.Simple">
            <summary>
            A fast but less accurate method of generating a random number.
            </summary>
        </member>
        <member name="F:Cuemon.RandomSeverity.Strong">
            <summary>
            A slower but also more accurate way of generating a random number.
            </summary>
        </member>
        <member name="T:Cuemon.ParseException">
            <summary>
            The exception that is thrown when a parsing operation is in an invalid state.
            </summary>
        </member>
        <member name="M:Cuemon.ParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ParseException"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.ParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ParseException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cuemon.ParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ParseException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Cuemon.ParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.ParseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Cuemon.IO.StreamUtility">
            <summary>
            This utility class is designed to make <see cref="T:System.IO.Stream"/> operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.IO.StreamUtility.RemovePreample(System.IO.Stream)">
            <summary>
            Removes the preamble information (if present) from the specified <see cref="T:System.IO.Stream"/>. The encoding is tried resolved automatically, and will revert to <see cref="P:System.Text.Encoding.Default"/> if no Unicode encoding could be determined.
            </summary>
            <param name="source">The input <see cref="T:System.IO.Stream"/> to process.</param>
            <returns>A <see cref="T:System.IO.Stream"/> without preamble information.</returns>
        </member>
        <member name="M:Cuemon.IO.StreamUtility.RemovePreample(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Removes the preamble information (if present) from the specified <see cref="T:System.IO.Stream"/>, and <paramref name="source"/> is being closed and disposed.
            </summary>
            <param name="source">The input <see cref="T:System.IO.Stream"/> to process.</param>
            <param name="encoding">The encoding to use when determining the preamble to remove.</param>
            <returns>A <see cref="T:System.IO.Stream"/> without preamble information.</returns>
        </member>
        <member name="M:Cuemon.IO.StreamUtility.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Reads all the bytes from the <paramref name="source"/> stream and writes them to the <paramref name="destination"/> stream.
            </summary>
            <param name="source">The stream to read the contents from.</param>
            <param name="destination">The stream that will contain the contents of the <paramref name="source"/> stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="source"/> stream does not support reading.-or-<paramref name="destination"/> does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">Either the <paramref name="source"/> stream or <paramref name="destination"/> were closed before the <see cref="M:Cuemon.IO.StreamUtility.CopyStream(System.IO.Stream,System.IO.Stream)"/> method was called.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        </member>
        <member name="M:Cuemon.IO.StreamUtility.CopyStream(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Reads all the bytes from the <paramref name="source"/> stream and writes them to the <paramref name="destination"/> stream, using the specified buffer size of <paramref name="bufferSize"/>.
            </summary>
            <param name="source">The stream to read the contents from.</param>
            <param name="destination">The stream that will contain the contents of the <paramref name="source"/> stream.</param>
            <param name="bufferSize">The size of the buffer. This value must be greater than zero. The default size is 2048.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> is negative or zero.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="source"/> stream does not support reading.-or-<paramref name="destination"/> does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">Either the <paramref name="source"/> stream or <paramref name="destination"/> were closed before the <see cref="M:Cuemon.IO.StreamUtility.CopyStream(System.IO.Stream,System.IO.Stream)"/> method was called.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
        </member>
        <member name="M:Cuemon.IO.StreamUtility.CopyStream(System.IO.Stream)">
            <summary>
            Creates and returns a seekable copy of the source <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The source <see cref="T:System.IO.Stream"/> to create a copy from.</param>
            <returns>A seekable <see cref="T:System.IO.Stream"/> that will contain the contents of the source stream.</returns>
        </member>
        <member name="M:Cuemon.IO.StreamUtility.CopyStream(System.IO.Stream,System.Boolean)">
            <summary>
            Creates and returns a seekable copy of the source <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="source">The source <see cref="T:System.IO.Stream"/> to create a copy from.</param>
            <param name="leaveStreamOpen">if <c>true</c>, the source <see cref="T:System.IO.Stream"/> is being left open; otherwise it is being closed and disposed.</param>
            <returns>A seekable <see cref="T:System.IO.Stream"/> that will contain the contents of the source stream.</returns>
        </member>
        <member name="M:Cuemon.IO.StreamUtility.CombineStreams(System.IO.Stream[])">
            <summary>
            Combines a variable number of streams into one stream.
            </summary>
            <param name="streams">The streams to combine.</param>
            <returns>A variable number of <b>streams</b> combined into one <b>stream</b>.</returns>
        </member>
        <member name="T:Cuemon.Net.IPAddressUtility">
            <summary>
            This utility class is designed to make IP related operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Net.IPAddressUtility.IsIPv6Address(System.String)">
            <summary>
            Determines whether the specified host address is an address for IP version 6.
            </summary>
            <param name="hostAddress">The host IP address to resolve.</param>
            <returns>
            	<c>true</c> if the specified host address is an address for IP version 6; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.Net.IPAddressUtility.IsIPv4Address(System.String)">
            <summary>
            Determines whether the specified host address is an IP address for version 4.
            </summary>
            <param name="hostAddress">The host IP address to resolve.</param>
            <returns>
            	<c>true</c> if the specified host address is an IP address for version 4; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.Net.IPAddressUtility.IsLocal(System.String)">
            <summary>
            Determines whether the specified host address matches a local IP address.
            </summary>
            <param name="hostAddress">The IP address to match against (can be in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation) .</param>
            <returns>
            	<c>true</c> if the specified host address matches a local IP address; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Cuemon.Reflection.ReflectionUtility">
            <summary>
            This utility class is designed to make <see cref="N:Cuemon.Reflection"/> operations easier to work with.
            </summary>
        </member>
        <member name="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublic">
            <summary>
            Specifies that public instance members are to be included in the search.
            </summary>
            <remarks>Returns the the following <see cref="T:System.Reflection.BindingFlags"/> combination: BindingFlags.Instance | BindingFlags.Public.</remarks>
        </member>
        <member name="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivate">
            <summary>
            Specifies that public and none-public instance members are to be included in the search.
            </summary>
            <remarks>Returns the the following <see cref="T:System.Reflection.BindingFlags"/> combination: BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic.</remarks>
        </member>
        <member name="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInherited">
            <summary>
            Specifies that public and none-public instance members are to be included in the search. Inherited members are excluded from the search.
            </summary>
            <remarks>Returns the the following <see cref="T:System.Reflection.BindingFlags"/> combination: BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly.</remarks>
        </member>
        <member name="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic">
            <summary>
            Specifies that public and none-public instance and static members are to be included in the search. Inherited members are excluded from the search.
            </summary>
            <remarks>Returns the the following <see cref="T:System.Reflection.BindingFlags"/> combination: BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly | BindingFlags.Static.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.HasCircularReference``1(``0)">
            <summary>
            Determines whether the specified <paramref name="source"/> has a circular reference.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The source to check for circular reference.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> has a circular reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.HasCircularReference``1(``0,System.Int32)">
            <summary>
            Determines whether the specified <paramref name="source"/> has a circular reference.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The source to check for circular reference.</param>
            <param name="maxDepth">The maximum depth to traverse of <paramref name="source"/>.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> has a circular reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.HasCircularReference``1(``0,System.Int32,Cuemon.Doer{System.Reflection.ParameterInfo[],System.Object[]})">
            <summary>
            Determines whether the specified <paramref name="source"/> has a circular reference.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The source to check for circular reference.</param>
            <param name="maxDepth">The maximum depth to traverse of <paramref name="source"/>.</param>
            <param name="propertyIndexParametersResolver">The function delegate that is invoked if a property has one or more index parameters.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> has a circular reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetPropertyValue(System.Object,System.Reflection.PropertyInfo,Cuemon.Doer{System.Reflection.ParameterInfo[],System.Object[]})">
            <summary>
            Gets the property value of a specified <paramref name="source"/> with check for the need of property index values initialized by the specified <paramref name="propertyIndexParametersResolver"/>.
            </summary>
            <param name="source">The source whose property value will be returned.</param>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> to access it's value from.</param>
            <param name="propertyIndexParametersResolver">The function delegate that is invoked if a property has one or more index parameters.</param>
            <returns>The property value of the specified <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null - or - <paramref name="property"/> is null - or - <paramref name="propertyIndexParametersResolver"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.DefaultSkipPropertiesCallback(System.Type)">
            <summary>
            A default callback implementation that evaluates if public property iteration should be skipped in the specified <paramref name="source"/> type.
            </summary>
            <param name="source">The source type to evaluate.</param>
            <returns><c>true</c> if public property iteration should be skipped; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.DefaultSkipPropertyCallback(System.Reflection.PropertyInfo)">
            <summary>
            A default callback implementation that evaluates if the specified <paramref name="property"/> should be skipped for further processing.
            </summary>
            <param name="property">The property to evaluate.</param>
            <returns><c>true</c> if the specified <paramref name="property"/> should be skipped; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetObjectHierarchy(System.Object)">
            <summary>
            Gets the tree structure of the specified <paramref name="source"/> wrapped in an <see cref="T:Cuemon.IHierarchy`1"/> node representing a hierarchical structure.
            </summary>
            <param name="source">The source whose properties will be traversed while building the hierarchical structure.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node representing the entirety of a hierarchical structure from the specified <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetObjectHierarchy(System.Object,System.Int32)">
            <summary>
            Gets the tree structure of the specified <paramref name="source"/> wrapped in an <see cref="T:Cuemon.IHierarchy`1"/> node representing a hierarchical structure.
            </summary>
            <param name="source">The source whose properties will be traversed while building the hierarchical structure.</param>
            <param name="maxDepth">The maximum depth to safely traverse <paramref name="source"/>. Default is 10.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node representing the entirety of a hierarchical structure from the specified <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxDepth"/> is less than zero.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetObjectHierarchy(System.Object,System.Int32,Cuemon.Doer{System.Type,System.Boolean})">
            <summary>
            Gets the tree structure of the specified <paramref name="source"/> wrapped in an <see cref="T:Cuemon.IHierarchy`1"/> node representing a hierarchical structure.
            </summary>
            <param name="source">The source whose properties will be traversed while building the hierarchical structure.</param>
            <param name="maxDepth">The maximum depth to safely traverse <paramref name="source"/>. Default is 10.</param>
            <param name="skipProperties">The function delegate that is invoked just before public properties is being iterated and whose return value determine if the properties should be skipped or not.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node representing the entirety of a hierarchical structure from the specified <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxDepth"/> is less than zero.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetObjectHierarchy(System.Object,System.Int32,Cuemon.Doer{System.Type,System.Boolean},Cuemon.Doer{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Gets the tree structure of the specified <paramref name="source"/> wrapped in an <see cref="T:Cuemon.IHierarchy`1"/> node representing a hierarchical structure.
            </summary>
            <param name="source">The source whose properties will be traversed while building the hierarchical structure.</param>
            <param name="maxDepth">The maximum depth to safely traverse <paramref name="source"/>. Default is 10.</param>
            <param name="skipProperties">The function delegate that is invoked just before public properties is being iterated and whose return value determine if the properties should be skipped or not.</param>
            <param name="skipProperty">The function delegate that is invoked every time a public property is iterated and whose return value determine if that property should be skipped or not.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node representing the entirety of a hierarchical structure from the specified <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skipProperty"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxDepth"/> is less than zero.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetObjectHierarchy(System.Object,System.Int32,Cuemon.Doer{System.Type,System.Boolean},Cuemon.Doer{System.Reflection.PropertyInfo,System.Boolean},Cuemon.Doer{System.Object,System.Boolean})">
            <summary>
            Gets the tree structure of the specified <paramref name="source"/> wrapped in an <see cref="T:Cuemon.IHierarchy`1"/> node representing a hierarchical structure.
            </summary>
            <param name="source">The source whose properties will be traversed while building the hierarchical structure.</param>
            <param name="maxDepth">The maximum depth to safely traverse <paramref name="source"/>. Default is 10.</param>
            <param name="skipProperties">The function delegate that is invoked just before public properties is being iterated and whose return value determine if the properties should be skipped or not.</param>
            <param name="skipProperty">The function delegate that is invoked every time a public property is iterated and whose return value determine if that property should be skipped or not.</param>
            <param name="hasCircularReference">The function delegate that is invoked when a property has a value and whose return value suggest a circular reference or not.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node representing the entirety of a hierarchical structure from the specified <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="skipProperty"/> is null - or - <paramref name="hasCircularReference"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxDepth"/> is less than zero.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetObjectHierarchy(System.Object,System.Int32,Cuemon.Doer{System.Type,System.Boolean},Cuemon.Doer{System.Reflection.PropertyInfo,System.Boolean},Cuemon.Doer{System.Object,System.Boolean},Cuemon.Doer{System.Reflection.ParameterInfo[],System.Object[]})">
            <summary>
            Gets the tree structure of the specified <paramref name="source"/> wrapped in an <see cref="T:Cuemon.IHierarchy`1"/> node representing a hierarchical structure.
            </summary>
            <param name="source">The source whose properties will be traversed while building the hierarchical structure.</param>
            <param name="maxDepth">The maximum depth to safely traverse <paramref name="source"/>. Default is 10.</param>
            <param name="skipProperties">The function delegate that is invoked just before public properties is being iterated and whose return value determine if the properties should be skipped or not.</param>
            <param name="skipProperty">The function delegate that is invoked every time a public property is iterated and whose return value determine if that property should be skipped or not.</param>
            <param name="hasCircularReference">The function delegate that is invoked when a property has a value and whose return value suggest a circular reference or not.</param>
            <param name="propertyIndexParametersResolver">The function delegate that is invoked if a property has one or more index parameters.</param>
            <returns>An <see cref="T:Cuemon.IHierarchy`1"/> node representing the entirety of a hierarchical structure from the specified <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null - or - <paramref name="skipProperty"/> is null - or - <paramref name="hasCircularReference"/> is null - or - <paramref name="propertyIndexParametersResolver"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maxDepth"/> is less than zero.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the by <typeparamref name="TAttribute"/> specified <see cref="T:System.Attribute"/> from <paramref name="member"/>.
            </summary>
            <typeparam name="TAttribute">The type of the attribute to get.</typeparam>
            <param name="member">The member to search for the <typeparamref name="TAttribute"/>.</param>
            <returns>An <see cref="T:System.Attribute"/> of type <typeparamref name="TAttribute"/>, or <c>null</c> if there is no such attribute.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the by <typeparamref name="TAttribute"/> specified <see cref="T:System.Attribute"/> from <paramref name="member"/>.
            </summary>
            <typeparam name="TAttribute">The type of the attribute to get.</typeparam>
            <param name="member">The member to search for the <typeparamref name="TAttribute"/>.</param>
            <param name="inherit">If <c>true</c>, specifies to also search the ancestors of <paramref name="member"/> for the <typeparamref name="TAttribute"/>.</param>
            <returns>An <see cref="T:System.Attribute"/> of type <typeparamref name="TAttribute"/>, or <c>null</c> if there is no such attribute.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Gets a sequence of attributes by the <typeparamref name="TAttribute"/> specified <see cref="T:System.Attribute"/> from <paramref name="member"/>.
            </summary>
            <typeparam name="TAttribute">The type of the attribute to get.</typeparam>
            <param name="member">The member to search for the <typeparamref name="TAttribute"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence that contains the matching attributes of <paramref name="member"/>, or <c>null</c> if there is no such attributes.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets a sequence of attributes by the <typeparamref name="TAttribute"/> specified <see cref="T:System.Attribute"/> from <paramref name="member"/>.
            </summary>
            <typeparam name="TAttribute">The type of the attribute to get.</typeparam>
            <param name="member">The member to search for the <typeparamref name="TAttribute"/>.</param>
            <param name="inherit">If <c>true</c>, specifies to also search the ancestors of <paramref name="member"/> for the <typeparamref name="TAttribute"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence that contains the matching attributes of <paramref name="member"/>, or <c>null</c> if there is no such attributes.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.ParseMethodParameters(System.Type,System.String,System.Object[])">
            <summary>
            Parses and returns a collection of key/value pairs representing the specified <paramref name="methodName"/>.
            </summary>
            <param name="source">The source to locate the specified <paramref name="methodName"/> in.</param>
            <param name="methodName">The name of the method to parse on <paramref name="source"/>.</param>
            <param name="methodParameters">A variable number of values passed to the <paramref name="methodName"/> on this instance.</param>
            <returns>A collection of key/value pairs representing the specified <paramref name="methodName"/>.</returns>
            <remarks>This method will parse the specified <paramref name="methodName"/> for parameter names and tie them with <paramref name="methodParameters"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">This exception is thrown if <paramref name="methodName"/> is null, if <paramref name="source"/> is null or if <paramref name="methodParameters"/> is null and method has resolved parameters.</exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">This exception is thrown if <paramref name="methodName"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if either of the following is true:<br/>
            the size of <paramref name="methodParameters"/> does not match the resolved parameters size of <paramref name="methodName"/>,<br/>
            the type of <paramref name="methodParameters"/> does not match the resolved parameters type of <paramref name="methodName"/>.
            </exception>
            <remarks>This method auto resolves the associated <see cref="T:System.Type"/> for each object in <paramref name="methodParameters"/>. In case of a null referenced parameter, an <see cref="T:System.ArgumentNullException"/> is thrown, and you are encouraged to use the overloaded method instead.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.ParseMethodParameters(System.Type,System.String,System.Type[],System.Object[])">
            <summary>
            Parses and returns a collection of key/value pairs representing the specified <paramref name="methodName"/>.
            </summary>
            <param name="source">The source to locate the specified <paramref name="methodName"/> in.</param>
            <param name="methodName">The name of the method to parse on <paramref name="source"/>.</param>
            <param name="methodParameters">A variable number of values passed to the <paramref name="methodName"/> on this instance.</param>
            <param name="methodSignature">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the method to get.</param>
            <returns>A collection of key/value pairs representing the specified <paramref name="methodName"/>.</returns>
            <remarks>This method will parse the specified <paramref name="methodName"/> for parameter names and tie them with <paramref name="methodParameters"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">This exception is thrown if <paramref name="methodName"/> is null, if <paramref name="source"/> is null or if <paramref name="methodParameters"/> is null and method has resolved parameters.</exception>
            <exception cref="T:Cuemon.ArgumentEmptyException">This exception is thrown if <paramref name="methodName"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">
            This exception is thrown if either of the following is true:<br/>
            the size of <paramref name="methodParameters"/> does not match the resolved parameters size of <paramref name="methodName"/>,<br/>
            the type of <paramref name="methodParameters"/> does not match the resolved parameters type of <paramref name="methodName"/>.
            </exception>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetPropertyAttributeDecorations``1(System.Type)">
            <summary>
            Gets a sequence of the specified <typeparamref name="TDecoration"/> attribute, narrowed to property attribute decorations.
            </summary>
            <typeparam name="TDecoration">The type of the attribute to locate in <paramref name="source"/>.</typeparam>
            <param name="source">The source type to locate <typeparamref name="TDecoration"/> attributes in.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the specified <typeparamref name="TDecoration"/> attributes.</returns>
            <remarks>Searches the <paramref name="source"/> using the following <see cref="T:System.Reflection.BindingFlags"/> combination: <see cref="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic"/>.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetPropertyAttributeDecorations``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets a sequence of the specified <typeparamref name="TDecoration"/> attribute, narrowed to property attribute decorations.
            </summary>
            <typeparam name="TDecoration">The type of the attribute to locate in <paramref name="source"/>.</typeparam>
            <param name="source">The source type to locate <typeparamref name="TDecoration"/> attributes in.</param>
            <param name="bindings">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the specified <typeparamref name="TDecoration"/> attributes.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetField(System.Type,System.String)">
            <summary>
            Gets a specific field of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return a field from.</param>
            <param name="fieldName">The name of the field to return.</param>
            <returns>An object representing the field with the specified name, if found; otherwise, null.</returns>
            <remarks>Searches the <paramref name="source"/> using the following <see cref="T:System.Reflection.BindingFlags"/> combination: <see cref="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic"/>.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetField(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets a specific field of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return a field from.</param>
            <param name="fieldName">The name of the field to return.</param>
            <param name="bindings">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.</param>
            <returns>An object representing the field with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetFields(System.Type)">
            <summary>
            Returns all the fields of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return fields from.</param>
            <returns>A sequence of <see cref="T:System.Reflection.FieldInfo"/> objects representing a common search pattern of the specified <paramref name="source"/>.</returns>
            <remarks>Searches the <paramref name="source"/> using the following <see cref="T:System.Reflection.BindingFlags"/> combination: <see cref="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic"/>.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetFields(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Returns all the fields of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return fields from.</param>
            <param name="bindings">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.</param>
            <returns>A sequence of <see cref="T:System.Reflection.FieldInfo"/> objects representing the search pattern in <paramref name="bindings"/> of the specified <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetMethod(System.Type,System.String)">
            <summary>
            Gets a specific method of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return a method from.</param>
            <param name="methodName">The name of the method to return.</param>
            <returns>An object representing the method with the specified name, if found; otherwise, null.</returns>
            <remarks>Searches the <paramref name="source"/> using the following <see cref="T:System.Reflection.BindingFlags"/> combination: <see cref="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic"/>.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets a specific method of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return a method from.</param>
            <param name="methodName">The name of the method to return.</param>
            <param name="methodSignature">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the method to get.</param>
            <returns>An object representing the method with the specified name, if found; otherwise, null.</returns>
            <remarks>Searches the <paramref name="source"/> using the following <see cref="T:System.Reflection.BindingFlags"/> combination: <see cref="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic"/>.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetMethod(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)">
            <summary>
            Gets a specific method of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return a method from.</param>
            <param name="methodName">The name of the method to return.</param>
            <param name="methodSignature">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the method to get.</param>
            <param name="bindings">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.</param>
            <returns>An object representing the method with the specified name, if found; otherwise, null.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetMethods(System.Type)">
            <summary>
            Returns all the methods of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return methods from.</param>
            <returns>A sequence of <see cref="T:System.Reflection.MethodInfo"/> objects representing a common search pattern of the specified <paramref name="source"/>.</returns>
            <remarks>Searches the <paramref name="source"/> using the following <see cref="T:System.Reflection.BindingFlags"/> combination: <see cref="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic"/>.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetMethods(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Returns all the methods of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return methods from.</param>
            <param name="bindings">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.</param>
            <returns>A sequence of <see cref="T:System.Reflection.MethodInfo"/> objects representing the search pattern in <paramref name="bindings"/> of the specified <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetProperty(System.Type,System.String)">
            <summary>
            Gets a specific property of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return a property from.</param>
            <param name="propertyName">The name of the property to return.</param>
            <returns>An object representing the property with the specified name, if found; otherwise, null.</returns>
            <remarks>Searches the <paramref name="source"/> using the following <see cref="T:System.Reflection.BindingFlags"/> combination: <see cref="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic"/>.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetProperty(System.Type,System.String,System.Type)">
            <summary>
            Gets a specific property of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return a property from.</param>
            <param name="propertyName">The name of the property to return.</param>
            <param name="propertyReturnSignature">The return <see cref="T:System.Type"/> of the property.</param>
            <returns>An object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
            <remarks>Searches the <paramref name="source"/> using the following <see cref="T:System.Reflection.BindingFlags"/> combination: <see cref="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic"/>.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetProperty(System.Type,System.String,System.Type,System.Type[])">
            <summary>
            Gets a specific property of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return a property from.</param>
            <param name="propertyName">The name of the property to return.</param>
            <param name="propertyReturnSignature">The return <see cref="T:System.Type"/> of the property.</param>
            <param name="propertySignature">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the indexed property to get.</param>
            <returns>An object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
            <remarks>Searches the <paramref name="source"/> using the following <see cref="T:System.Reflection.BindingFlags"/> combination: <see cref="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic"/>.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetProperty(System.Type,System.String,System.Type,System.Type[],System.Reflection.BindingFlags)">
            <summary>
            Gets a specific property of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return a property from.</param>
            <param name="propertyName">The name of the property to return.</param>
            <param name="propertyReturnSignature">The return <see cref="T:System.Type"/> of the property.</param>
            <param name="propertySignature">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the indexed property to get.</param>
            <param name="bindings">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.</param>
            <returns>An object representing the property that matches the specified requirements, if found; otherwise, null.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetProperties(System.Type)">
            <summary>
            Returns all the properties of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return properties from.</param>
            <returns>A sequence of <see cref="T:System.Reflection.PropertyInfo"/> objects representing a common search pattern of the specified <paramref name="source"/>.</returns>
            <remarks>Searches the <paramref name="source"/> using the following <see cref="T:System.Reflection.BindingFlags"/> combination: <see cref="F:Cuemon.Reflection.ReflectionUtility.BindingInstancePublicAndPrivateNoneInheritedIncludeStatic"/>.</remarks>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetProperties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Returns all the properties of the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to return properties from.</param>
            <param name="bindings">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.</param>
            <returns>A sequence of <see cref="T:System.Reflection.PropertyInfo"/> objects representing the search pattern in <paramref name="bindings"/> of the specified <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetAssemblyTypes(System.Reflection.Assembly)">
            <summary>
            Gets the types contained within the specified <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to search the types from.</param>
            <returns>A sequence of all <see cref="T:System.Type"/> elements from the specified <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetAssemblyTypes(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the types contained within the specified <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to search the types from.</param>
            <param name="namespaceFilter">The namespace filter to apply on the types in the <paramref name="assembly"/>.</param>
            <returns>A sequence of <see cref="T:System.Type"/> elements, matching the applied filter, from the specified <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetAssemblyTypes(System.Reflection.Assembly,System.String,System.Type)">
            <summary>
            Gets the types contained within the specified <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to search the types from.</param>
            <param name="namespaceFilter">The namespace filter to apply on the types in the <paramref name="assembly"/>.</param>
            <param name="typeFilter">The type filter to apply on the types in the <paramref name="assembly"/>.</param>
            <returns>A sequence of <see cref="T:System.Type"/> elements, matching the applied filters, from the specified <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetEmbeddedResources(System.Type,System.String,Cuemon.Reflection.ResourceMatch)">
            <summary>
            Loads the embedded resources from the associated <see cref="T:System.Reflection.Assembly"/> of the specified <see cref="T:System.Type"/> following the <see cref="T:Cuemon.Reflection.ResourceMatch"/> ruleset of <paramref name="match"/>.
            </summary>
            <param name="source">The source type to load the resource from.</param>
            <param name="name">The name of the resource being requested.</param>
            <param name="match">The match ruleset to apply.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing the loaded resources; null if no resources were specified during compilation, or if the resource is not visible to the caller.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetEmbeddedResource(System.Type,System.String)">
            <summary>
            Loads the embedded resource from the associated <see cref="T:System.Reflection.Assembly"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="source">The source type to load the resouce from.</param>
            <param name="name">The case-sensitive name of the resource being requested.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing the loaded resource; null if no resources were specified during compilation, or if the resource is not visible to the caller.</returns>
        </member>
        <member name="M:Cuemon.Reflection.ReflectionUtility.GetEmbeddedResource(System.Type,System.String,Cuemon.Reflection.ResourceMatch)">
            <summary>
            Loads the embedded resource from the associated <see cref="T:System.Reflection.Assembly"/> of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="source">The source type to load the resouce from.</param>
            <param name="name">The case-sensitive name of the resource being requested.</param>
            <param name="match">The match ruleset to apply.</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing the loaded resource; null if no resources were specified during compilation, or if the resource is not visible to the caller.</returns>
        </member>
        <member name="P:Cuemon.Reflection.ReflectionUtility.EnableResourceCaching">
            <summary>
            Gets or sets a value indicating whether to store requested resources in cache for optimized retreival. Default is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if requested resources should be cached for faster retreival; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cuemon.Reflection.ResourceMatch">
            <summary>
            Specifies the way of finding and returning an embedded resource.
            </summary>
        </member>
        <member name="F:Cuemon.Reflection.ResourceMatch.Name">
            <summary>
            Specifies an exact match on the file name of the embedded resource.
            </summary>
        </member>
        <member name="F:Cuemon.Reflection.ResourceMatch.ContainsName">
            <summary>
            Specifies a partial match on the file name of the embedded resource.
            </summary>
        </member>
        <member name="F:Cuemon.Reflection.ResourceMatch.Extension">
            <summary>
            Specifies an exact match on the file extension contained within the file name of the embedded resource.
            </summary>
        </member>
        <member name="F:Cuemon.Reflection.ResourceMatch.ContainsExtension">
            <summary>
            Specifies a partial match on the file extesion contained within the file name of the embedded resource.
            </summary>
        </member>
        <member name="T:Cuemon.Runtime.Serialization.SimpleSerializationSurrogate">
            <summary>
            Implements a serialization surrogate selector that allows one object to perform serialization of another.
            Most objects should be able to be serialized. Please note; experimental version!
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SimpleSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.Serialization.SimpleSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SimpleSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SimpleSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:Cuemon.Runtime.Serialization.SerializationUtility">
            <summary>
            This utility class is designed to make serialization operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SerializationUtility.SerializeAsClone``1(``0)">
            <summary>
            Creates and returns a clone of the specified <paramref name="value"/> object using <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> for the serialization.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A clone of the <paramref name="value"/> object using <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> for the cloning process.</returns>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SerializationUtility.SerializeAsClone``1(System.Runtime.Serialization.IFormatter,``0)">
            <summary>
            Creates and returns a clone of the specified <paramref name="value"/> object using the provided <see cref="T:System.Runtime.Serialization.IFormatter"/> for the serialization.
            </summary>
            <param name="formatter">The formatter to use for the serialization.</param>
            <param name="value">The object to serialize.</param>
            <returns>A clone of the <paramref name="value"/> object using the provided <see cref="T:System.Runtime.Serialization.IFormatter"/> for the cloning process.</returns>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SerializationUtility.SerializeAsStream(System.Object)">
            <summary>
            Creates and returns a stream representation of the given object using <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> for the serialization.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>The <see cref="T:System.IO.Stream"/> where the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> puts the serialized data.</returns>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SerializationUtility.SerializeAsStream(System.Runtime.Serialization.IFormatter,System.Object)">
            <summary>
            Creates and returns a stream representation of the given object using the provided <see cref="T:System.Runtime.Serialization.IFormatter"/> for the serialization.
            </summary>
            <param name="formatter">The formatter to use for the serialization.</param>
            <param name="value">The object to serialize.</param>
            <returns>The <see cref="T:System.IO.Stream"/> where the formatter puts the serialized data.</returns>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SerializationUtility.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects using <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> for the process.
            </summary>
            <typeparam name="T">The type of the object that this method returns.</typeparam>
            <param name="value">The stream that contains the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SerializationUtility.Deserialize``1(System.IO.Stream,System.Boolean)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects using <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> for the process.
            </summary>
            <typeparam name="T">The type of the object that this method returns.</typeparam>
            <param name="value">The stream that contains the data to deserialize.</param>
            <param name="leaveStreamOpen">if <c>true</c>, the <paramref name="value"/> <see cref="T:System.IO.Stream"/> is being left open; otherwise <paramref name="value"/> is disposed of.</param>
            <returns>The top object of the deserialized graph.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SerializationUtility.Deserialize``1(System.Runtime.Serialization.IFormatter,System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <typeparam name="T">The type of the object that this method returns.</typeparam>
            <param name="formatter">The formatter to use for the deserialization.</param>
            <param name="value">The stream that contains the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SerializationUtility.Deserialize``1(System.Runtime.Serialization.IFormatter,System.IO.Stream,System.Boolean)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <typeparam name="T">The type of the object that this method returns.</typeparam>
            <param name="formatter">The formatter to use for the deserialization.</param>
            <param name="value">The stream that contains the data to deserialize.</param>
            <param name="leaveStreamOpen">if <c>true</c>, the <paramref name="value"/> <see cref="T:System.IO.Stream"/> is being left open; otherwise <paramref name="value"/> is disposed of.</param>
            <returns>The top object of the deserialized graph.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SerializationUtility.IsTypeValidForSerializing(System.Type)">
            <summary>
            Determines whether the specified type is valid for serializing.
            </summary>
            <param name="value">The type to evaluate.</param>
            <returns>
            	<c>true</c> if the specified type is valid for serializing; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Cuemon.Runtime.Serialization.SimpleSurrogateSelector">
            <summary>
            Provides a simple implementation of a serialization surrogate to delegate the serialization or deserialization process to.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SimpleSurrogateSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Runtime.Serialization.SimpleSurrogateSelector"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SimpleSurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Specifies the next <see cref="T:System.Runtime.Serialization.ISurrogateSelector"/> for surrogates to examine if the current instance does not have a surrogate for the specified type and assembly in the specified context.
            </summary>
            <param name="selector">The next surrogate selector to examine.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SimpleSurrogateSelector.GetNextSelector">
            <summary>
            Returns the next surrogate selector in the chain.
            </summary>
            <returns>
            The next surrogate selector in the chain or null.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Cuemon.Runtime.Serialization.SimpleSurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
            <summary>
            Finds the surrogate that represents the specified object's type, starting with the specified surrogate selector for the specified serialization context.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of object (class) that needs a surrogate.</param>
            <param name="context">The source or destination context for the current serialization.</param>
            <param name="selector">When this method returns, contains a <see cref="T:System.Runtime.Serialization.ISurrogateSelector"/> that holds a reference to the surrogate selector where the appropriate surrogate was found. This parameter is passed uninitialized.</param>
            <returns>
            The appropriate surrogate for the given type in the given context.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:Cuemon.Security.Cryptography.HashUtility">
            <summary>
            This utility class is designed to make <see cref="T:System.Security.Cryptography.HashAlgorithm"/> operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.Object)">
            <summary>
            Computes a MD5 hash value of the specified <paramref name="value"/>.
            </summary>
            <param name="value">The object to compute a hash code for.</param>
            <returns>A <see cref="T:System.String"/> containing the computed MD5 hash value of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.Object,Cuemon.Security.Cryptography.HashAlgorithmType)">
            <summary>
            Computes a by parameter defined <see cref="T:Cuemon.Security.Cryptography.HashAlgorithmType"/> hash value of the specified <paramref name="value"/>.
            </summary>
            <param name="value">The object to compute a hash code for.</param>
            <param name="algorithmType">The hash algorithm to use for the computation.</param>
            <returns>A <see cref="T:System.String"/> containing the computed hash value of the specified <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.Object[])">
            <summary>
            Combines a sequence of objects into one object, and computes a MD5 hash value of the specified sequence, <paramref name="values"/>.
            </summary>
            <param name="values">The objects to compute a hash code for.</param>
            <returns>A <see cref="T:System.String"/> containing the computed MD5 hash value of the specified object sequence <paramref name="values"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.Object[],Cuemon.Security.Cryptography.HashAlgorithmType)">
            <summary>
            Combines a sequence of objects into one object, and computes a by parameter defined <see cref="T:Cuemon.Security.Cryptography.HashAlgorithmType"/> hash value of the specified sequence, <paramref name="values"/>.
            </summary>
            <param name="values">The objects to compute a hash code for.</param>
            <param name="algorithmType">The hash algorithm to use for the computation.</param>
            <returns>A <see cref="T:System.String"/> containing the computed hash value of the specified object sequence <paramref name="values"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.IO.Stream)">
            <summary>
            Computes a by parameter defined <see cref="T:Cuemon.Security.Cryptography.HashAlgorithmType"/> hash value of the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> object to compute a hash code for.</param>
            <returns>A <see cref="T:System.String"/> containing the computed MD5 hash value of the specified <see cref="T:System.IO.Stream"/> <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.IO.Stream,Cuemon.Security.Cryptography.HashAlgorithmType)">
            <summary>
            Computes a by parameter defined <see cref="T:Cuemon.Security.Cryptography.HashAlgorithmType"/> hash value of the specified <see cref="T:System.IO.Stream"/> <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> object to compute a hash code for.</param>
            <param name="algorithmType">The hash algorithm to use for the computation.</param>
            <returns>A <see cref="T:System.String"/> containing the computed hash value of the specified <see cref="T:System.IO.Stream"/> <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.IO.Stream,Cuemon.Security.Cryptography.HashAlgorithmType,System.Boolean)">
            <summary>
            Computes a by parameter defined <see cref="T:Cuemon.Security.Cryptography.HashAlgorithmType"/> hash value of the specified <see cref="T:System.IO.Stream"/> <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> object to compute a hash code for.</param>
            <param name="algorithmType">The hash algorithm to use for the computation.</param>
            <param name="leaveStreamOpen">if <c>true</c>, the <see cref="T:System.IO.Stream"/> object is being left open; otherwise it is being closed and disposed.</param>
            <returns>A <see cref="T:System.String"/> containing the computed hash value of the specified <see cref="T:System.IO.Stream"/> <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.Byte[])">
            <summary>
            Computes a MD5 hash value of the specified <see cref="T:System.Byte"/> sequence, <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> array to compute a hash code for.</param>
            <returns>A <see cref="T:System.String"/> containing the computed MD5 hash value of the specified <see cref="T:System.Byte"/> sequence <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.Byte[],Cuemon.Security.Cryptography.HashAlgorithmType)">
            <summary>
            Computes a by parameter defined <see cref="T:Cuemon.Security.Cryptography.HashAlgorithmType"/> hash value of the specified <see cref="T:System.Byte"/> sequence, <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> array to compute a hash code for.</param>
            <param name="algorithmType">The hash algorithm to use for the computation.</param>
            <returns>A <see cref="T:System.String"/> containing the computed hash value of the specified <see cref="T:System.Byte"/> sequence <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.String)">
            <summary>
            Computes a MD5 hash value of the specified <see cref="T:System.String"/> <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to compute a hash code for.</param>
            <returns>A <see cref="T:System.String"/> containing the computed MD5 hash value of the specified <see cref="T:System.String"/> <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.String,Cuemon.Security.Cryptography.HashAlgorithmType)">
            <summary>
            Computes a by parameter defined <see cref="T:Cuemon.Security.Cryptography.HashAlgorithmType"/> hash value of the specified <see cref="T:System.String"/> <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to compute a hash code for.</param>
            <param name="algorithmType">The hash algorithm to use for the computation.</param>
            <returns>A <see cref="T:System.String"/> containing the computed hash value of the specified <see cref="T:System.String"/> <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.String,Cuemon.Security.Cryptography.HashAlgorithmType,System.Text.Encoding)">
            <summary>
            Computes a by parameter defined <see cref="T:Cuemon.Security.Cryptography.HashAlgorithmType"/> hash value of the specified <see cref="T:System.String"/> <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to compute a hash code for.</param>
            <param name="algorithmType">The hash algorithm to use for the computation.</param>
            <param name="encoding">The encoding to use when computing the <paramref name="value"/>.</param>
            <returns>A <see cref="T:System.String"/> containing the computed hash value of the specified <see cref="T:System.String"/> <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.String[])">
            <summary>
            Computes a MD5 hash value of the specified <see cref="T:System.String"/> sequence, <paramref name="values"/>.
            </summary>
            <param name="values">The <see cref="T:System.String"/> sequence to compute a hash code for.</param>
            <returns>A <see cref="T:System.String"/> containing the computed MD5 hash value of the specified <see cref="T:System.String"/> sequence, <paramref name="values"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.String[],Cuemon.Security.Cryptography.HashAlgorithmType)">
            <summary>
            Computes a by parameter defined <see cref="T:Cuemon.Security.Cryptography.HashAlgorithmType"/> hash value of the specified <see cref="T:System.String"/> sequence, <paramref name="values"/>.
            </summary>
            <param name="values">The <see cref="T:System.String"/> sequence to compute a hash code for.</param>
            <param name="algorithmType">The hash algorithm to use for the computation.</param>
            <returns>A <see cref="T:System.String"/> containing the computed hash value of the specified <see cref="T:System.String"/> sequence, <paramref name="values"/>.</returns>
        </member>
        <member name="M:Cuemon.Security.Cryptography.HashUtility.ComputeHash(System.String[],Cuemon.Security.Cryptography.HashAlgorithmType,System.Text.Encoding)">
            <summary>
            Computes a by parameter defined <see cref="T:Cuemon.Security.Cryptography.HashAlgorithmType"/> hash value of the specified <see cref="T:System.String"/> sequence, <paramref name="values"/>.
            </summary>
            <param name="values">The <see cref="T:System.String"/> sequence to compute a hash code for.</param>
            <param name="algorithmType">The hash algorithm to use for the computation.</param>
            <param name="encoding">The encoding to use when computing the <paramref name="values"/> sequence.</param>
            <returns>A <see cref="T:System.String"/> containing the computed hash value of the specified <see cref="T:System.String"/> sequence, <paramref name="values"/>.</returns>
        </member>
        <member name="T:Cuemon.Security.Cryptography.HashAlgorithmType">
            <summary>
            Specifies the algorithm used for generating hash values.
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.HashAlgorithmType.MD5">
            <summary>
            The Message Digest 5 (MD5) algorithm (128 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.HashAlgorithmType.SHA1">
            <summary>
            The Secure Hashing Algorithm (SHA1) algorithm (160 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.HashAlgorithmType.SHA256">
            <summary>
            The Secure Hashing Algorithm (SHA256) algorithm (256 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.HashAlgorithmType.SHA384">
            <summary>
            The Secure Hashing Algorithm (SHA384) algorithm (384 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.HashAlgorithmType.SHA512">
            <summary>
            The Secure Hashing Algorithm (SHA512) algorithm (512 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.HashAlgorithmType.RIPEMD160">
            <summary>
            The RACE Integrity Primitives Evaluation (RIPEMD160) algorithm (160 bits).
            </summary>
        </member>
        <member name="F:Cuemon.Security.Cryptography.HashAlgorithmType.CRC32">
            <summary>
            The Cyclic Redundancy Check 32 (CRC32) algorithm (32 bits), reversed for broader compatibility (0xEDB88320).
            </summary>
        </member>
        <member name="T:Cuemon.StringUtility">
            <summary>
            This utility class is designed to make <see cref="T:System.String"/> operations easier to work with.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.NewLine">
            <summary>
            Carriage-return/linefeed character combination.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.Tab">
            <summary>
            Tab character.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.Linefeed">
            <summary>
            Linefeed character.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.CarriageReturn">
            <summary>
            Carriage-return character.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.NumericCharacters">
            <summary>
            A representation of a numeric character set consisting of the numbers 0 to 9.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.AlphanumericCharactersSingleCase">
            <summary>
            A single case representation of an alphanumeric character set consisting of the numbers 0 to 9 and the letters A to Z.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.AlphanumericCharactersCaseSensitive">
            <summary>
            A case sensitive representation of an alphanumeric character set consisting of the numbers 0 to 9 and the letters Aa to Zz.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.EnglishAlphabetCharactersMajuscule">
            <summary>
            An uppercase representation of the English alphabet character set consisting of the letters A to Z.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.EnglishAlphabetCharactersMinuscule">
            <summary>
            A lowercase representation of the English alphabet character set consisting of the letters a to z.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.PunctuationMarks">
            <summary>
            A representation of the most common punctuation marks that conforms to the ASCII printable characters.
            </summary>
        </member>
        <member name="F:Cuemon.StringUtility.HexadecimalCharacters">
            <summary>
            A representation of a hexadecimal character set consisting of the numbers 0 to 9 and the letters A to F.
            </summary>
        </member>
        <member name="M:Cuemon.StringUtility.GetHashCode(System.String)">
            <summary>
            Computes a suitable hash code from the specified <see cref="T:System.String"/> <paramref name="value"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/> value.</param>
            <returns>A 32-bit signed integer that is the hash code of <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.StringUtility.Count(System.String,System.Char)">
            <summary>
            Counts the occurences of <paramref name="character"/> in the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to count occurences of <paramref name="character"/>.</param>
            <param name="character">The <see cref="T:System.Char"/> value to count in <paramref name="source"/>.</param>
            <returns>The number of times the <paramref name="character"/> was found in the <paramref name="source"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.StringUtility.Remove(System.String,System.String[])">
            <summary>
            Returns a new string in which all the specified <paramref name="filter"/> values has been deleted from the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to delete occurrences found in <paramref name="filter"/>.</param>
            <param name="filter">The filter containing the characters and/or words to delete.</param>
            <returns>A new string that is equivalent to <paramref name="source"/> except for the removed characters and/or words.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null or <paramref name="filter"/> is null.
            </exception>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.</remarks>
        </member>
        <member name="M:Cuemon.StringUtility.Remove(System.String,System.StringComparison,System.String[])">
            <summary>
            Returns a new string in which all the specified <paramref name="filter"/> values has been deleted from the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source to delete occurrences found in <paramref name="filter"/>.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <param name="filter">The filter containing the characters and/or words to delete.</param>
            <returns>A new string that is equivalent to <paramref name="source"/> except for the removed characters and/or words.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null or <paramref name="filter"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.StringUtility.Remove(System.String[],System.String[])">
            <summary>
            Returns a new string array in which all the specified <paramref name="filter"/> values has been deleted from the specified <paramref name="source"/> array.
            </summary>
            <param name="source">The source array to delete occurrences found in <paramref name="filter"/>.</param>
            <param name="filter">The filter containing the characters and/or words to delete.</param>
            <returns>A new string array that is equivalent to <paramref name="source"/> except for the removed characters and/or words.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null or <paramref name="filter"/> is null.
            </exception>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.</remarks>
        </member>
        <member name="M:Cuemon.StringUtility.Remove(System.String[],System.StringComparison,System.String[])">
            <summary>
            Returns a new string array in which all the specified <paramref name="filter"/> values has been deleted from the specified <paramref name="source"/> array.
            </summary>
            <param name="source">The source array to delete occurrences found in <paramref name="filter"/>.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <param name="filter">The filter containing the characters and/or words to delete.</param>
            <returns>A new string array that is equivalent to <paramref name="source"/> except for the removed characters and/or words.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null or <paramref name="filter"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.StringUtility.Shuffle(System.String[])">
            <summary>
            Shuffles the specified <paramref name="values"/> like a deck of cards.
            </summary>
            <param name="values">The values to be shuffled in the randomization process.</param>
            <returns>A random string from the shuffled <paramref name="values"/> provided.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="values"/> is empty.
            </exception>
        </member>
        <member name="M:Cuemon.StringUtility.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces all occurrences of <paramref name="oldValue"/> in <paramref name="value"/>, with <paramref name="newValue"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to perform the replacement on.</param>
            <param name="oldValue">The <see cref="T:System.String"/> value to be replaced.</param>
            <param name="newValue">The <see cref="T:System.String"/> value to replace all occurrences of <paramref name="oldValue"/>.</param>
            <returns>A <see cref="T:System.String"/> equivalent to <paramref name="value"/> but with all instances of <paramref name="oldValue"/> replaced with <paramref name="newValue"/>.</returns>
            <remarks>This method performs an <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> search to find <paramref name="oldValue"/>.</remarks>
        </member>
        <member name="M:Cuemon.StringUtility.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replaces all occurrences of <paramref name="oldValue"/> in <paramref name="value"/>, with <paramref name="newValue"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to perform the replacement on.</param>
            <param name="oldValue">The <see cref="T:System.String"/> value to be replaced.</param>
            <param name="newValue">The <see cref="T:System.String"/> value to replace all occurrences of <paramref name="oldValue"/>.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>A <see cref="T:System.String"/> equivalent to <paramref name="value"/> but with all instances of <paramref name="oldValue"/> replaced with <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.Replace(System.String,System.Collections.Generic.IEnumerable{Cuemon.StringReplacePair},System.StringComparison)">
            <summary>
            Replaces all occurrences of the <see cref="P:Cuemon.StringReplacePair.OldValue"/> with <see cref="P:Cuemon.StringReplacePair.NewValue"/> of the <paramref name="replacePairs"/> sequence in <paramref name="value"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to perform the replacement on.</param>
            <param name="replacePairs">A sequence of <see cref="T:Cuemon.StringReplacePair"/> values.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>A <see cref="T:System.String"/> equivalent to <paramref name="value"/> but with all instances of <see cref="P:Cuemon.StringReplacePair.OldValue"/> replaced with <see cref="P:Cuemon.StringReplacePair.NewValue"/>.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.IsNullOrEmpty(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether a string sequence has at least one value that equals to null or empty.
            </summary>
            <param name="values">A string sequence in which to test for the presence of null or empty.</param>
            <returns>
            	<c>true</c> if a string sequence has at least one value that equals to null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.StringUtility.IsNullOrEmpty(System.String[])">
            <summary>
            Determines whether one or more string values equals to null or empty.
            </summary>
            <param name="values">One or more string values to test for the presence of null or empty.</param>
            <returns>
            	<c>true</c> if one or more string values equals to null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.StringUtility.CreateFixedString(System.Char,System.Int32)">
            <summary>
            Generates a string from the specified Unicode character repeated until the specified length.
            </summary>
            <param name="character">A Unicode character.</param>
            <param name="length">The number of times <paramref name="character"/> occurs.</param>
            <returns>A <see cref="T:System.String"/> filled with the specified <paramref name="character"/> until the specified <paramref name="length"/>.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.CreateRandomString(System.Int32)">
            <summary>
            Generates a random string with the specified length using values of <see cref="F:Cuemon.StringUtility.AlphanumericCharactersCaseSensitive"/>.
            </summary>
            <param name="length">The length of the random string to generate.</param>
            <returns>A random string from the values of <see cref="F:Cuemon.StringUtility.AlphanumericCharactersCaseSensitive"/>.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.CreateRandomString(System.Int32,System.String[])">
            <summary>
            Generates a random string with the specified length from the provided values.
            </summary>
            <param name="length">The length of the random string to generate.</param>
            <param name="values">The values to use in the randomization process.</param>
            <returns>A random string from the values provided.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.ParseStringFormat(System.String,System.Int32@)">
            <summary>
            Parses the given string for any format arguments (eg. Text{0}-{1}.).
            </summary>
            <param name="format">The desired string format to parse.</param>
            <param name="foundArguments">The number of arguments found in the string format.</param>
            <returns>
            	<c>true</c> if one or more format arguments is found; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.StringUtility.ParseStringFormat(System.String,System.Int32,System.Int32@)">
            <summary>
            Parses the given string for any format arguments (eg. Text{0}-{1}.).
            </summary>
            <param name="format">The desired string format to parse.</param>
            <param name="maxArguments">The maximum allowed arguments in the string format.</param>
            <param name="foundArguments">The number of arguments found in the string format.</param>
            <returns>
            	<c>true</c> if one or more format arguments is found and the found arguments does not exceed the maxArguments parameter; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.StringUtility.Escape(System.String)">
            <summary>
            Escapes the given <see cref="T:System.String"/> the same way as the well known JavaScrip escape() function.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to escape.</param>
            <returns>The input <paramref name="value"/> with an escaped equivalent.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.Unescape(System.String)">
            <summary>
            Unescapes the given <see cref="T:System.String"/> the same way as the well known Javascript unescape() function.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to unescape.</param>
            <returns>The input <paramref name="value"/> with an unescaped equivalent.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.Contains(System.String,System.String)">
            <summary>
            Returns a value indicating whether the specified <paramref name="value"/> occurs within the <paramref name="source"/> object.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to seek.</param>
            <param name="value">The <see cref="T:System.String"/> to search within <paramref name="source"/>.</param>
            <returns>
            	<c>true</c> if the <paramref name="value"/> parameter occurs within the <paramref name="source"/>, or if value is the empty string (""); otherwise, <c>false</c>.
            </returns>
            <remarks>This method performs an ordinal (case-insensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.</remarks>
        </member>
        <member name="M:Cuemon.StringUtility.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the specified <paramref name="value"/> occurs within the <paramref name="source"/> object.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to seek.</param>
            <param name="value">The <see cref="T:System.String"/> to search within <paramref name="source"/>.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>
            	<c>true</c> if the <paramref name="value"/> parameter occurs within the <paramref name="source"/>, or if value is the empty string (""); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.StringUtility.Contains(System.String,System.Char)">
            <summary>
            Returns a value indicating whether the specified <paramref name="value"/> occurs within the <paramref name="source"/> object.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to seek.</param>
            <param name="value">The <see cref="T:System.Char"/> to search within <paramref name="source"/>.</param>
            <returns>
            	<c>true</c> if the <paramref name="value"/> parameter occurs within the <paramref name="source"/>, or if value is the empty string (""); otherwise, <c>false</c>.
            </returns>
            <remarks>This method performs an ordinal (case-insensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.</remarks>
        </member>
        <member name="M:Cuemon.StringUtility.Contains(System.String,System.Char,System.StringComparison)">
            <summary>
            Returns a value indicating whether the specified <paramref name="value"/> occurs within the <paramref name="source"/> object.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to seek.</param>
            <param name="value">The <see cref="T:System.Char"/> to search within <paramref name="source"/>.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>
            	<c>true</c> if the <paramref name="value"/> parameter occurs within the <paramref name="source"/>, or if value is the empty string (""); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.StringUtility.Contains(System.String,System.String[])">
            <summary>
            Returns a value indicating whether the specified <paramref name="values"/> sequence occurs within the <paramref name="source"/> object.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to seek.</param>
            <param name="values">The <see cref="T:System.String"/> sequence to search within <paramref name="source"/>.</param>
            <returns>
            	<c>true</c> if the <paramref name="values"/> parameter occurs within the <paramref name="source"/>, or if value is the empty string (""); otherwise, <c>false</c>.
            </returns>
            <remarks>This method performs an ordinal (case-insensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.</remarks>
        </member>
        <member name="M:Cuemon.StringUtility.Contains(System.String,System.StringComparison,System.String[])">
            <summary>
            Returns a value indicating whether the specified <paramref name="values"/> sequence occurs within the <paramref name="source"/> object.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to seek.</param>
            <param name="values">The <see cref="T:System.String"/> sequence to search within <paramref name="source"/>.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>
            	<c>true</c> if the <paramref name="values"/> parameter occurs within the <paramref name="source"/>, or if value is the empty string (""); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.StringUtility.Contains(System.String,System.Char[])">
            <summary>
            Returns a value indicating whether the specified <paramref name="values"/> sequence occurs within the <paramref name="source"/> object.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to seek.</param>
            <param name="values">The <see cref="T:System.Char"/> sequence to search within <paramref name="source"/>.</param>
            <returns>
            	<c>true</c> if the <paramref name="values"/> parameter occurs within the <paramref name="source"/>, or if value is the empty string (""); otherwise, <c>false</c>.
            </returns>
            <remarks>This method performs an ordinal (case-sensitive and culture-insensitive) comparison. The search begins at the first character position of this string and continues through the last character position.</remarks>
        </member>
        <member name="M:Cuemon.StringUtility.Contains(System.String,System.StringComparison,System.Char[])">
            <summary>
            Returns a value indicating whether the specified <paramref name="values"/> sequence occurs within the <paramref name="source"/> object.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to seek.</param>
            <param name="values">The <see cref="T:System.Char"/> sequence to search within <paramref name="source"/>.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>
            	<c>true</c> if the <paramref name="values"/> parameter occurs within the <paramref name="source"/>, or if value is the empty string (""); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.StringUtility.StartsWith(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the beginning of an instance of <see cref="T:System.String"/> matches at least one string in the specified sequence of strings.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to compare.</param>
            <param name="startWithValues">A sequence of <see cref="T:System.String"/> values to match against.</param>
            <returns><c>true</c> if at least one value matches the beginning of this string; otherwise, <c>false</c>.</returns>
            <remarks>This match is performed by using a default value of <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.</remarks>
        </member>
        <member name="M:Cuemon.StringUtility.StartsWith(System.String,System.StringComparison,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the beginning of an instance of <see cref="T:System.String"/> matches at least one string in the specified sequence of strings.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to compare.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <param name="startWithValues">A sequence of <see cref="T:System.String"/> values to match against.</param>
            <returns><c>true</c> if at least one value matches the beginning of this string; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.StartsWith(System.String,System.String[])">
            <summary>
            Determines whether the beginning of an instance of <see cref="T:System.String"/> matches at least one string in the specified sequence of strings.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to compare.</param>
            <param name="startWithValues">A sequence of <see cref="T:System.String"/> values to match against.</param>
            <returns><c>true</c> if at least one value matches the beginning of this string; otherwise, <c>false</c>.</returns>
            <remarks>This match is performed by using a default value of <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.</remarks>
        </member>
        <member name="M:Cuemon.StringUtility.StartsWith(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether the beginning of an instance of <see cref="T:System.String"/> matches at least one string in the specified sequence of strings.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to compare.</param>
            <param name="comparison">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <param name="startWithValues">A sequence of <see cref="T:System.String"/> values to match against.</param>
            <returns><c>true</c> if at least one value matches the beginning of this string; otherwise, <c>false</c>.</returns>
            <remarks>This match is performed by using a default value of <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.</remarks>
        </member>
        <member name="M:Cuemon.StringUtility.FormatDateTime(System.DateTime,Cuemon.StandardizedDateTimeFormatPattern)">
            <summary>
            Returns a string expression representing a standardized date- and time value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to be formatted.</param>
            <param name="pattern">The standardized patterns to apply on <paramref name="value"/>.</param>
            <returns>Returns a string expression representing a date- and time value.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.FormatDateTime(System.DateTime,Cuemon.StandardizedDateTimeFormatPattern,System.Byte)">
            <summary>
            Returns a string expression representing a standardized date- and time value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to be formatted.</param>
            <param name="pattern">The standardized patterns to apply on <paramref name="value"/>.</param>
            <param name="fractionalDecimalPlaces">The amount of fractional decimal places to apply to the string expression.</param>
            <returns>Returns a string expression representing a date- and time value.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.FormatDateTime(System.DateTime,Cuemon.DateTimeFormatPattern)">
            <summary>
            Returns a string expression representing a standardized date- and time value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to be formatted.</param>
            <param name="pattern">The standardized patterns to apply on <paramref name="value"/>.</param>
            <returns>Returns a string expression representing a date- and time value.</returns>
        </member>
        <member name="M:Cuemon.StringUtility.FormatDateTime(System.DateTime,Cuemon.DateTimeFormatPattern,System.IFormatProvider)">
            <summary>
            Returns a string expression representing a standardized date- and time value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to be formatted.</param>
            <param name="pattern">The standardized patterns to apply on <paramref name="value"/>.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <returns>Returns a string expression representing a date- and time value.</returns>
        </member>
        <member name="T:Cuemon.Text.EncodingUtility">
            <summary>
            This utility class is designed to make <see cref="T:System.Text.Encoding"/> operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.Text.EncodingUtility.GetEncodings">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IDictionary`2"/> that contains all encodings in the form of code page and name, eg. key is 1200 and value is utf-16.
            </summary>
            <remarks>This was implemented do to a thread-related bug in the Microsoft .NET Framework 2.0, so if you need the value of the WebName property, call this variable with the CodePage value instead.</remarks>
        </member>
        <member name="M:Cuemon.Text.EncodingUtility.GetEncodingName(System.Int32)">
            <summary>
            Gets the name registered with the Internet Assigned Numbers Authority (IANA) for the specified <paramref name="codePage"/>.
            </summary>
            <param name="codePage">A code page identifier.</param>
            <returns>The IANA name for the encoding. For more information about the IANA, see www.iana.org.</returns>
        </member>
        <member name="M:Cuemon.Text.EncodingUtility.TryParse(System.IO.Stream,System.Text.Encoding@)">
            <summary>
            Tries to resolve the Unicode <see cref="T:System.Text.Encoding"/> object from the specified <see cref="T:System.IO.Stream"/> object.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> object to resolve the Unicode <see cref="T:System.Text.Encoding"/> object from.</param>
            <param name="result">When this method returns, it contains the Unicode <see cref="T:System.Text.Encoding"/> value equivalent to the encoding contained in <paramref name="value"/>, if the conversion succeeded, or a null reference (Nothing in Visual Basic) if the conversion failed. The conversion fails if the <paramref name="value"/> parameter is null, or does not contain a Unicode representation of an <see cref="T:System.Text.Encoding"/>.</param>
            <returns><c>true</c> if the <paramref name="value"/> parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.Text.EncodingUtility.TryParse(System.Byte[],System.Text.Encoding@)">
            <summary>
            Tries to resolve the Unicode <see cref="T:System.Text.Encoding"/> object from the specified <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> array to resolve the Unicode <see cref="T:System.Text.Encoding"/> object from.</param>
            <param name="result">When this method returns, it contains the Unicode <see cref="T:System.Text.Encoding"/> value equivalent to the encoding contained in <paramref name="value"/>, if the conversion succeeded, or a null reference (Nothing in Visual Basic) if the conversion failed. The conversion fails if the <paramref name="value"/> parameter is null, or does not contain a Unicode representation of an <see cref="T:System.Text.Encoding"/>.</param>
            <returns><c>true</c> if the <paramref name="value"/> parameter was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Cuemon.Text.Obfuscator">
            <summary>
            Provides methods for obfuscation of documents for reduced readability and size.
            </summary>
        </member>
        <member name="M:Cuemon.Text.Obfuscator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.Obfuscator"/> class using <see cref="P:System.Text.Encoding.Unicode"/> for the character encoding.
            </summary>
        </member>
        <member name="M:Cuemon.Text.Obfuscator.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.Obfuscator"/> class using <see cref="P:System.Text.Encoding.Unicode"/> for the character encoding.
            </summary>
            <param name="exclusions">A sequence of <see cref="T:System.String"/> values used for excluding matching original values in the obfuscation process.</param>
        </member>
        <member name="M:Cuemon.Text.Obfuscator.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.Obfuscator"/> class.
            </summary>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Cuemon.Text.Obfuscator.#ctor(System.Text.Encoding,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.Obfuscator"/> class.
            </summary>
            <param name="encoding">The character encoding to use.</param>
            <param name="exclusions">A sequence of <see cref="T:System.String"/> values used for excluding matching original values in the obfuscation process.</param>
        </member>
        <member name="M:Cuemon.Text.Obfuscator.InitializePermutationCharacters">
            <summary>
            Initializes the permutation characters used in the obfuscation process.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> compatible object holding the permuation characters used in the obfuscation process.</returns>
            <remarks>
            Override this method to implement your own initialization of permuation characters.
            Default implementation is initialized as a read-only <see cref="T:System.Collections.Generic.IList`1"/> compatible object with the values found in <see cref="F:Cuemon.StringUtility.AlphanumericCharactersCaseSensitive"/>.
            </remarks>
        </member>
        <member name="M:Cuemon.Text.Obfuscator.ComputeHash(System.String)">
            <summary>
            Computes a SHA-1 hash value of the specified <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to compute a hash code for.</param>
            <returns>A <see cref="T:System.String"/> containing the computed SHA-1 hash value of <paramref name="value"/>.</returns>
            <remarks>Do override this method if you prefer another hashing than SHA-1.</remarks>
        </member>
        <member name="M:Cuemon.Text.Obfuscator.GenerateObfuscatedValue">
            <summary>
            Creates and returns a random generated <see cref="T:System.String"/> with a factorial size of (x - <see cref="P:Cuemon.Text.Obfuscator.CurrentCombinationLength"/>) ideal for obfuscated usage.
            </summary>
            <returns>A random generated <see cref="T:System.String"/> with a factorial size of (x - <see cref="P:Cuemon.Text.Obfuscator.CurrentCombinationLength"/>) ideal for obfuscated usage, where x in the default implementation equals 62.</returns>
            <remarks>
            This implementation uses the values from <see cref="P:Cuemon.Text.Obfuscator.PermutationCharacters"/> to compute the permutation.
            Using the standard implementation gives a close to limitless permutation in regards to obfuscation, as the value automatically grows when needed.
            </remarks>
        </member>
        <member name="M:Cuemon.Text.Obfuscator.CreateMapping">
            <summary>
            Creates and returns a mappaple format of the original values and the obfuscated values.
            </summary>
            <returns>A mappaple format of the original values and the obfuscated values.</returns>
        </member>
        <member name="M:Cuemon.Text.Obfuscator.Obfuscate(System.IO.Stream)">
            <summary>
            Obfuscates the values of the specified <see cref="T:System.IO.Stream"/> object.
            </summary>
            <param name="value">The <see cref="T:System.IO.Stream"/> object to obfuscate.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object where the values has been obfuscated.</returns>
        </member>
        <member name="M:Cuemon.Text.Obfuscator.Revert(System.IO.Stream,System.IO.Stream)">
            <summary>
            Revert the obfuscated value of <paramref name="value"/> to its original state by applying the mappaple values of <paramref name="mapping"/>.
            </summary>
            <param name="value">The obfuscated <see cref="T:System.IO.Stream"/> to revert.</param>
            <param name="mapping">A <see cref="T:System.IO.Stream"/> containing mappaple values necessary to revert <paramref name="value"/> to its original state.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object where the obfuscated value has been reverted to its original value.</returns>
        </member>
        <member name="P:Cuemon.Text.Obfuscator.CurrentCombinationLength">
            <summary>
            Gets the length of the current combination used in conjuction with <see cref="P:Cuemon.Text.Obfuscator.CurrentPermutationSize"/>.
            </summary>
            <value>The length of the current combination used in conjuction with <see cref="P:Cuemon.Text.Obfuscator.CurrentPermutationSize"/>.</value>
        </member>
        <member name="P:Cuemon.Text.Obfuscator.CurrentPermutationSize">
            <summary>
            Gets the calculated size of the current permutation used in conjuction with <see cref="P:Cuemon.Text.Obfuscator.CurrentCombinationLength"/>.
            </summary>
            <value>The calculated size of the current permutation used in conjuction with <see cref="P:Cuemon.Text.Obfuscator.CurrentCombinationLength"/>.</value>
        </member>
        <member name="P:Cuemon.Text.Obfuscator.Encoding">
            <summary>
            Gets or sets the character encoding to use.
            </summary>
            <value>The character encoding to use. The default is <see cref="P:System.Text.Encoding.Unicode"/>.</value>
        </member>
        <member name="P:Cuemon.Text.Obfuscator.PermutationCharacters">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IList`1"/> compatible object holding the characters initialized by <see cref="M:Cuemon.Text.Obfuscator.InitializePermutationCharacters"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IList`1"/> compatible object holding the characters initialized by <see cref="M:Cuemon.Text.Obfuscator.InitializePermutationCharacters"/>.</value>
        </member>
        <member name="P:Cuemon.Text.Obfuscator.ObfuscatedValues">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.ICollection`1"/> of the generated obfuscated values.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.ICollection`1"/> of the generated obfuscated values.</value>
        </member>
        <member name="P:Cuemon.Text.Obfuscator.Exclusions">
            <summary>
            Gets a list of exclusions for the obfuscation process.
            </summary>
            <value>A list of exclusions for the obfuscation process.</value>
        </member>
        <member name="P:Cuemon.Text.Obfuscator.Mappings">
            <summary>
            Gets the generated mapping values associated with the obfuscated content.
            </summary>
            <value>The original values gathered in a mappable structure.</value>
        </member>
        <member name="T:Cuemon.Text.ObfuscatorMapping">
            <summary>
            A simple container for the original value of an obfuscated entry as well as the obfuscated value.
            This is used for reversing an obfuscated document to its original value.
            </summary>
        </member>
        <member name="M:Cuemon.Text.ObfuscatorMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.ObfuscatorMapping"/> class.
            </summary>
        </member>
        <member name="M:Cuemon.Text.ObfuscatorMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cuemon.Text.ObfuscatorMapping"/> class.
            </summary>
            <param name="obfuscated">The obfuscated value of <paramref name="original"/>.</param>
            <param name="original">The original value of <paramref name="obfuscated"/>.</param>
        </member>
        <member name="M:Cuemon.Text.ObfuscatorMapping.IncrementCount">
            <summary>
            Increments the representation count of this mapping.
            </summary>
        </member>
        <member name="P:Cuemon.Text.ObfuscatorMapping.Obfuscated">
            <summary>
            Gets the obfuscated value of <see cref="P:Cuemon.Text.ObfuscatorMapping.Original"/>.
            </summary>
            <value>The obfuscated value of <see cref="P:Cuemon.Text.ObfuscatorMapping.Original"/>.</value>
        </member>
        <member name="P:Cuemon.Text.ObfuscatorMapping.Original">
            <summary>
            Gets the original value of <see cref="P:Cuemon.Text.ObfuscatorMapping.Obfuscated"/>.
            </summary>
            <value>The original value of <see cref="P:Cuemon.Text.ObfuscatorMapping.Obfuscated"/>.</value>
        </member>
        <member name="P:Cuemon.Text.ObfuscatorMapping.Count">
            <summary>
            Gets the total representation count of this mapping.
            </summary>
            <value>The total representation count of this mapping.</value>
        </member>
        <member name="T:Cuemon.TypeUtility">
            <summary>
            This utility class is designed to make <see cref="T:System.Type"/> operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.TypeUtility.IsEqualityComparer(System.Type)">
            <summary>
            Determines whether the specified <paramref name="source"/> implements either <see cref="T:System.Collections.IEqualityComparer"/> or <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="source">The source type to check for implements of either <see cref="T:System.Collections.IEqualityComparer"/> or <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> implements either <see cref="T:System.Collections.IEqualityComparer"/> or <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.IsComparable(System.Type)">
            <summary>
            Determines whether the specified <paramref name="source"/> implements either <see cref="T:System.IComparable"/> or <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="source">The source type to check for implements of either <see cref="T:System.IComparable"/> or <see cref="T:System.IComparable`1"/>.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> implements either <see cref="T:System.IComparable"/> or <see cref="T:System.IComparable`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.IsComparer(System.Type)">
            <summary>
            Determines whether the specified <paramref name="source"/> implements either <see cref="T:System.Collections.IComparer"/> or <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="source">The source type to check for implements of either <see cref="T:System.Collections.IComparer"/> or <see cref="T:System.Collections.Generic.IComparer`1"/>.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> implements either <see cref="T:System.Collections.IComparer"/> or <see cref="T:System.Collections.Generic.IComparer`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.IsEnumerable(System.Type)">
            <summary>
            Determines whether the specified <paramref name="source"/> implements either <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="source">The source type to check for implements of either <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> implements either <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.IsDictionary(System.Type)">
            <summary>
            Determines whether the specified <paramref name="source"/> implements either <see cref="T:System.Collections.IDictionary"/>, <see cref="T:System.Collections.Generic.IDictionary`2"/> or <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <param name="source">The source type to check for implements of either <see cref="T:System.Collections.IDictionary"/>, <see cref="T:System.Collections.Generic.IDictionary`2"/> or <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/></param>
            <returns><c>true</c> if the specified <paramref name="source"/> implements either <see cref="T:System.Collections.IDictionary"/>, <see cref="T:System.Collections.Generic.IDictionary`2"/> or <see cref="T:Cuemon.Collections.Generic.IReadOnlyDictionary`2"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.IsKeyValuePair(System.Type)">
            <summary>
            Determines whether the specified <paramref name="source"/> implements either <see cref="T:System.Collections.DictionaryEntry"/> or <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="source">The source type to check for implements of either <see cref="T:System.Collections.DictionaryEntry"/> or <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <returns><c>true</c> if the specified <paramref name="source"/> implements either <see cref="T:System.Collections.DictionaryEntry"/> or <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.SanitizeTypeName(System.Type)">
            <summary>
            Sanitizes the name of the <paramref name="source"/> with the intend to be understood by humans. 
            </summary>
            <param name="source">The type to sanitize the name from.</param>
            <returns>A sanitized <see cref="T:System.String"/> representation of <paramref name="source"/>.</returns>
            <remarks>Only the simple name of the <paramref name="source"/> is returned, not the fully qualified name.</remarks>
        </member>
        <member name="M:Cuemon.TypeUtility.SanitizeTypeName(System.Type,System.Boolean)">
            <summary>
            Sanitizes the name of the <paramref name="source"/> with the intend to be understood by humans. 
            </summary>
            <param name="source">The type to sanitize the name from.</param>
            <param name="fullName">Specify <c>true</c> to use the fully qualified name of the <paramref name="source"/>; otherwise, <c>false</c> for the simple name of <paramref name="source"/>.</param>
            <returns>A sanitized <see cref="T:System.String"/> representation of <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.SanitizeTypeName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Sanitizes the name of the <paramref name="source"/> with the intend to be understood by humans. 
            </summary>
            <param name="source">The type to sanitize the name from.</param>
            <param name="fullName">Specify <c>true</c> to use the fully qualified name of the <paramref name="source"/>; otherwise, <c>false</c> for the simple name of <paramref name="source"/>.</param>
            <param name="excludeGenericArguments">Specify <c>true</c> to exclude generic arguments from the result; otherwise <c>false</c> to include generic arguments should the <paramref name="source"/> be a generic type.</param>
            <returns>A sanitized <see cref="T:System.String"/> representation of <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.IsNullable(System.Type)">
            <summary>
            Determines whether the specified source is a nullable <see cref="T:System.ValueType"/>.
            </summary>
            <param name="source">The source type to check for nullable <see cref="T:System.ValueType"/>.</param>
            <returns>
              <c>true</c> if the specified source is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.IsNullable``1(``0)">
            <summary>
            Determines whether the specified source is a nullable <see cref="T:System.ValueType"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="source"/> of <typeparamref name="T"/>.</typeparam>
            <param name="source">The source type to check for nullable <see cref="T:System.ValueType"/>.</param>
            <returns>
              <c>true</c> if the specified source is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.IsNullable``1(System.Nullable{``0})">
            <summary>
            Determines whether the specified source is a nullable <see cref="T:System.ValueType"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="source"/> of <typeparamref name="T"/>.</typeparam>
            <param name="source">The source type to check for nullable <see cref="T:System.ValueType"/>.</param>
            <returns>
              <c>true</c> if the specified source is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.GetDescendantOrSelfTypes(System.Type)">
            <summary>
            Gets a sequence of derived types from the <paramref name="source"/> an it's associated <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="source">The source type to locate derived types from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> holding the derived types from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.GetDescendantOrSelfTypes(System.Type,System.Reflection.Assembly[])">
            <summary>
            Gets a sequence of derived types from the <paramref name="source"/>.
            </summary>
            <param name="source">The source type to locate derived types from.</param>
            <param name="assemblies">The assemblies to search for the <paramref name="source"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> holding the derived types from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.GetAncestorOrSelf(System.Type,System.Type)">
            <summary>
            Gets the ancestor-or-self <see cref="T:System.Type"/> from the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source type to traverse.</param>
            <param name="sourceBaseLimit">The base limit of <paramref name="source"/>.</param>
            <returns>The ancestor-or-self type from the specified <paramref name="source"/> that is derived or equal to <paramref name="sourceBaseLimit"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> - or - <paramref name="sourceBaseLimit"/> is null.
            </exception>
        </member>
        <member name="M:Cuemon.TypeUtility.GetAncestorOrSelfTypes(System.Type)">
            <summary>
            Gets a sequence of ancestor-or-self types from the <paramref name="source"/>.
            </summary>
            <param name="source">The source type to locate ancestor-or-self types from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> holding the ancestor-or-self types from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.GetAncestorAndDescendantsOrSelfTypes(System.Type)">
            <summary>
            Gets a sorted (base-to-derived) sequence of ancestor-and-descendant-or-self types from the <paramref name="source"/>.
            </summary>
            <param name="source">The source type to locate ancestor-and-descendant-or-self types from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> holding the ancestor-and-descendant-or-self types from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.GetAncestorAndDescendantsOrSelfTypes(System.Type,System.Reflection.Assembly[])">
            <summary>
            Gets a sorted (base-to-derived) sequence of ancestor-and-descendant-or-self types from the <paramref name="source"/>.
            </summary>
            <param name="source">The source type to locate ancestor-and-descendant-or-self types from.</param>
            <param name="assemblies">The assemblies to search for the <paramref name="source"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> holding the ancestor-and-descendant-or-self types from the <paramref name="source"/>.</returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsInterface(System.Type,System.Type[])">
            <summary>
            Determines whether the specified source contains one or more of the target types specified throughout this member's inheritance chain.
            </summary>
            <param name="source">The source type to match against.</param>
            <param name="targetTypes">The target interface types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source contains one or more of the target types specified throughout this member's inheritance chain; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsInterface(System.Object,System.Type[])">
            <summary>
            Determines whether the specified source contains one or more of the target types specified throughout this member's inheritance chain.
            </summary>
            <param name="source">The source object to match against.</param>
            <param name="targets">The target interface types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source contains one or more of the target types specified throughout this member's inheritance chain; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsInterface(System.Object,System.Boolean,System.Type[])">
            <summary>
            Determines whether the specified source contains one or more of the target types specified.
            </summary>
            <param name="source">The source object to match against.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the interfaces.</param>
            <param name="targets">The target interface types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source contains one or more of the target types specified; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsInterface(System.Type,System.Boolean,System.Type[])">
            <summary>
            Determines whether the specified source contains one or more of the target types specified.
            </summary>
            <param name="source">The source type to match against.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the interfaces.</param>
            <param name="targets">The target interface types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source contains one or more of the target types specified; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsAttributeType(System.Object,System.Type[])">
            <summary>
            Determines whether the specified source object contains one or more of the specified attribute target types.
            </summary>
            <param name="source">The source object to match against.</param>
            <param name="targets">The attribute target types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source object contains one or more of the specified attribute target types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsAttributeType(System.Object,System.Boolean,System.Type[])">
            <summary>
            Determines whether the specified source object contains one or more of the specified attribute target types.
            </summary>
            <param name="source">The source object to match against.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="source"/>  inheritance chain to find the attributes; otherwise, <c>false</c>.</param>
            <param name="targets">The attribute target types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source object contains one or more of the specified attribute target types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsAttributeType(System.Type,System.Type[])">
            <summary>
            Determines whether the specified source type contains one or more of the specified attribute target types.
            </summary>
            <param name="source">The source type to match against.</param>
            <param name="targets">The attribute target types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source type contains one or more of the specified attribute target types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsAttributeType(System.Type,System.Boolean,System.Type[])">
            <summary>
            Determines whether the specified source type contains one or more of the specified attribute target types.
            </summary>
            <param name="source">The source type to match against.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="source"/> inheritance chain to find the attributes; otherwise, <c>false</c>.</param>
            <param name="targets">The attribute target types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source type contains one or more of the specified attribute target types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsAttributeType(System.Reflection.MemberInfo,System.Type[])">
            <summary>
            Determines whether the specified source type contains one or more of the specified attribute target types.
            </summary>
            <param name="source">The member to match against.</param>
            <param name="targets">The attribute target types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified member contains one or more of the specified attribute target types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsAttributeType(System.Reflection.MemberInfo,System.Boolean,System.Type[])">
            <summary>
            Determines whether the specified source type contains one or more of the specified attribute target types.
            </summary>
            <param name="source">The member to match against.</param>
            <param name="inherit"><c>true</c> to search the <paramref name="source"/> inheritance chain to find the attributes; otherwise, <c>false</c>.</param>
            <param name="targets">The attribute target types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified member contains one or more of the specified attribute target types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsType(System.Collections.IEnumerable,System.Type[])">
            <summary>
            Determines whether the specified collection of source objects contains one or more of the specified target types.
            </summary>
            <param name="sources">The collection of source objects to match against.</param>
            <param name="targets">The target types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified collection of source objects contains one more of the target types specified; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsType(System.Type,System.Type[])">
            <summary>
            Determines whether the specified source type contains one or more of the specified target types.
            </summary>
            <param name="source">The source type to match against.</param>
            <param name="targets">The target types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source contains one or more of the specified target types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsType(System.Object,System.Type[])">
            <summary>
            Determines whether the specified source contains one or more of the specified target types.
            </summary>
            <param name="source">The source object to match against.</param>
            <param name="targets">The target types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source contains one or more of the specified target types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.TypeUtility.ContainsType(System.Object,System.Boolean,System.Type[])">
            <summary>
            Determines whether the specified source/collection of source object(s) contains one or more of the specified target types.
            </summary>
            <param name="source">The source object to match against.</param>
            <param name="treatSourceAsEnumerable">if set to <c>true</c> the source object is cast as an <see cref="T:System.Collections.IEnumerable"/> object, and the actual matching is now done against the source objects within the collection against the target types specified.</param>
            <param name="targets">The target types to be matched against.</param>
            <returns>
            	<c>true</c> if the specified source contains one or more of the specified target types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Cuemon.UriUtility">
            <summary>
            This utility class is designed to make <see cref="T:System.Uri"/> operations easier to work with.
            </summary>
        </member>
        <member name="M:Cuemon.UriUtility.GetAllUriSchemes">
            <summary>
            Gets all URI schemes currently supported by the .NET framework.
            </summary>
            <returns>An <see cref="T:System.Array"/> of all URI schemes currently supported by the .NET framework.</returns>
        </member>
        <member name="M:Cuemon.UriUtility.IsUri(System.String)">
            <summary>
            Determines whether the specified value is an absolute URI string from all known URI schemes.
            </summary>
            <param name="value">The string value representing the URI.</param>
            <returns>
            	<c>true</c> if the specified value evaluates to an URI; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.UriUtility.IsUri(System.String,System.UriKind)">
            <summary>
            Determines whether the specified value is an URI string from all known URI schemes.
            </summary>
            <param name="value">The string value representing the URI.</param>
            <param name="uriKind">The type of the URI.</param>
            <returns>
            	<c>true</c> if the specified value evaluates to an URI; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.UriUtility.IsUri(System.String,Cuemon.UriScheme[])">
            <summary>
            Determines whether the specified value is an absolute URI string.
            </summary>
            <param name="value">The string value representing the URI.</param>
            <param name="schemes">An array of <see cref="T:Cuemon.UriScheme"/> values to use in the validation of the URI.</param>
            <returns>
            	<c>true</c> if the specified value evaluates to an absolute URI; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.UriUtility.IsUri(System.String,System.UriKind,Cuemon.UriScheme[])">
            <summary>
            Determines whether the specified value is an URI string.
            </summary>
            <param name="value">The string value representing the URI.</param>
            <param name="uriKind">The type of the URI.</param>
            <param name="schemes">An array of <see cref="T:Cuemon.UriScheme"/> values to use in the validation of the URI.</param>
            <returns>
            	<c>true</c> if the specified value evaluates to an URI; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.UriUtility.ContainsScheme(System.String,Cuemon.UriScheme[])">
            <summary>
            Determines whether an URI string contains one of the <see cref="T:Cuemon.UriScheme"/> values.
            </summary>
            <param name="value">The URI string to evaluate.</param>
            <param name="schemes">An <see cref="T:System.Array"/> of <see cref="T:Cuemon.UriScheme"/> values.</param>
            <returns>
            	<c>true</c> if the specified URI string contains one of the <see cref="T:Cuemon.UriScheme"/> values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.UriUtility.ContainsScheme(System.Uri,Cuemon.UriScheme[])">
            <summary>
            Determines whether an <see cref="T:System.Uri"/> contains one of the <see cref="T:Cuemon.UriScheme"/> values. 
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> to evaluate.</param>
            <param name="schemes">An <see cref="T:System.Array"/> of <see cref="T:Cuemon.UriScheme"/> values.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Uri"/> contains one of the <see cref="T:Cuemon.UriScheme"/> values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cuemon.UriUtility.TryParse(System.String,System.UriKind,System.Uri@)">
            <summary>
            Converts the specified string representation of an URI value to its <see cref="T:System.Uri"/> equivalent.
            </summary>
            <param name="value">A string containing the URI to convert.</param>
            <param name="uriKind">The type of the URI.</param>
            <param name="result">When this method returns, contains the constructed <see cref="T:System.Uri"/>.</param>
            <returns>
                <c>true</c> if the <see cref="T:System.Uri"/> was successfully created; otherwise, false.
            </returns>
            <remarks>
            If this method returns true, the new <see cref="T:System.Uri"/> is in result.
            </remarks>
        </member>
        <member name="M:Cuemon.UriUtility.TryParse(System.String,System.UriKind,Cuemon.UriScheme[],System.Uri@)">
            <summary>
            Converts the specified string representation of an URI value to its <see cref="T:System.Uri"/> equivalent, limited to what is specified in the <see paramref="schemes"/> parameter.
            </summary>
            <param name="value">A string containing the URI to convert.</param>
            <param name="uriKind">The type of the URI.</param>
            <param name="schemes">An array of <see cref="T:Cuemon.UriScheme"/> values to use in the parsing of the URI.</param>
            <param name="result">When this method returns, contains the constructed <see cref="T:System.Uri"/>.</param>
            <returns>
                <c>true</c> if the <see cref="T:System.Uri"/> was successfully created; otherwise, false.
            </returns>
            <remarks>
            If this method returns true, the new <see cref="T:System.Uri"/> is in result.
            </remarks>
        </member>
        <member name="M:Cuemon.UriUtility.ParseScheme(System.String)">
            <summary>
            Converts the specified string representation of an URI scheme to its <see cref="T:Cuemon.UriScheme"/> equivalent.
            </summary>
            <param name="scheme">A string containing an URI scheme to convert.</param>
            <returns>A <see cref="T:Cuemon.UriScheme"/> equivalent to the URI scheme contained in <c>scheme</c>.</returns>
        </member>
        <member name="T:Cuemon.UriScheme">
            <summary>
            Defines the schemes available for an <see cref="T:System.Uri"/> class.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Undefined">
            <summary>
            Specifies an undefined scheme.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.File">
            <summary>
            Specifies that the URI is a pointer to a file.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Ftp">
            <summary>
            Specifies that the URI is accessed through the File Transfer Protocol (FTP).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Gopher">
            <summary>
            Specifies that the URI is accessed through the Gopher protocol.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Http">
            <summary>
            Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Https">
            <summary>
            Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Mailto">
            <summary>
            Specifies that the URI is an e-mail address and is accessed through the Simple Mail Transport Protocol (SMTP).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.NetPipe">
            <summary>
            Specifies that the URI is accessed through the NetPipe scheme of the "Indigo" system.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.NetTcp">
            <summary>
            Specifies that the URI is accessed through the NetTcp scheme of the "Indigo" system.
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.News">
            <summary>
            Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP).
            </summary>
        </member>
        <member name="F:Cuemon.UriScheme.Nntp">
            <summary>
            Specifies that the URI is an Internet news group and is accessed through the Network News Transport Protocol (NNTP).
            </summary>
        </member>
    </members>
</doc>
